--- a/scripts/ingest_qdrant.py
+++ b/scripts/ingest_qdrant.py
@@
+import re
+from typing import Dict, List, Tuple
+
+# Двуязычные соответствия тегов: англ. слуги ↔ русские синонимы
+TAG_BILINGUAL = {
+    "breathing": ["дыхание"],
+    "cognitive_restructuring": ["когнитивная_работа", "рефрейминг"],
+    "behavioural_activation": ["поведенческая_активация", "ба"],
+    "problem_solving": ["решение_проблем"],
+    "psychoeducation": ["психообразование", "ожидания", "структура_сессии"],
+    "exposure": ["экспозиция"],
+    "grounding": ["заземление"],
+    "values": ["ценности"],
+    "self_compassion": ["доброта_к_себе", "самосострадание"],
+    "defusion": ["дефузия", "отцепиться_от_мысли"],
+    "micro_practice": ["микро_практика"],
+    "stress_coping": ["стресс", "стресс_копинг"],
+    "homework": ["домашка"],
+    "expectations": ["ожидания"],
+    "session_structure": ["структура_сессии"],
+    "socratic_questioning": ["сократические_вопросы"],
+    "cognitive_model": ["когнитивная_модель"],
+    "behavioral_experiments": ["поведенческие_эксперименты"],
+    "relapse_prevention": ["профилактика_отката"],
+    "self_help": ["самопомощь"],
+}
+
+def parse_front_matter(text: str) -> Tuple[Dict[str, str], str]:
+    """
+    Парсит строки-комментарии формата: # key: value
+    Возвращает (meta, body) — метаданные и чистое тело без шапки.
+    """
+    meta: Dict[str, str] = {}
+    body_lines: List[str] = []
+    in_header = True
+    for line in text.splitlines():
+        if in_header:
+            m = re.match(r'^\s*#\s*([A-Za-z_]+)\s*:\s*(.+?)\s*$', line)
+            if m:
+                key, val = m.group(1).lower(), m.group(2).strip()
+                meta[key] = val
+                continue
+            # как только встретили строку без "# key: value" — шапка закончилась
+            in_header = False
+        body_lines.append(line)
+    return meta, "\n".join(body_lines).strip()
+
+def expand_tags_bilingual(raw: List[str]) -> List[str]:
+    out = set()
+    for t in raw:
+        if not t:
+            continue
+        slug = t.lower().strip().replace(" ", "_")
+        out.add(slug)
+        # en -> ru
+        if slug in TAG_BILINGUAL:
+            out.update(TAG_BILINGUAL[slug])
+        # ru -> en
+        for en, ru_list in TAG_BILINGUAL.items():
+            if slug in ru_list:
+                out.add(en)
+    return sorted(out)
@@
-    raw_text = Path(path).read_text(encoding="utf-8")
-    chunks = split_into_chunks(raw_text)
+    raw_text = Path(path).read_text(encoding="utf-8")
+    meta, body = parse_front_matter(raw_text)
+    # Разбор тегов из meta.get("tags"), разделители: запятая или точка с запятой
+    raw_tags = []
+    if "tags" in meta and meta["tags"]:
+        raw_tags = [t.strip() for t in re.split(r'[;,]', meta["tags"]) if t.strip()]
+    tags = expand_tags_bilingual(raw_tags)
+    chunks = split_into_chunks(body)  # режем только тело (без шапки)
@@
-        payload = {"source": source_url}
+        payload = {
+            "source": meta.get("source"),
+            "lang": meta.get("lang", "ru"),
+            "title": meta.get("title"),
+            "tags": tags,
+            "text": text_chunk,  # кладём сам текст чанка, чтобы потом проще собирать контекст
+        }
         upsert_to_qdrant(text_chunk, embedding, payload)

# app/main.py
import asyncio
import os
from contextlib import suppress

from fastapi import FastAPI, Request, Header, Response
from fastapi.responses import PlainTextResponse

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Update, BotCommand

from .memory_schema import ensure_memory_schema, ensure_users_policy_column
from .memory_schema import ensure_users_created_at_column
from .bot import router as bot_router

# --- env (—Å—Ç—Ä–æ–≥–æ –µ–¥–∏–Ω—ã–µ –∏–º–µ–Ω–∞) ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL", "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
if not WEBHOOK_BASE_URL:
    raise RuntimeError("WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://<app>.onrender.com)")

WEBHOOK_PATH = "/telegram/webhook"  # –ø—É—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–π
WEBHOOK_URL = f"{WEBHOOK_BASE_URL}{WEBHOOK_PATH}"

# === Watchdog: –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç/—á—É–∂–æ–π ===
WATCHDOG_INTERVAL_SEC = int(os.getenv("WEBHOOK_WATCHDOG_SEC", "60"))

# aiogram 3.x
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp.include_router(bot_router)

app = FastAPI(title="ReflectAI webhook")


async def _webhook_watchdog():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —á–∏–Ω–∏–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω —Å–ª–µ—Ç–µ–ª/–ø–µ—Ä–µ–∫–ª–µ–µ–Ω."""
    while True:
        try:
            info = await bot.get_webhook_info()
            if info.url != WEBHOOK_URL:
                print(f"[watchdog] webhook mismatch ('{info.url}') -> set '{WEBHOOK_URL}'")
                await bot.set_webhook(
                    url=WEBHOOK_URL,
                    secret_token=WEBHOOK_SECRET or None,
                    allowed_updates=[],  # default –Ω–∞–±–æ—Ä
                )
        except Exception as e:
            print("[watchdog] error:", repr(e))
        await asyncio.sleep(max(5, WATCHDOG_INTERVAL_SEC))  # –Ω–µ –¥–∞–≤–∏–º API


@app.get("/")
async def root():
    return PlainTextResponse("ok")


@app.get("/health")
async def health_get():
    return PlainTextResponse("ok")


@app.head("/health")
async def health_head():
    return Response(status_code=200)


@app.on_event("startup")
async def on_startup():
    # 1) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –ø–∞–º—è—Ç–∏ (—Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–¥—É—Ç—Å—è —Å–∞–º–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    ensure_memory_schema()
    ensure_users_policy_column()
    ensure_users_created_at_column()

    # 2) —á–∏—Å—Ç–∏–º –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞–≤–∏–º –∑–∞–Ω–æ–≤–æ
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        ok = await bot.set_webhook(
            url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET or None,
            allowed_updates=[],  # default –Ω–∞–±–æ—Ä
        )
        print(f"[startup] set_webhook: {ok} -> {WEBHOOK_URL}")
    except Exception as e:
        # –≤–∞–∂–Ω–æ –Ω–µ —É—Ä–æ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: Telegram –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å
        print("[startup] set_webhook ERROR:", repr(e))

    # 3) –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å / –º–µ–Ω—é –∫–æ–º–∞–Ω–¥)
    try:
        await bot.set_my_commands([
            BotCommand(command="start",        description="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"),
            BotCommand(command="talk",         description="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"),
            BotCommand(command="work",         description="üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"),
            BotCommand(command="meditations",  description="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏"),
            BotCommand(command="settings",     description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand(command="privacy",      description="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (–ø–∞–Ω–µ–ª—å)"),
            BotCommand(command="policy",       description="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞"),
            BotCommand(command="about",        description="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"),
            BotCommand(command="help",         description="üÜò –ü–æ–º–æ—â—å"),
            BotCommand(command="pay",          description="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ (—Å–∫–æ—Ä–æ)"),
        ])
    except Exception as e:
        print("[startup] set_my_commands ERROR:", repr(e))

    # 4) —Å—Ç–∞—Ä—Ç—É–µ–º watchdog (–µ—Å–ª–∏ —É–∂–µ –±—ã–ª ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑)
    if not getattr(app.state, "webhook_watchdog", None):
        app.state.webhook_watchdog = asyncio.create_task(_webhook_watchdog())
        print("[startup] webhook watchdog started")


@app.on_event("shutdown")
async def on_shutdown():
    # 1) –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º watchdog
    task = getattr(app.state, "webhook_watchdog", None)
    if task:
        task.cancel()
        with suppress(Exception):
            await task
        app.state.webhook_watchdog = None

    # 2) –≤–µ–±—Ö—É–∫ –º–æ–∂–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å (–¢–µ–ª–µ–≥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å–ª–∞—Ç—å), –Ω–æ —Ç—ã —è–≤–Ω–æ –ø—Ä–æ—Å–∏–ª —á–∏—Å—Ç–∏—Ç—å:
    try:
        await bot.delete_webhook(drop_pending_updates=False)
        print("[shutdown] webhook deleted")
    except Exception as e:
        print("[shutdown] delete_webhook ERROR:", repr(e))


# === —Å–∞–º –≤–µ–±—Ö—É–∫ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π) ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(
    request: Request,
    x_telegram_bot_api_secret_token: str = Header(default="")
):
    # 1) —Å–µ–∫—Ä–µ—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if WEBHOOK_SECRET and x_telegram_bot_api_secret_token != WEBHOOK_SECRET:
        return Response(status_code=403)

    # 2) —á–∏—Ç–∞–µ–º JSON
    data = await request.json()

    # 3) –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å; –ª—é–±—ã–µ —Å–±–æ–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200
    try:
        # aiogram 3 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç pydantic v2; model_validate —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ
        update = Update.model_validate(data)
        msg_txt = None
        cb_data = None
        try:
            msg_txt = data.get("message", {}).get("text")
            cb_data = data.get("callback_query", {}).get("data")
        except Exception:
            pass
        print("[webhook] incoming:", msg_txt, "cb:", cb_data)

        await dp.feed_update(bot=bot, update=update)
    except Exception as e:
        import json, traceback
        msg = str(e)
        if "chat not found" in msg.lower():
            # —Ñ–µ–π–∫–æ–≤—ã–µ/—á—É–∂–∏–µ chat_id ‚Äî –Ω–µ —Ä–æ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä
            print("[webhook] ignore: chat not found; payload:",
                  json.dumps(data, ensure_ascii=False))
        else:
            print("[webhook] ERROR:", msg)
            print("payload:", json.dumps(data, ensure_ascii=False))
            traceback.print_exc()

    # –≤–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ 200, —á—Ç–æ–±—ã –¢–µ–ª–µ–≥–∞ –Ω–µ —Å–ø–∞–º–∏–ª–∞ —Ä–µ—Ç—Ä–∞—è–º–∏
    return PlainTextResponse("ok")

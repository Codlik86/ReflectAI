# app/main.py
import asyncio
import os
from fastapi import FastAPI, Request, Header, Response, HTTPException
from fastapi.responses import PlainTextResponse

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Update, BotCommand
from .memory_schema import ensure_memory_schema

# —Ç–≤–æ–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã
from .bot import router as bot_router

# --- env (—Å—Ç—Ä–æ–≥–æ –µ–¥–∏–Ω—ã–µ –∏–º–µ–Ω–∞) ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL", "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
if not WEBHOOK_BASE_URL:
    raise RuntimeError("WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://<app>.onrender.com)")

WEBHOOK_PATH = "/telegram/webhook"  # –ø—É—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–π
WEBHOOK_URL = f"{WEBHOOK_BASE_URL}{WEBHOOK_PATH}"

# === Watchdog: –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç/—á—É–∂–æ–π ===
WATCHDOG_INTERVAL_SEC = int(os.getenv("WEBHOOK_WATCHDOG_SEC", "60"))

async def _webhook_watchdog():
    while True:
        try:
            info = await bot.get_webhook_info()
            if info.url != WEBHOOK_URL:
                print(f"[watchdog] webhook mismatch ('{info.url}') -> set '{WEBHOOK_URL}'")
                await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET, allowed_updates=[])
        except Exception as e:
            print("[watchdog] error:", e)
        await asyncio.sleep(WATCHDOG_INTERVAL_SEC)

# aiogram 3.x
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp.include_router(bot_router)

app = FastAPI(title="ReflectAI webhook")

@app.get("/")
async def root():
    return PlainTextResponse("ok")

@app.get("/health")
async def health_get():
    return PlainTextResponse("ok")

@app.head("/health")
async def health_head():
    return Response(status_code=200)

@app.on_event("startup")
async def on_startup():
    # 1) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –ø–∞–º—è—Ç–∏ (—Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–¥—É—Ç—Å—è —Å–∞–º–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    ensure_memory_schema()

    # —á–∏—Å—Ç–∏–º –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞–≤–∏–º –∑–∞–Ω–æ–≤–æ
    await bot.delete_webhook(drop_pending_updates=True)
    ok = await bot.set_webhook(
        url=WEBHOOK_URL,
        secret_token=WEBHOOK_SECRET,
        allowed_updates=[],
    )
    print(f"set_webhook: {ok} -> {WEBHOOK_URL}")

    # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å / –º–µ–Ω—é –∫–æ–º–∞–Ω–¥)
    await bot.set_my_commands([
    BotCommand(command="start",        description="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"),
    BotCommand(command="talk",         description="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"),
    BotCommand(command="work",         description="üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"),
    BotCommand(command="meditations",  description="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏"),
    BotCommand(command="settings",     description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    BotCommand(command="privacy",      description="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (–ø–∞–Ω–µ–ª—å)"),
    BotCommand(command="policy",       description="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞"),
    BotCommand(command="about",        description="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"),
    BotCommand(command="help",         description="üÜò –ü–æ–º–æ—â—å"),
    BotCommand(command="pay",          description="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ (—Å–∫–æ—Ä–æ)"),
    ])

    # —Å—Ç–∞—Ä—Ç—É–µ–º watchdog
    app.state.webhook_watchdog = asyncio.create_task(_webhook_watchdog())

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook(drop_pending_updates=False)
    task = getattr(app.state, "webhook_watchdog", None)
    if task:
        task.cancel()

# === —Å–∞–º –≤–µ–±—Ö—É–∫ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π) ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(
    request: Request,
    x_telegram_bot_api_secret_token: str = Header(default="")
):
    # 1) —Å–µ–∫—Ä–µ—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if WEBHOOK_SECRET and x_telegram_bot_api_secret_token != WEBHOOK_SECRET:
        return Response(status_code=403)

    # 2) —á–∏—Ç–∞–µ–º JSON
    data = await request.json()

    # 3) –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å; –ª—é–±—ã–µ —Å–±–æ–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200
    try:
        update = Update.model_validate(data)
        print("[webhook] incoming:", data.get("message", {}).get("text"), "cb:", data.get("callback_query", {}).get("data"))
        await dp.feed_update(bot=bot, update=update)
    except Exception as e:
        import json, traceback
        msg = str(e)
        if "chat not found" in msg.lower():
            # —Ñ–µ–π–∫–æ–≤—ã–µ/—á—É–∂–∏–µ chat_id ‚Äî –Ω–µ —Ä–æ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä
            print("[webhook] ignore: chat not found; payload:", json.dumps(data, ensure_ascii=False))
        else:
            print("[webhook] ERROR:", msg)
            print("payload:", json.dumps(data, ensure_ascii=False))
            traceback.print_exc()

    # –≤–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ 200, —á—Ç–æ–±—ã –¢–µ–ª–µ–≥–∞ –Ω–µ —Å–ø–∞–º–∏–ª–∞ —Ä–µ—Ç—Ä–∞—è–º–∏
    return PlainTextResponse("ok")

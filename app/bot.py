# -*- coding: utf-8 -*-
from __future__ import annotations

# --- Per-topic emojis for /work ---
DEFAULT_TOPIC_ICON = "üåø"  # –æ–±—â–∏–π —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TOPIC_ICONS = {
    "reflection": "ü™û",            # –†–µ—Ñ–ª–µ–∫—Å–∏—è
    "anxiety": "üå¨Ô∏è",               # –¢—Ä–µ–≤–æ–≥–∞
    "anger": "üî•",                  # –ó–ª–æ—Å—Ç—å
    "pain_melancholy": "üåßÔ∏è",       # –ë–æ–ª—å –∏ —Ç–æ—Å–∫–∞
    "sleep": "üåô",                  # –°–æ–Ω
    "breath_body": "üßò",            # –î—ã—Ö–∞–Ω–∏–µ –∏ —Ç–µ–ª–æ
    "procrastination": "‚è≥",        # –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è
    "burnout": "ü™´",                # –í—ã–≥–æ—Ä–∞–Ω–∏–µ
    "decisions": "üß≠",              # –†–µ—à–µ–Ω–∏—è –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å
    "social_anxiety": "üó£Ô∏è",        # –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞
}
def topic_icon(tid: str, t: dict) -> str:
    return TOPIC_ICONS.get(tid, t.get("icon", DEFAULT_TOPIC_ICON))


# ==== –ò–º–ø–æ—Ä—Ç—ã ===============================================================
from textwrap import dedent
from collections import defaultdict, deque
from typing import Dict, Deque, List, Optional

import asyncio

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
    BotCommand,
)
from aiogram.exceptions import TelegramBadRequest

# –í aiogram v3 –±–∏–ª–¥–µ—Ä –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import text as sql_text

# ==== –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ ============================================
# –í–∞–∂–Ω–æ: –æ—Å—Ç–∞–≤–ª—è—é –∏–º–ø–æ—Ä—Ç –∫–∞–∫ –±—ã–ª —É —Ç–µ–±—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
from app.llm_adapter import LLMAdapter
from app.prompts import SYSTEM_PROMPT

# –î–æ–ø. —Ç–æ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–º—è–≥—á–µ, –º–µ–Ω—å—à–µ –±—É–∫–≤–∞–ª—å–Ω–æ–≥–æ –∑–µ—Ä–∫–∞–ª–µ–Ω–∏—è)
REFLECTIVE_SUFFIX = (
    "\n\n[—Ä–µ–∂–∏–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏]\n"
    "‚Äî –æ—Ç–≤–µ—á–∞–π —Ç—ë–ø–ª–æ –∏ –±–µ—Ä–µ–∂–Ω–æ;\n"
    "‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ —É–º–µ—Å—Ç–Ω–æ–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ;\n"
    "‚Äî –¥–æ–±–∞–≤–ª—è–π —á—É—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –±–µ–∑ –º–æ—Ä–∞–ª–µ–π;\n"
    "‚Äî –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∏–µ ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ¬ª —Ä–µ–∞–∫—Ü–∏–∏: –¥–∞, –ø–æ–Ω–∏–º–∞—é‚Ä¶ –∏–Ω–æ–≥–¥–∞ —Ç—Ä–æ–µ—Ç–æ—á–∏—è, —ç–º–æ–¥–∑–∏ –≤ –º–µ—Ä—É.\n"
)

from app.safety import is_crisis, CRISIS_REPLY
from app.exercises import TOPICS
from app.db import db_session, User, Insight  # Insight –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º
from app.tools import (
    REFRAMING_STEPS,
    stop_user_task,
    debounce_ok,
)
try:
    # RAG –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞—é –≤ try
    from app.rag_qdrant import search as rag_search
except Exception:
    rag_search = None  # type: ignore

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/—ç–º–æ–¥–∑–∏ ======================================================
EMO_TALK = "\U0001F4AC"        # üí¨
EMO_PUZZLE = "\U0001F9E9"      # üß©
EMO_HEADPHONES = "\U0001F3A7"  # üéß
EMO_GEAR = "\u2699\ufe0f"      # ‚öôÔ∏è

# ==== Router ================================================================
router = Router()

# ==== –•–µ–ª–ø–µ—Ä—ã UI ============================================================
async def safe_edit(message: Message, *, text: Optional[str] = None, reply_markup=None) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç/markup –∏ –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ç 'message is not modified'.
    """
    try:
        if text is not None and reply_markup is not None:
            await message.edit_text(text, reply_markup=reply_markup)
            return
        if text is not None:
            await message.edit_text(text)
        if reply_markup is not None:
            await message.edit_reply_markup(reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        raise

async def silent_ack(cb: CallbackQuery) -> None:
    """–ë—ã—Å—Ç—Ä—ã–π ack –¥–ª—è —Å–Ω—è—Ç–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ 'query is too old'."""
    try:
        await cb.answer()
    except Exception:
        pass

# ==== –ì–ª–∞–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ =======================================
def get_home_text() -> str:
    return (
        "–ß—Ç–æ –¥–∞–ª—å—à–µ? –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
        "1) –•–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª. –ë–µ–∑ —Ä–∞–º–æ–∫ –∏ –ø—Ä–∞–∫—Ç–∏–∫: –ø–æ–¥–µ–ª–∏—Å—å —Ç–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —è –ø–æ–¥–¥–µ—Ä–∂—É –∏ –ø–æ–º–æ–≥—É —Ä–∞–∑–ª–æ–∂–∏—Ç—å.\n"
        "2) –ù—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è ‚Äî –æ—Ç–∫—Ä–æ–π ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª. –¢–∞–º –∫–æ—Ä–æ—Ç–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ 5‚Äì10 –º–∏–Ω—É—Ç: –æ—Ç –¥—ã—Ö–∞–Ω–∏—è –∏ –∞–Ω—Ç–∏-–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏–∏ –¥–æ –ø–ª–∞–Ω–∞ –ø—Ä–∏ –ø–∞–Ω–∏–∫–µ –∏ S-T-O-P.\n"
        "3) –•–æ—á–µ—à—å —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ–≤—É ‚Äî –≤ ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏—è—Ö¬ª –±—É–¥—É—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–µ–≤–æ–≥–∏, —Å–Ω–∞ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ ‚Äî –¥–æ–±–∞–≤–∏–º —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ.\n\n"
        "–ü–∏—à–∏, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ. –Ø —Ä—è–¥–æ–º ‚ù§Ô∏è"
    )

# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ============================================================
def kb_main() -> ReplyKeyboardMarkup:
    """
    –ù–∏–∂–Ω—è—è (persistent) –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"{EMO_TALK} –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")],
            [KeyboardButton(text=f"{EMO_PUZZLE} –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"), KeyboardButton(text=f"{EMO_HEADPHONES} –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")],
            [KeyboardButton(text=f"{EMO_GEAR} –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True, one_time_keyboard=False, selective=False
    )

# --- –°–ø–∏—Å–æ–∫ —Ç–µ–º (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ title) ---
def kb_topics() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    seen = set()
    for key, t in TOPICS.items():
        title = t.get("title", "–¢–µ–º–∞")
        if not title or title in seen:
            continue
        seen.add(title)
        b.button(text=f"üåø {title}", callback_data=f"work:topic:{key}")
    b.adjust(1)
    return b.as_markup()

def kb_exercises(topic_id: str) -> InlineKeyboardMarkup:
    """
    –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ.
    """
    t = TOPICS.get(topic_id, {})
    rows = []
    for ex in t.get("exercises", []):
        title = ex.get("title", ex.get("id", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"))
        rows.append([InlineKeyboardButton(text=title, callback_data=f"work:ex:{topic_id}:{ex.get('id')}")])
    # –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´–Ω–∞–∑–∞–¥¬ª
    rows.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ö —Ç–µ–º–∞–º", callback_data="work:back_topics")
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def back_markup_for_topic(topic_id: str) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Ç–µ–º–µ.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data=f"work:topic:{topic_id}")],
        [InlineKeyboardButton(text="üåø –î—Ä—É–≥–∏–µ —Ç–µ–º—ã", callback_data="work:back_topics")],
    ])

def kb_stepper2(topic_id: str, ex_id: str, cur: int, total: int) -> InlineKeyboardMarkup:
    """
    –®–∞–≥–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–≤–ø–µ—Ä—ë–¥ / —Å—Ç–æ–ø / –Ω–∞–∑–∞–¥ –≤ —Ç–µ–º—É).
    """
    is_last = (cur >= total - 1)
    next_text = "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å" if is_last else "‚ñ∂Ô∏è –î–∞–ª–µ–µ"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=next_text, callback_data=f"work:step:{topic_id}:{ex_id}")],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data=f"work:topic:{topic_id}"),
            InlineKeyboardButton(text="‚èπ –°—Ç–æ–ø", callback_data="work:stop"),
        ],
    ])

# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–Ω–¥–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏ =======================================
def render_step_text(topic_title: str, ex_title: str, step_text: str) -> str:
    header = "üåø " + topic_title + " ‚Üí " + ex_title
    return header + "\n\n" + str(step_text)

def render_text_exercise(topic_title: str, ex_title: str, text: str) -> str:
    header = "üåø " + topic_title + " ‚Üí " + ex_title
    return header + "\n\n" + str(text)

# ==== –≠—Ñ–µ–º–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) =====================
_WS: Dict[str, Dict] = {}

def _ws_get(uid: str) -> Dict:
    return _WS.get(uid, {})

def _ws_set(uid: str, **fields) -> None:
    prev = _WS.get(uid, {})
    prev.update(fields)
    _WS[uid] = prev

def _ws_reset(uid: str) -> None:
    _WS.pop(uid, None)

# ==== –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ (RAM) ========================================
DIALOG_HISTORY: Dict[int, Deque[Dict[str, str]]] = defaultdict(lambda: deque(maxlen=8))
# –†–µ–∂–∏–º —á–∞—Ç–∞ (–æ–±—ã—á–Ω—ã–π / reflection)
CHAT_MODE: Dict[int, str] = {}

def _push(chat_id: int, role: str, content: str) -> None:
    if content:
        DIALOG_HISTORY[chat_id].append({"role": role, "content": content})

# ==== ¬´–°—É–ø–µ—Ä–ø–∞–º—è—Ç—å¬ª (SQLite) ===============================================
def _ensure_tables():
    with db_session() as s:
        s.execute(sql_text("""
        CREATE TABLE IF NOT EXISTS user_prefs (
          tg_id TEXT PRIMARY KEY,
          consent_save_all INTEGER DEFAULT 0,
          goals TEXT DEFAULT '',
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        """))
        s.execute(sql_text("""
        CREATE TABLE IF NOT EXISTS dialog_turns (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          tg_id TEXT NOT NULL,
          role TEXT NOT NULL,
          text TEXT NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        """))
        s.commit()

def _can_save_full(tg_id: str) -> bool:
    _ensure_tables()
    with db_session() as s:
        row = s.execute(
            sql_text("SELECT consent_save_all FROM user_prefs WHERE tg_id=:tg"),
            {"tg": tg_id}
        ).fetchone()
        return bool(row and row[0])

def _save_turn(tg_id: str, role: str, text: str) -> None:
    if not _can_save_full(tg_id):
        return
    _ensure_tables()
    with db_session() as s:
        s.execute(
            sql_text("INSERT INTO dialog_turns (tg_id, role, text) VALUES (:tg, :r, :t)"),
            {"tg": tg_id, "r": role, "t": (text or "")[:4000]},
        )
        s.commit()

def _load_recent_turns(tg_id: str, days: int = 7, limit: int = 24) -> List[Dict[str, str]]:
    _ensure_tables()
    with db_session() as s:
        q = f"""
          SELECT role, text FROM dialog_turns
          WHERE tg_id = :tg AND created_at >= datetime('now','-{int(days)} days')
          ORDER BY id DESC LIMIT {int(limit)}
        """
        rows = s.execute(sql_text(q), {"tg": tg_id}).fetchall() or []
    return [{"role": r, "content": t} for (r, t) in reversed(rows)]

def _set_consent(tg_id: str, yes: bool) -> None:
    _ensure_tables()
    with db_session() as s:
        s.execute(sql_text("""
            INSERT INTO user_prefs (tg_id, consent_save_all)
            VALUES (:tg, :c)
            ON CONFLICT(tg_id) DO UPDATE SET consent_save_all=:c, updated_at=CURRENT_TIMESTAMP
        """), {"tg": tg_id, "c": 1 if yes else 0})
        s.commit()

def _append_goal(tg_id: str, goal_code: str) -> None:
    _ensure_tables()
    with db_session() as s:
        row = s.execute(sql_text("SELECT goals FROM user_prefs WHERE tg_id=:tg"), {"tg": tg_id}).fetchone()
        goals = set(((row[0] or "") if row else "").split(","))
        if goal_code not in goals:
            goals.add(goal_code)
        s.execute(sql_text("""
            INSERT INTO user_prefs (tg_id, goals)
            VALUES (:tg, :g)
            ON CONFLICT(tg_id) DO UPDATE SET goals=:g, updated_at=CURRENT_TIMESTAMP
        """), {"tg": tg_id, "g": ",".join([g for g in goals if g])})
        s.commit()

# ==== –û–Ω–±–æ—Ä–¥–∏–Ω–≥ =============================================================
ONB_IMAGES = {
    "cover": "https://file.garden/aML3M6Sqrg21TaIT/kind-creature%20(3).png",
}

def onb_start_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëã –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!", callback_data="onb_hi")]
    ])

def onb_goals_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßò –°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É", callback_data="goal:anxiety")],
        [InlineKeyboardButton(text="üò¥ –£–ª—É—á—à–∏—Ç—å —Å–æ–Ω", callback_data="goal:sleep")],
        [InlineKeyboardButton(text="üåü –ü–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É", callback_data="goal:self")],
        [InlineKeyboardButton(text="üéØ –ù–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é", callback_data="goal:motivation")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="goal_done")],
    ])

@router.message(F.text == f"{EMO_TALK} –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
async def on_btn_talk(m: Message):
    await m.answer("–Ø —Ä—è–¥–æ–º. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –¥—É—à–µ ‚Äî –Ω–∞—á–Ω—ë–º —Å —ç—Ç–æ–≥–æ.", reply_markup=None)

@router.message(F.text == f"{EMO_PUZZLE} –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
async def on_btn_work(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=kb_topics())

@router.message(F.text == f"{EMO_HEADPHONES} –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
async def on_btn_meditations(m: Message):
    await m.answer("–†–∞–∑–¥–µ–ª —Å –∞—É–¥–∏–æ-–º–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º. –ê –ø–æ–∫–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª.", reply_markup=None)

@router.message(F.text == f"{EMO_GEAR} –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def on_btn_settings(m: Message):
    await m.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –ø–æ–∑–∂–µ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≤—ã–±–æ—Ä —Ç–æ–Ω–∞, –º–µ—Ç–æ–¥—ã –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å. –ü–æ–∫–∞ ‚Äî –∑–∞–≥–ª—É—à–∫–∞.", reply_markup=None)

# ==== Slash-–∫–æ–º–∞–Ω–¥—ã (–ª–µ–≤–æ–µ –º–µ–Ω—é) ===========================================
async def set_bot_commands(bot) -> None:
    try:
        await bot.set_my_commands([
            BotCommand(command="talk", description="–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"),
            BotCommand(command="work", description="–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)"),
            BotCommand(command="meditations", description="–ú–µ–¥–∏—Ç–∞—Ü–∏–∏ (–∞—É–¥–∏–æ, —Å–∫–æ—Ä–æ)"),
            BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand(command="about", description="–û –ø—Ä–æ–µ–∫—Ç–µ"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
            BotCommand(command="pay", description="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"),
            BotCommand(command="policy", description="–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å"),
        ])
    except Exception:
        pass

@router.message(F.text.regexp(r'^/(talk|settings|meditations|about|help|pay|policy|work)(?:@\w+)?(?:\s|$)'))
async def _route_slash_commands(m: Message):
    cmd = (m.text or "").split()[0].split("@")[0].lower()
    if cmd == "/talk":
        return await on_btn_talk(m)
    if cmd == "/work":
        return await on_btn_work(m)
    if cmd == "/meditations":
        return await on_btn_meditations(m)
    if cmd == "/settings":
        return await on_btn_settings(m)
    if cmd == "/about":
        return await m.answer("Pomni ‚Äî —Ç—ë–ø–ª—ã–π AI-–¥—Ä—É–≥/–¥–Ω–µ–≤–Ω–∏–∫: —Å–ª—É—à–∞–µ—Ç, –ø–æ–º–æ–≥–∞–µ—Ç –æ—Å–º—ã—Å–ª–∏—Ç—å –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –º–∏–∫—Ä–æ—à–∞–≥–∏.")
    if cmd == "/help":
        return await m.answer("–ü–æ–º–æ—â—å: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. –Ø –ø–æ–¥–¥–µ—Ä–∂—É, –ø–æ–¥—Å–∫–∞–∂—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—é –≤–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏.")
    if cmd == "/pay":
        return await m.answer("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —Å–ø–æ—Å–æ–±—ã. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å! ‚ù§Ô∏è")
    if cmd == "/policy":
        return await m.answer("–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞: https://tinyurl.com/5n98a7j8 ‚Ä¢ https://tinyurl.com/5n98a7j8")
    # fallback
    await m.answer("–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞.")

@router.message(F.text.regexp(r'^/start(?:@\w+)?(?:\s|$)'))
async def start(m: Message):
    await set_bot_commands(m.bot)

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(m.from_user.id)).first()
        if not u:
            s.add(User(tg_id=str(m.from_user.id), privacy_level="insights"))
            s.commit()

    # –æ—á–∏—â–∞–µ–º RAM-–¥–∏–∞–ª–æ–≥
    DIALOG_HISTORY.pop(m.chat.id, None)

    caption = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –≤—ã—Å–ª—É—à–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω–æ–µ ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è.\n\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –≤–∫–ª—é—á–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫—É:\n"
        "https://tinyurl.com/5n98a7j8 ‚Ä¢ https://tinyurl.com/5n98a7j8\n\n"
        "–°–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π ‚Äî –∏ —è –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂—É üëá"
    )
    try:
        await m.answer_photo(ONB_IMAGES["cover"], caption=caption, reply_markup=onb_start_kb())
    except Exception:
        await m.answer(caption, reply_markup=onb_start_kb())

@router.callback_query(F.data == "onb_hi")
async def onb_hi(cb: CallbackQuery):
    await silent_ack(cb)
    _set_consent(str(cb.from_user.id), True)
    txt = (
        "–ö–ª–∞—Å—Å! –¢–æ–≥–¥–∞ –ø–∞—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ üõ†Ô∏è\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª:"
    )
    await cb.message.answer(txt, reply_markup=onb_goals_kb())

@router.callback_query(F.data.startswith("goal:"))
async def onb_goal_pick(cb: CallbackQuery):
    await silent_ack(cb)
    code = cb.data.split(":", 1)[1]
    _append_goal(str(cb.from_user.id), code)
    names = {
        "anxiety": "–°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É",
        "sleep": "–£–ª—É—á—à–∏—Ç—å —Å–æ–Ω",
        "self": "–ü–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É",
        "motivation": "–ù–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é",
    }
    try:
        await cb.answer(f"–î–æ–±–∞–≤–∏–ª: {names.get(code, code)}", show_alert=False)
    except Exception:
        pass

@router.callback_query(F.data.in_(("goal_done", "onboard:done", "onb:done", "start:done")))
async def cb_done_gate(cb: CallbackQuery):
    # —Ä–∞–Ω–Ω–∏–π ack
    await silent_ack(cb)
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –Ω–∏–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await cb.message.answer(get_home_text(), reply_markup=kb_main())
    except Exception:
        await cb.message.answer(get_home_text())

# ==== –†–∞–±–æ—Ç–∞ —Å —Ç–µ–º–∞–º–∏/—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ =========================================
@router.message(F.text == f"{EMO_PUZZLE} –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
async def _open_work_from_keyboard(m: Message):
    await on_btn_work(m)

@router.callback_query(F.data == "work:back_topics")
async def cb_back_topics(cb: CallbackQuery):
    await silent_ack(cb)
    await safe_edit(cb.message, text="–í—ã–±–µ—Ä–∏ —Ç–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=kb_topics())

@router.callback_query(F.data.startswith("work:topic:"))
async def cb_pick_topic(cb: CallbackQuery):
    # –≤–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å "query is too old"
    try:
        await cb.answer()
    except Exception:
        pass

    topic_id = cb.data.split(":")[2]
    t = TOPICS.get(topic_id, {})
    title = t.get("title", "–¢–µ–º–∞")
    intro = t.get("intro")

    # –¢–µ–º—ã-¬´—Ä–µ—Ñ–ª–µ–∫—Å–∏—è¬ª: –±–µ–∑ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ‚Äî —Å—Ä–∞–∑—É —Ç—ë–ø–ª–æ–µ –∏–Ω—Ç—Ä–æ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç
    if t.get("type") == "chat":
        intro_long = t.get("intro_long") or intro or (
            "–î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–∞–∑–º—ã—à–ª—è–µ–º –æ–± —ç—Ç–æ–º. –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å—Ç—Ä–æ–∫ ‚Äî —á—Ç–æ –≤–æ–ª–Ω—É–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å‚Ä¶ –Ø —Ä—è–¥–æ–º."
        )
        text = f"–¢–µ–º–∞: {title}\n\n{intro_long}"
        await safe_edit(cb.message, text=text, reply_markup=None)
        return

    # –û–±—ã—á–Ω–∞—è —Ç–µ–º–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç—Ä–æ –∏ —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    if intro:
        text = f"–¢–µ–º–∞: {title}\n\n{intro}"
    else:
        text = f"–û–∫, –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–º–µ ¬´{title}¬ª. –í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∏–∂–µ."
    await safe_edit(cb.message, text=text, reply_markup=kb_exercises(topic_id))
@router.callback_query(F.data.startswith("work:ex:"))
async def cb_pick_exercise(cb: CallbackQuery):
    # –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    try:
        await cb.answer()
    except Exception:
        pass

    parts = cb.data.split(":")
    topic_id, ex_id = parts[2], parts[3]
    t = TOPICS.get(topic_id, {})
    ex = next((e for e in t.get("exercises", []) if e.get("id") == ex_id), None)
    if ex is None:
        await cb.message.answer("–ù–µ –Ω–∞—à—ë–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        return

    topic_title = t.get("title", "–¢–µ–º–∞")
    ex_title = ex.get("title", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")

    # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ-¬´—Ä–µ—Ñ–ª–µ–∫—Å–∏—è¬ª: –±–µ–∑ —Å—Ç–µ–ø–ø–µ—Ä–∞ ‚Äî —Å—Ä–∞–∑—É —Ç—ë–ø–ª–æ–µ –∏–Ω—Ç—Ä–æ, –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∏ –æ–±—â–∞–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ
    if ex.get("type") == "chat":
        intro_long = ex.get("intro_long") or ex.get("intro") or (
            "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å. –ù–∞–ø–∏—à–∏, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –∏ —á—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ‚Ä¶ –Ø –∑–¥–µ—Å—å –∏ –ø–æ–¥–¥–µ—Ä–∂—É."
        )
        text = f"üåø {topic_title} ‚Üí {ex_title}\n\n{intro_long}"
        await safe_edit(cb.message, text=text, reply_markup=None)
        return

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –±–µ–∑ —à–∞–≥–æ–≤
    text_only = ex.get("text") or ex.get("body") or ex.get("content")
    if text_only and not ex.get("steps"):
        text = render_text_exercise(topic_title, ex_title, str(text_only))
        await safe_edit(cb.message, text=text, reply_markup=back_markup_for_topic(topic_id))
        return

    # –û–±—ã—á–Ω—ã–π —Å—Ç–µ–ø–ø–µ—Ä
    steps = ex.get("steps", [])
    intro = ex.get("intro")
    steps_all = ([intro] + steps) if intro else steps
    if not steps_all:
        await cb.message.answer("–ü—É—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        return

    uid = str(cb.from_user.id)
    _ws_set(uid, topic=topic_id, ex=ex_id, step=0)
    text = render_step_text(topic_title, ex_title, steps_all[0])
    await safe_edit(cb.message, text=text, reply_markup=kb_stepper2(topic_id, ex_id, 0, len(steps_all)))
@router.callback_query(F.data.startswith("work:step:"))
async def cb_step_next(cb: CallbackQuery):
    await silent_ack(cb)
    parts = cb.data.split(":")
    # —Ñ–æ—Ä–º–∞—Ç: work:step:{topic}:{ex}
    if len(parts) < 4:
        return
    topic_id, ex_id = parts[2], parts[3]

    uid = str(cb.from_user.id)
    st = _ws_get(uid)
    if not st or st.get("ex") != ex_id or st.get("topic") != topic_id:
        # –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞
        try:
            await cb.answer("–°—Ü–µ–Ω–∞—Ä–∏–π —Å–±—Ä–æ—à–µ–Ω, –æ—Ç–∫—Ä–æ—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ‚Ä¶")
        except Exception:
            pass
        return await cb_pick_exercise(cb)

    t = TOPICS.get(topic_id, {})
    ex_list = t.get("exercises", [])
    ex = next((e for e in ex_list if e.get("id") == ex_id), None)
    if not ex:
        return

    steps: List[str] = list(ex.get("steps", []))
    intro = ex.get("intro")
    steps_all = ([str(intro)] + [str(s) for s in steps]) if intro else [str(s) for s in steps]

    cur = int(st.get("step", 0)) + 1
    if cur >= len(steps_all):
        # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        _ws_reset(uid)
        done_text = "‚úÖ –ì–æ—Ç–æ–≤–æ. –•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–º—É?"
        await safe_edit(cb.message, text=done_text, reply_markup=kb_exercises(topic_id))
        return

    _ws_set(uid, step=cur)
    topic_title = t.get("title", "–¢–µ–º–∞")
    ex_title = (ex.get("title") or "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
    text = render_step_text(topic_title, ex_title, steps_all[cur])
    await safe_edit(cb.message, text=text, reply_markup=kb_stepper2(topic_id, ex_id, cur, len(steps_all)))

@router.callback_query(F.data == "work:stop")
async def cb_stop(cb: CallbackQuery):
    await silent_ack(cb)
    try:
        _ws_reset(str(cb.from_user.id))
    except Exception:
        pass
    await safe_edit(
        cb.message,
        text="–û—Å—Ç–∞–Ω–æ–≤–∏–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
        reply_markup=kb_topics(),
    )

# ==== –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ä–µ—Ñ–ª–µ–∫—Å–∏—è/–º–∏–∫—Ä–æ—à–∞–≥) =====================================
_reframe_state: Dict[str, Dict] = {}  # user_id -> {"step_idx": int, "answers": dict}

def tools_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí° –†–µ—Ñ–ª–µ–∫—Å–∏—è", callback_data="tool_reframe"),
            InlineKeyboardButton(text="üåø –ú–∏–∫—Ä–æ—à–∞–≥",  callback_data="tool_micro"),
        ],
    ])

def stop_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπ –°—Ç–æ–ø", callback_data="tool_stop")]
    ])

def save_insight_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å–∞–π—Ç", callback_data="save_insight")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É", callback_data="open_tools")],
    ])

@router.callback_query(F.data == "open_tools")
async def on_open_tools(cb: CallbackQuery):
    await silent_ack(cb)
    await cb.message.answer("–ß–µ–º –∑–∞–π–º—ë–º—Å—è?", reply_markup=tools_keyboard())

@router.callback_query(F.data == "tool_reframe")
async def on_tool_reframe(cb: CallbackQuery):
    await silent_ack(cb)
    user_id = str(cb.from_user.id)
    if not debounce_ok(user_id):
        return
    stop_user_task(user_id)
    _reframe_state[user_id] = {"step_idx": 0, "answers": {}}

    last_user = next((m["content"] for m in reversed(DIALOG_HISTORY[cb.message.chat.id]) if m["role"] == "user"), "")
    if last_user:
        preview = last_user[:160] + ("‚Ä¶" if len(last_user) > 160 else "")
        await cb.message.answer(f"–û—Å—Ç–∞–Ω–µ–º—Å—è –≤ —Ç–µ–º–µ: ¬´{preview}¬ª.", reply_markup=stop_keyboard())

    _, prompt = REFRAMING_STEPS[0]
    await cb.message.answer("–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (4 —à–∞–≥–∞, ~2 –º–∏–Ω—É—Ç—ã).", reply_markup=stop_keyboard())
    await cb.message.answer(prompt, reply_markup=stop_keyboard())

@router.callback_query(F.data == "tool_micro")
async def on_tool_micro(cb: CallbackQuery):
    await silent_ack(cb)
    chat_id = cb.message.chat.id
    tg_id = str(cb.from_user.id)

    global adapter
    if 'adapter' not in globals() or adapter is None:
        adapter = LLMAdapter()  # type: ignore

    last_user = next((m["content"] for m in reversed(DIALOG_HISTORY[chat_id]) if m["role"] == "user"), "")
    sys_prompt = SYSTEM_PROMPT
    if CHAT_MODE.get(chat_id) == "reflection":
        sys_prompt = SYSTEM_PROMPT + REFLECTIVE_SUFFIX
    messages = [{"role": "system", "content": sys_prompt}]
    if last_user:
        messages.append({"role": "user", "content": last_user})
    messages.append({"role": "user", "content": "–ü–æ–¥—Å–∫–∞–∂–∏ 1‚Äì2 –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 10‚Äì30 –º–∏–Ω—É—Ç –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."})

    try:
        answer = await adapter.complete_chat(user=tg_id, messages=messages, temperature=0.4)
    except Exception as e:
        answer = f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏: {e}"

    _push(chat_id, "assistant", answer)
    _save_turn(tg_id, "assistant", answer)

    await cb.message.answer(answer, reply_markup=None)

@router.callback_query(F.data == "tool_stop")
async def on_tool_stop(cb: CallbackQuery):
    await silent_ack(cb)
    user_id = str(cb.from_user.id)
    stop_user_task(user_id)
    _reframe_state.pop(user_id, None)
    await cb.message.answer("–û—Å—Ç–∞–Ω–æ–≤–∏–ª. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ?", reply_markup=None)

# ==== –¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª) ======================================
adapter: Optional[LLMAdapter] = None

@router.message(F.text)
async def on_text(m: Message):
    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã ‚Äî –∏—Ö –ª–æ–≤–∏—Ç –¥—Ä—É–≥–æ–π —Ö—ç–Ω–¥–ª–µ—Ä
    if (m.text or "").startswith("/"):
        return

    global adapter
    if adapter is None:
        adapter = LLMAdapter()

    chat_id = m.chat.id
    tg_id = str(m.from_user.id)
    user_text = (m.text or "").strip()

    # –µ—Å–ª–∏ –∏–¥—ë—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π ¬´–†–µ—Ñ–ª–µ–∫—Å–∏—è¬ª ‚Äî –≤–µ–¥—ë–º –ø–æ —à–∞–≥–∞–º
    if tg_id in _reframe_state:
        st = _reframe_state[tg_id]
        step_idx = st["step_idx"]
        key, _prompt = REFRAMING_STEPS[step_idx]
        st["answers"][key] = user_text

        if step_idx + 1 < len(REFRAMING_STEPS):
            st["step_idx"] += 1
            _, next_prompt = REFRAMING_STEPS[st["step_idx"]]
            await m.answer(next_prompt, reply_markup=stop_keyboard())
            return
        else:
            a = st["answers"]
            summary = (
                "üåø –ò—Ç–æ–≥ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏\n\n"
                f"‚Ä¢ –ú—ã—Å–ª—å: {a.get('thought','‚Äî')}\n"
                f"‚Ä¢ –≠–º–æ—Ü–∏—è (1‚Äì10): {a.get('emotion','‚Äî')}\n"
                f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {a.get('behavior','‚Äî')}\n"
                f"‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å: {a.get('alternative','‚Äî')}\n\n"
                "–ö–∞–∫ —ç—Ç–æ –º–µ–Ω—è–µ—Ç —Ç–≤–æ–π –≤–∑–≥–ª—è–¥? –ß—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            )
            _reframe_state.pop(tg_id, None)
            await m.answer(summary, reply_markup=save_insight_keyboard())
            return

    # safety
    if is_crisis(user_text):
        await m.answer(CRISIS_REPLY)
        return

    # –º—è–≥–∫–∏–π RAG (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if rag_search is not None:
        try:
            rag_ctx = await rag_search(user_text, k=3, max_chars=1200)
        except Exception:
            rag_ctx = ""
    else:
        rag_ctx = ""

    # –¥–ª–∏–Ω–Ω–∞—è –ø–∞–º—è—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏)
    long_tail = _load_recent_turns(tg_id, days=7, limit=24)

    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    if rag_ctx:
        messages.append({"role": "system", "content": "–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n" + rag_ctx})
    messages.extend(long_tail[-10:])          # –∏–∑ –ë–î
    messages.extend(DIALOG_HISTORY[chat_id])  # –∏–∑ RAM
    messages.append({"role": "user", "content": user_text})

    try:
        # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º user
        answer = await adapter.complete_chat(user=tg_id, messages=messages, temperature=0.6)
    except Exception as e:
        answer = f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏: {e}"

    _push(chat_id, "user", user_text)
    _push(chat_id, "assistant", answer)
    _save_turn(tg_id, "user", user_text)
    _save_turn(tg_id, "assistant", answer)

    await m.answer(answer, reply_markup=None)


@router.callback_query(F.data == "reflect:stop")
async def reflect_stop(cb: CallbackQuery):
    CHAT_MODE.pop(cb.message.chat.id, None)
    await cb.message.answer("–û—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–µ—Ñ–ª–µ–∫—Å–∏—é. –ú–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.")
    try:
        await cb.answer()
    except Exception:
        pass

# app/bot.py
from __future__ import annotations

import os
import hashlib
from typing import Dict, List, Optional, Tuple

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from app.meditations import get_categories, get_items, get_item

# ===== –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ =====
from .exercises import TOPICS, EXERCISES  # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ —Ç–≤–æ—ë–º exercises.py
from .prompts import SYSTEM_PROMPT as BASE_PROMPT
from .prompts import TALK_SYSTEM_PROMPT as TALK_PROMPT  # –±–∞–∑–æ–≤—ã–π –¥–ª—è /talk
try:
    from .prompts import REFLECTIVE_SUFFIX  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ; –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
except Exception:
    REFLECTIVE_SUFFIX = "\n\n(–†–µ–∂–∏–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: –º—è–≥–∫–æ –∑–∞–º–µ–¥–ª—è–π —Ç–µ–º–ø, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—é—â–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–∏—é.)"

# LLM-–æ–±—ë—Ä—Ç–∫–∞ (–ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
try:
    from .llm_adapter import chat_with_style  # –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å system/messages/style/rag_ctx
except Exception:
    chat_with_style = None  # –Ω–∞ –≤—Å—è–∫–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–ª–∞–¥–∫–∏

# RAG (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø–æ–¥–º–µ—à–∞–µ–º)
try:
    from .rag_qdrant import retrieve_relevant_context
except Exception:
    retrieve_relevant_context = None

# === –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å/–ø–∞–º—è—Ç—å (—Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ memory.py) ===
try:
    from .memory import get_privacy as db_get_privacy, set_privacy as db_set_privacy, purge_user_data
except Exception:
    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏
    def db_get_privacy(tg_id: str) -> str: return "ask"
    def db_set_privacy(tg_id: str, value: str) -> None: ...
    purge_user_data = None  # type: ignore

router = Router()

# ===== –û–Ω–±–æ—Ä–¥–∏–Ω–≥: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ =====
POLICY_URL = os.getenv("POLICY_URL", "https://s.craft.me/APV7T8gRf3w2Ay")
TERMS_URL = os.getenv("TERMS_URL", "https://s.craft.me/APV7T8gRf3w2Ay")

DEFAULT_ONB_IMAGES = {
    "cover": os.getenv("ONB_IMG_COVER", "https://file.garden/aML3M6Sqrg21TaIT/kind-creature-min.jpg"),
    "talk": os.getenv("ONB_IMG_TALK", "https://file.garden/aML3M6Sqrg21TaIT/warm-conversation-min.jpg"),
    "work": os.getenv("ONB_IMG_WORK", "https://file.garden/aML3M6Sqrg21TaIT/_practices-min.jpg"),
    "meditations": os.getenv("ONB_IMG_MEDIT", "https://file.garden/aML3M6Sqrg21TaIT/meditation%20(1)-min.jpg"),
}

def get_onb_image(key: str) -> str:
    return DEFAULT_ONB_IMAGES.get(key, "") or ""

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ (–ø–∞–º—è—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞) =====
CHAT_MODE: Dict[int, str] = {}        # chat_id -> "talk" | "work" | "reflection"
USER_TONE: Dict[int, str] = {}        # chat_id -> "default" | "friend" | "therapist" | "18plus"
PRIVACY_FLAGS: Dict[int, Dict[str, bool]] = {}  # chat_id -> {"save_history": True}

# ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã =====
async def _safe_edit(msg: Message, text: Optional[str] = None, reply_markup: Optional[InlineKeyboardMarkup] = None):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å,
    –∏–Ω–∞—á–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    try:
        if text is not None and reply_markup is not None:
            await msg.edit_text(text, reply_markup=reply_markup)
        elif text is not None:
            await msg.edit_text(text)
        elif reply_markup is not None:
            await msg.edit_reply_markup(reply_markup=reply_markup)
        else:
            return
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if text is not None:
            await msg.answer(text, reply_markup=reply_markup)
        elif reply_markup is not None:
            await msg.answer(".", reply_markup=reply_markup)

def _emoji_by_topic(tid: str, title: str) -> str:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º —ç–º–æ–¥–∑–∏ —Ç–µ–º–µ: –±–µ—Ä—ë–º –∏–∑ EXERCISES[tid]['emoji'], –∏–Ω–∞—á–µ
    —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ñ–æ–ª–±—ç–∫ –ø–æ —Ö–µ—à—É –∏–∑ –ø—É–ª–∞.
    """
    t = EXERCISES.get(tid, {})
    e = str(t.get("emoji") or "").strip()
    if e:
        return e
    pool = ["üå±", "üåø", "üå∏", "üåô", "‚òÄÔ∏è", "üî•", "üß≠", "üß†", "üõ†Ô∏è", "üí°", "üß©", "üéØ", "üåä", "ü´∂", "‚ú®"]
    idx = int(hashlib.md5((tid or title).encode("utf-8")).hexdigest(), 16) % len(pool)
    return pool[idx]

def _topic_title_with_emoji(tid: str) -> str:
    d = EXERCISES.get(tid, {})
    title = d.get("title", tid)
    return f"{_emoji_by_topic(tid, title)} {title}"

def kb_main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")],
            [KeyboardButton(text="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
    )

def kb_settings() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéö –¢–æ–Ω –æ–±—â–µ–Ω–∏—è", callback_data="settings:tone")],
            [InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="settings:privacy")],
        ]
    )

def kb_tone_picker() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", callback_data="tone:default")],
            [InlineKeyboardButton(text="ü§ù –î—Ä—É–≥/–ø–æ–¥—Ä—É–≥–∞",                   callback_data="tone:friend")],
            [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–Ω—ã–π",                  callback_data="tone:therapist")],
            [InlineKeyboardButton(text="üå∂Ô∏è 18+",                           callback_data="tone:18plus")],
        ]
    )

def kb_privacy_for(chat_id: int) -> InlineKeyboardMarkup:
    """
    –†–µ–∂–∏–º—ã –∏–∑ –ë–î: ask | none | all.
    –¢—Ä–∞–∫—Ç—É–µ–º:
      - all  -> —Ö—Ä–∞–Ω–µ–Ω–∏–µ –í–ö–õ
      - none -> —Ö—Ä–∞–Ω–µ–Ω–∏–µ –í–´–ö–õ
      - ask  -> —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –í–ö–õ –¥–æ —è–≤–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
    """
    try:
        mode = (db_get_privacy(str(chat_id)) or "ask").lower()
    except Exception:
        mode = "ask"

    save_on = (mode != "none")
    toggle_text = "üîî –í–∫–ª. —Ö—Ä–∞–Ω–µ–Ω–∏–µ" if not save_on else "üîï –í—ã–∫–ª. —Ö—Ä–∞–Ω–µ–Ω–∏–µ"

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=toggle_text,          callback_data="privacy:toggle")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="privacy:clear")],
        ]
    )

def kb_privacy() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="privacy:clear")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:settings")],
        ]
    )

EMO_DEFAULTS = {
    "sleep": "üò¥", "body": "üí°", "procrastination": "üåø",
    "burnout": "‚òÄÔ∏è", "decisions": "üéØ", "social_anxiety": "ü´•",
    "reflection": "‚ú®",
}

def topic_button_title(tid: str) -> str:
    t = TOPICS.get(tid, {})
    title = (t.get("title") or tid).strip()
    emoji = (t.get("emoji") or EMO_DEFAULTS.get(tid, "üå±")).strip()
    return f"{emoji} {title}"

def kb_topics() -> InlineKeyboardMarkup:
    order = TOPICS.get("__order__") or [k for k in TOPICS.keys() if not k.startswith("__")]
    rows = []
    for tid in order:
        if tid.startswith("__"):
            continue
        rows.append([InlineKeyboardButton(text=topic_button_title(tid), callback_data=f"t:{tid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_exercises(tid: str) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []

    for eid, ex in EXERCISES.get(tid, {}).items():
        title = ex.get("title", eid)
        buttons.append([
            InlineKeyboardButton(
                text=title,
                callback_data=f"ex:{tid}:{eid}:start"
            )
        ])

    # –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="work:topics")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "work:topics")
async def on_back_to_topics(cb: CallbackQuery):
    await _safe_edit(cb.message, "–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
    await cb.answer()

def step_keyboard(tid: str, eid: str, idx: int, total: int) -> InlineKeyboardMarkup:
    prev_idx = max(0, idx - 1)
    next_idx = min(total - 1, idx + 1)
    buttons: List[List[InlineKeyboardButton]] = []
    nav: List[InlineKeyboardButton] = []

    # –ù–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ ¬´–ù–∞–∑–∞–¥¬ª –≤–µ–¥—ë—Ç –≤ —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Ç–µ–º—ã,
    # —á—Ç–æ–±—ã –Ω–µ —É—Ö–æ–¥–∏—Ç—å –≤ ¬´–º–∏–Ω—É—Å-—à–∞–≥–∏¬ª –∏ –Ω–µ —Å–ø–∞–º–∏—Ç—å –¥—É–±–ª—è–º–∏
    if idx == 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"exlist:{tid}"))
    else:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ex:{tid}:{eid}:{prev_idx}"))

    if idx < total - 1:
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"ex:{tid}:{eid}:{next_idx}"))
    else:
        nav.append(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"ex:{tid}:{eid}:finish"))

    buttons.append(nav)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def step_keyboard_intro(tid: str, eid: str, total: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∏–Ω—Ç—Ä–æ:
    - ¬´–ù–∞–∑–∞–¥¬ª ‚Üí —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
    - ¬´–î–∞–ª–µ–µ¬ª ‚Üí –Ω–∞ –ü–ï–†–í–´–ô —à–∞–≥ (–∏–Ω–¥–µ–∫—Å 0)
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"exlist:{tid}"),
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"ex:{tid}:{eid}:0"),
        ]]
    )

# ===== –û–Ω–±–æ—Ä–¥–∏–Ω–≥: —Ç–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
ONB_1_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞–π—Ç–∏ –æ–ø–æ—Ä—É.\n"
    "–Ø —Ä—è–¥–æ–º –∏ –ø–æ–º–æ–≥—É ‚Äî –±–µ—Ä–µ–∂–Ω–æ –∏ –±–µ–∑ –æ—Ü–µ–Ω–æ–∫."
)

def kb_onb_step1() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ûú", callback_data="onb:step2")]
        ]
    )

ONB_2_TEXT = (
    "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫—É. "
    "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–º –æ–±–æ–∏–º –±—ã–ª–æ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ."
)

def kb_onb_step2() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üìÑ –ü—Ä–∞–≤–∏–ª–∞", url=TERMS_URL),
            InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞", url=POLICY_URL),
        ],
        [InlineKeyboardButton(text="–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ", callback_data="onb:agree")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

WHAT_NEXT_TEXT = (
    "–ß—Ç–æ –¥–∞–ª—å—à–µ? –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
    "1) –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª. –ü–æ–¥–µ–ª–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ, —è –ø–æ–¥–¥–µ—Ä–∂—É –∏ –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.\n"
    "2) –ù—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä ‚Äî –∑–∞—Ö–æ–¥–∏ –≤ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª. –¢–∞–º –∫–æ—Ä–æ—Ç–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã.\n"
    "3) –•–æ—á–µ—à—å –∞—É–¥–∏–æ-–ø–µ—Ä–µ–¥—ã—à–∫—É ‚Äî ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª. (–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –ø–æ–¥–±–æ—Ä–∫—É –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞—É–¥–∏–æ.)\n\n"
    "–ü–∏—à–∏, –∫–∞–∫ —É–¥–æ–±–Ω–æ ‚Äî —è —Ä—è–¥–æ–º üñ§"
)

def kb_onb_step3() -> ReplyKeyboardMarkup:
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∞–≤–æ–µ –º–µ–Ω—é (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
    return kb_main_menu()

# ===== –ú–∞—Ä—à—Ä—É—Ç—ã: –º–µ–Ω—é –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ =====
@router.message(CommandStart())
async def on_start(m: Message):
    CHAT_MODE[m.chat.id] = "talk"
    # —à–∞–≥ 1: –∫–∞—Ä—Ç–æ—á–∫–∞ —Å ¬´–í–ø–µ—Ä—ë–¥¬ª
    img = get_onb_image("cover")
    if img:
        try:
            await m.answer_photo(img, caption=ONB_1_TEXT, reply_markup=kb_onb_step1())
            return
        except Exception:
            pass
    await m.answer(ONB_1_TEXT, reply_markup=kb_onb_step1())

@router.callback_query(F.data == "onb:step2")
async def on_onb_step2(cb: CallbackQuery):
    # —Ç–µ–∫—Å—Ç-—Ç–æ–ª—å–∫–æ, –±–µ–∑ —Ñ–æ—Ç–æ
    await cb.message.answer(ONB_2_TEXT, reply_markup=kb_onb_step2())
    await cb.answer()

@router.callback_query(F.data == "onb:agree")
async def on_onb_agree(cb: CallbackQuery):
    # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ ‚Üí bot_events
    try:
        from sqlalchemy import text
        from app.db import db_session

        with db_session() as s:
            # –ø–æ–ª—É—á–∞–µ–º users.id –ø–æ tg_id (—É —Ç–µ–±—è tg_id ‚Äî —Å—Ç—Ä–æ–∫–∞)
            uid = s.execute(
                text("SELECT id FROM users WHERE tg_id = :tg"),
                {"tg": str(cb.from_user.id)}
            ).scalar()

            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—â—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º
            if uid is None:
                s.execute(
                    text("INSERT INTO users (tg_id, privacy_level) VALUES (:tg, 'insights')"),
                    {"tg": str(cb.from_user.id)}
                )
                uid = s.execute(
                    text("SELECT id FROM users WHERE tg_id = :tg"),
                    {"tg": str(cb.from_user.id)}
                ).scalar()

            # —Å–∞–º –ª–æ–≥ —Å–æ–≥–ª–∞—Å–∏—è
            s.execute(
                text("""
                    INSERT INTO bot_events (user_id, event_type, payload, created_at)
                    VALUES (:uid, :event, :payload, CURRENT_TIMESTAMP)
                """),
                {"uid": uid, "event": "policy_accept", "payload": '{"via":"onboarding_step2"}'}
            )
            s.commit()
    except Exception:
        # –Ω–µ –º–µ—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å –ë–î
        pass

    # —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π UX –æ—Å—Ç–∞—ë—Ç—Å—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–æ–µ –º–µ–Ω—é –∏ —à–∞–≥ ¬´–ß—Ç–æ –¥–∞–ª—å—à–µ?¬ª
    try:
        await cb.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª ‚úÖ", show_alert=False)
    except Exception:
        pass

    kb = None
    try:
        kb = kb_main_menu()   # –∫–∞–∫ —É —Ç–µ–±—è –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ
    except Exception:
        kb = None

    await cb.message.answer(WHAT_NEXT_TEXT, reply_markup=kb)

# ===== –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) =====
@router.message(F.text.in_(["üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è", "/work"]))
async def on_work_menu(m: Message):
    CHAT_MODE[m.chat.id] = "work"

    img = get_onb_image("work")  # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å: "work_topics"
    if img:
        try:
            await m.answer_photo(img, caption="–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
            return
        except Exception:
            pass

    await m.answer("–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())

@router.callback_query(F.data.startswith("exlist:"))
async def on_exlist(cb: CallbackQuery):
    tid = cb.data.split(":", 1)[1]
    await _safe_edit(cb.message, topic_button_title(tid), reply_markup=kb_exercises(tid))
    await cb.answer()

@router.message(F.text.in_(["üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", "/talk"]))
async def on_talk(m: Message):
    CHAT_MODE[m.chat.id] = "talk"
    await m.answer("–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?", reply_markup=kb_main_menu())

# === ReflectAI: –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ ‚Üí play) ===

def _as_track(item: object) -> dict:
    # dict-—Ñ–æ—Ä–º–∞
    if isinstance(item, dict):
        return {
            "id": item.get("id") or item.get("key") or item.get("uid") or "",
            "title": item.get("title", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"),
            "duration": item.get("duration", ""),
            "url": item.get("url"),
        }
    # tuple/list-—Ñ–æ—Ä–º—ã
    if isinstance(item, (tuple, list)):
        # (id, {title, duration, url})
        if len(item) == 2 and isinstance(item[1], dict):
            meta = item[1]
            return {
                "id": meta.get("id") or item[0],
                "title": meta.get("title", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"),
                "duration": meta.get("duration", ""),
                "url": meta.get("url"),
            }
        # (id, title, url[, duration])
        if len(item) >= 3:
            return {
                "id": item[0],
                "title": item[1] or "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
                "url": item[2],
                "duration": item[3] if len(item) > 3 else "",
            }
        # fallback
        return {"id": str(item[0]), "title": str(item[-1]), "duration": "", "url": None}
    # —Å–æ–≤—Å–µ–º –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Å–ª—É—á–∞–π
    return {"id": "", "title": str(item), "duration": "", "url": None}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥")
def kb_meditations_categories() -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for cid, label in get_categories():
        rows.append([InlineKeyboardButton(text=label, callback_data=f"med:cat:{cid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—É—Å—Ç–æ–π—á–∏–≤–æ –∫ —Ñ–æ—Ä–º–∞—Ç–∞–º)
def kb_meditations_list(cid: str) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for raw in get_items(cid):
        tr = _as_track(raw)
        label = f"{tr['title']} ¬∑ {tr.get('duration','')}".strip(" ¬∑")
        rows.append([InlineKeyboardButton(
            text=label,
            callback_data=f"med:play:{cid}:{tr['id']}"
        )])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="med:cats")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

MEDITATIONS_TEXT = (
    "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏.\n"
    "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É ‚Äî –ø—Ä–∏—à–ª—é –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–∞–∫—Ç–∏–∫—É.\n"
    "–ù–∞—á–∏–Ω–∞–π —Å —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è."
)

# /meditations (–∏ –æ–ø–µ—á–∞—Ç–∫–∏) ‚Äî –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª
@router.message(Command(commands=["meditations", "meditions", "meditation"]))
async def cmd_meditations(m: Message):
    img = get_onb_image("meditations")  # –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Ñ–æ—Ç–æ
    if img:
        try:
            await m.answer_photo(img, caption=MEDITATIONS_TEXT,
                                 reply_markup=kb_meditations_categories())
            return
        except Exception:
            pass
    await _safe_edit(m, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –º–µ–Ω—é ¬´üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª
@router.message(F.text == "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
async def on_meditations_btn(m: Message):
    await _safe_edit(m, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())

# –ö–æ–ª–ª–±—ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "med:cats")
async def on_med_cats(cb: CallbackQuery):
    await _safe_edit(cb.message, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())
    await cb.answer()

@router.callback_query(F.data.startswith("med:cat:"))
async def on_med_cat(cb: CallbackQuery):
    cid = cb.data.split(":", 2)[2]
    title = dict(get_categories()).get(cid, "–ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
    await _safe_edit(cb.message, f"üéß {title}", reply_markup=kb_meditations_list(cid))
    await cb.answer()

@router.callback_query(F.data.startswith("med:play:"))
async def on_med_play(cb: CallbackQuery):
    _, _, cid, mid = cb.data.split(":", 3)
    raw = get_item(cid, mid)
    tr = _as_track(raw) if raw is not None else None
    if not tr:
        await cb.answer("–ù–µ –Ω–∞—à—ë–ª –∞—É–¥–∏–æ", show_alert=True)
        return

    caption = f"üéß {tr.get('title','–ú–µ–¥–∏—Ç–∞—Ü–∏—è')} ¬∑ {tr.get('duration','')}".strip(" ¬∑")
    url = tr.get("url")

    if url:
        try:
            # –ø—Ä—è–º–æ–π .mp3/.m4a ‚Äî Telegram —Å–∞–º –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç
            await cb.message.answer_audio(url, caption=caption)
        except Exception:
            # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä—è–º–æ–µ –∞—É–¥–∏–æ (YouTube/—Å—Ç—Ä–∞–Ω–∏—Ü–∞) ‚Äî –¥–∞—ë–º —Å—Å—ã–ª–∫—É
            await cb.message.answer(f"{caption}\n{url}")
    else:
        await cb.message.answer(caption)

    await cb.answer("–ó–∞–ø—É—Å–∫–∞–π, —è —Ä—è–¥–æ–º üíõ")

@router.message(F.text.in_(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/settings", "/setting"]))
async def on_settings(m: Message):
    await m.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb_settings())

@router.callback_query(F.data == "menu:main")
async def on_menu_main(cb: CallbackQuery):
    await cb.message.answer("–ú–µ–Ω—é:", reply_markup=kb_main_menu())
    await cb.answer()

@router.callback_query(F.data == "menu:settings")
async def on_menu_settings(cb: CallbackQuery):
    await _safe_edit(cb.message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb_settings())
    await cb.answer()

@router.callback_query(F.data == "privacy:toggle")
async def on_privacy_toggle(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    mode = (db_get_privacy(str(chat_id)) or "ask").lower()
    # flip: all/ask -> none, none -> all
    new_mode = "none" if mode != "none" else "all"
    db_set_privacy(str(chat_id), new_mode)

    state_txt = "–≤—ã–∫–ª—é—á–µ–Ω–æ" if new_mode == "none" else "–≤–∫–ª—é—á–µ–Ω–æ"
    await _safe_edit(
        cb.message,
        f"–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: <b>{state_txt}</b>.",
        reply_markup=kb_privacy_for(chat_id),
    )
    await cb.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")

# === Settings menu actions ===
@router.callback_query(F.data == "settings:tone")
async def on_settings_tone(cb: CallbackQuery):
    await _safe_edit(
        cb.message,
        "–í—ã–±–µ—Ä–∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è:",
        reply_markup=kb_tone_picker(),
    )
    await cb.answer()

@router.callback_query(F.data == "settings:privacy")
async def on_settings_privacy(cb: CallbackQuery):
    await _safe_edit(
        cb.message,
        "–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:",
        reply_markup=kb_privacy_for(cb.message.chat.id),
    )
    await cb.answer()

# ===== –¢–æ–Ω –æ–±—â–µ–Ω–∏—è (/tone) =====
@router.message(Command("tone"))
async def on_tone_cmd(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è:", reply_markup=kb_tone_picker())

@router.callback_query(F.data.startswith("tone:"))
async def on_tone_pick(cb: CallbackQuery):
    style = cb.data.split(":", 1)[1]
    USER_TONE[cb.message.chat.id] = style
    await cb.answer("–°—Ç–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ", show_alert=False)
    await _safe_edit(cb.message, f"–¢–æ–Ω –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{style}</b> ‚úÖ", reply_markup=kb_settings())

# ===== –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (/privacy) =====
@router.message(Command("privacy"))
async def on_privacy_cmd(m: Message):
    flags = PRIVACY_FLAGS.setdefault(m.chat.id, {"save_history": True})
    state = "–≤–∫–ª—é—á–µ–Ω–æ" if flags.get("save_history", True) else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    await m.answer(f"–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: <b>{state}</b>.", reply_markup=kb_privacy())

# ===== –°–ø–∏—Å–æ–∫ —Ç–µ–º/—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π =====
@router.callback_query(F.data.startswith("work:"))
async def on_topic_pick(cb: CallbackQuery):
    tid = cb.data.split(":", 1)[1]
    tdata = EXERCISES.get(tid)
    if not tdata:
        await cb.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    title = tdata.get("title", tid)
    buttons: List[List[InlineKeyboardButton]] = []
    # ¬´–†–µ—Ñ–ª–µ–∫—Å–∏—è¬ª –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç:
    if tid == "reflection":
        buttons.append([InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", callback_data="reflect:start")])
    else:
        for ex_id, ex in tdata.get("items", {}).items():
            ex_title = ex.get("title", ex_id)
            buttons.append([InlineKeyboardButton(text=ex_title, callback_data=f"ex:{tid}:{ex_id}:start")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:work")])
    await _safe_edit(
        cb.message,
        f"<b>{_topic_title_with_emoji(tid)}</b>",
        InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await cb.answer()

@router.callback_query(F.data == "menu:work")
async def on_menu_work(cb: CallbackQuery):
    await _safe_edit(cb.message, "–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
    await cb.answer()

# ===== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —à–∞–≥–∞–º ‚Äî –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ =====
@router.callback_query(F.data.startswith("ex:"))
async def on_ex_click(cb: CallbackQuery):
    """
    –§–æ—Ä–º–∞—Ç callback_data: ex:<tid>:<eid>:<idx|start|finish>
    """
    try:
        # –¥–µ–ª–∞–µ–º —Ä–∞–∑–±–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã–º: –µ—Å–ª–∏ –Ω–µ—Ç 4-–π —á–∞—Å—Ç–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ "start"
        parts = cb.data.split(":", 3)
        _, tid, eid = parts[0], parts[1], parts[2]
        action = parts[3] if len(parts) > 3 else "start"
    except Exception:
        await cb.answer()
        return

    # —Å–ø–µ—Ü-—Ä–µ–∂–∏–º: —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç "–†–µ—Ñ–ª–µ–∫—Å–∏—è"
    if eid == "reflection":
        await cb.answer()
        await _safe_edit(
            cb.message,
            "–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
            reply_markup=None,
        )
        return

    # !!! –≥–ª–∞–≤–Ω–∞—è –ø—Ä–∞–≤–∫–∞: –Ω–∏–∫–∞–∫–∏—Ö .get("items") ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–æ—Å–∫–∞—è
    ex = (EXERCISES.get(tid) or {}).get(eid)
    if not ex:
        await cb.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    steps = ex.get("steps") or []
    intro = ex.get("intro") or ""
    total = max(1, len(steps))

    if action == "finish":
        # –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        try:
            kb = kb_exercises(tid)
        except NameError:
            # –µ—Å–ª–∏ kb_exercises –Ω–µ—Ç ‚Äî —É—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
            kb = kb_topics()
        await _safe_edit(cb.message, "–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—ë–º—Å—è –∫ —Ç–µ–º–µ?", reply_markup=kb)
        await cb.answer()
        return

    if action == "start":
        text = intro or (steps[0] if steps else "–®–∞–≥–æ–≤ –Ω–µ—Ç.")
        await _safe_edit(cb.message, text, reply_markup=step_keyboard_intro(tid, eid, total))
        await cb.answer()
        return

    # action ‚Äî —ç—Ç–æ –∏–Ω–¥–µ–∫—Å —à–∞–≥–∞
    try:
        idx = int(action)
    except Exception:
        idx = 0
    idx = max(0, min(idx, total - 1))

    text = steps[idx] if steps else "–®–∞–≥–æ–≤ –Ω–µ—Ç."
    await _safe_edit(cb.message, text, reply_markup=step_keyboard(tid, eid, idx, total))
    await cb.answer()
    
# ===== –†–µ—Ñ–ª–µ–∫—Å–∏—è ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç =====
@router.callback_query(F.data == "reflect:start")
async def on_reflect_start(cb: CallbackQuery):
    CHAT_MODE[cb.message.chat.id] = "reflection"
    await _safe_edit(cb.message, "–î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏–º –∏ –ø—Ä–∏—Å–ª—É—à–∞–µ–º—Å—è –∫ —Å–µ–±–µ. "
                                  "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Ç–æ–≥–æ, —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å.")
    await cb.answer()

@router.callback_query(F.data.startswith("t:"))
async def on_topic_click(cb: CallbackQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —Ç–µ–º—É –≤ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª.
    –î–µ–ª–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
    - –≤ —Ç–µ–∫—Å—Ç–µ ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã (—Å —ç–º–æ–¥–∑–∏),
    - –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚Äî —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Ç–µ–º—ã.
    """
    tid = cb.data.split(":", 1)[1]
    await _safe_edit(cb.message, topic_button_title(tid), reply_markup=kb_exercises(tid))
    await cb.answer()
    
# ===== –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã / –æ –ø—Ä–æ–µ–∫—Ç–µ / –ø–æ–º–æ—â—å / –æ–ø–ª–∞—Ç–∞ =====
@router.message(Command("about"))
async def on_about(m: Message):
    await m.answer("¬´–ü–æ–º–Ω–∏¬ª ‚Äî —Ç—ë–ø–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏ –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º—ã—Å–ª–∏. "
                   "–ó–¥–µ—Å—å –±–µ—Ä–µ–∂–Ω–æ, –±–µ–∑–æ—Ü–µ–Ω–æ—á–Ω–æ, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –Ω–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥.")

@router.message(Command("pay"))
async def on_pay(m: Message):
    await m.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è. –ú—ã –≥–æ—Ç–æ–≤–∏–º —É–¥–æ–±–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã.")

@router.message(Command("help"))
async def on_help(m: Message):
    await m.answer("–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Å–µ—Ä–≤–∏—Å—É, –Ω–∞–ø–∏—à–∏ –Ω–∞ support@remember.example ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º.")

# ===== –û–±—â–∏–π —á–∞—Ç: –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç + RAG + —Ç–æ–Ω =====
def _style_overlay(style_key: str | None) -> str:
    if not style_key or style_key == "default":
        return ""
    if style_key == "friend":
        return "–°—Ç–∏–ª—å: —Ç—ë–ø–ª—ã–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, –Ω–∞ ¬´—Ç—ã¬ª. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."
    if style_key == "therapist":
        return "–°—Ç–∏–ª—å: –±–µ—Ä–µ–∂–Ω—ã–π, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–Ω—ã–π, –∑–∞–¥–∞–≤–∞–π –º—è–≥–∫–∏–µ –ø—Ä–æ—è—Å–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª—è–π –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –∏–∑–±–µ–≥–∞–π –¥–∏–∞–≥–Ω–æ–∑–æ–≤."
    if style_key == "18plus":
        return "–°—Ç–∏–ª—å: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ —Ç—è–∂–µ–ª—ã–µ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –ª—é–±—ã–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è, —Å–º–µ–ª–µ–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–∏, –Ω–æ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏—Ä–æ–Ω–∏—á–Ω–æ–π —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏."
    return ""

async def _answer_with_llm(m: Message, user_text: str):
    chat_id = m.chat.id
    mode = CHAT_MODE.get(chat_id, "talk")
    style_key = USER_TONE.get(chat_id, "default")

    # –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    sys_prompt = TALK_PROMPT if mode in ("talk", "reflection") else BASE_PROMPT
    overlay = _style_overlay(style_key)
    if overlay:
        sys_prompt = sys_prompt + "\n\n" + overlay
    if mode == "reflection" and REFLECTIVE_SUFFIX:
        sys_prompt = sys_prompt + "\n\n" + REFLECTIVE_SUFFIX

    rag_ctx = ""
    if retrieve_relevant_context:
        try:
            rag_ctx = retrieve_relevant_context(user_text) or ""
            if rag_ctx:
                sys_prompt = (
                    sys_prompt
                    + "\n\n[–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é]\n"
                    + rag_ctx
                )
        except Exception:
            pass

    if chat_with_style is None:
        # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞–¥–∞–ø—Ç–µ—Ä –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        await m.answer("–Ø —Ç–µ–±—è —Å–ª—ã—à—É. –°–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–∞—é—Å—å‚Ä¶ (LLM-–∞–¥–∞–ø—Ç–µ—Ä –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω)")
        return

    messages = [
        {"role": "system", "content": sys_prompt},
        {"role": "user", "content": user_text},
    ]

    try:
        reply = await chat_with_style(messages=messages, style_key=style_key)
    except TypeError:
        # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏
        reply = await chat_with_style(messages, style_key=style_key)

    if not reply:
        reply = "–Ø —Ä—è–¥–æ–º. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª—å?"
    await m.answer(reply, reply_markup=kb_main_menu())



@router.message(Command("debug_prompt"))
async def on_debug_prompt(m: Message):
    mode = CHAT_MODE.get(m.chat.id, "talk")
    style_key = USER_TONE.get(m.chat.id, "default")

    sys_prompt = TALK_PROMPT if mode in ("talk", "reflection") else BASE_PROMPT
    overlay = _style_overlay(style_key)
    if overlay:
        sys_prompt += "\n\n" + overlay
    if mode == "reflection" and REFLECTIVE_SUFFIX:
        sys_prompt += "\n\n" + REFLECTIVE_SUFFIX

    preview = sys_prompt[:1200]
    await m.answer(f"<b>mode</b>: {mode}\n<b>tone</b>: {style_key}\n\n<code>{preview}</code>")

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: talk/reflection =====
@router.message(F.text & ~F.text.startswith("/"))
async def on_text(m: Message):
    # –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ, –≥–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —á–∞—Ç
    if CHAT_MODE.get(m.chat.id, "talk") in ("talk", "reflection"):
        await _answer_with_llm(m, m.text)
        return
    # –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª, –∞ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç ‚Äî –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–∏–º
    if CHAT_MODE.get(m.chat.id) == "work":
        await m.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª. "
                       "–ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª.", reply_markup=kb_main_menu())
        return
    # –¥–µ—Ñ–æ–ª—Ç
    await m.answer("–Ø —Ä—è–¥–æ–º –∏ –Ω–∞ —Å–≤—è–∑–∏. –ù–∞–∂–º–∏ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª –∏–ª–∏ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª.", reply_markup=kb_main_menu())

# ===== –î–æ–ø. –∫–æ–º–∞–Ω–¥—ã-—Å–∏–Ω–æ–Ω–∏–º—ã =====
@router.message(Command("menu"))
async def on_menu(m: Message):
    await m.answer("–ú–µ–Ω—é:", reply_markup=kb_main_menu())

# –°–ª—É–∂–µ–±–Ω–∞—è: –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º (—É–¥–æ–±–Ω–æ –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞)
@router.message(Command("work"))
async def on_work_cmd(m: Message):
    await on_work_menu(m)

@router.message(Command("work"))
async def cmd_work(m: Message):
    await _safe_edit(m, "–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())

@router.callback_query(F.data == "privacy:clear")
async def on_privacy_clear(cb: CallbackQuery):
    # —Ä–µ–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    from app.memory import purge_user_history
    try:
        count = purge_user_history(cb.from_user.id)
    except Exception:
        await cb.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", show_alert=True)
        return

    # –≤—Å–ø–ª—ã–≤–∞—à–∫–∞ + –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ–Ω—é
    await cb.answer("–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ ‚úÖ", show_alert=True)

    # –ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    kb = None
    try:
        kb = kb_privacy_for(cb.message.chat.id)  # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    except Exception:
        try:
            kb = kb_settings()  # fallback: –∫–æ—Ä–Ω–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        except Exception:
            kb = None

    text = f"–ì–æ—Ç–æ–≤–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}."
    try:
        # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∞ _safe_edit ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        await _safe_edit(cb.message, text, reply_markup=kb)  # type: ignore[name-defined]
    except Exception:
        # –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await cb.message.answer(text, reply_markup=kb)

# === ReflectAI: –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ UI ===
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def kb_meditations_categories() -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for cid, label in get_categories():
        rows.append([InlineKeyboardButton(text=label, callback_data=f"med:cat:{cid}")])
    # –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é (–ø—Ä–∞–≤–æ–µ reply-–º–µ–Ω—é –æ—Å—Ç–∞—ë—Ç—Å—è, –Ω–æ –¥–∞—ë–º —è–≤–Ω—É—é –∫–Ω–æ–ø–∫—É)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:settings")])  # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π —ç–∫—Ä–∞–Ω, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    return InlineKeyboardMarkup(inline_keyboard=rows)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def kb_meditations_list(cid: str) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for item in get_items(cid):
        rows.append([InlineKeyboardButton(
            text=f"{item['title']} ¬∑ {item.get('duration','')}".strip(),
            callback_data=f"med:play:{cid}:{item['id']}"
        )])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="med:cats")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

MEDITATIONS_TEXT = (
    "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏.\n"
    "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É ‚Äî –ø—Ä–∏—à–ª—é –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–∞–∫—Ç–∏–∫—É.\n"
    "–ù–∞—á–∏–Ω–∞–π —Å —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è."
)

# /meditations –∏ –∫–Ω–æ–ø–∫–∞ ¬´üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª
@router.message(Command("meditations"))
async def cmd_meditations(m: Message):
    await _safe_edit(m, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())

from aiogram import F
@router.message(F.text == "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
async def on_meditations_btn(m: Message):
    await _safe_edit(m, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())

# –ö–æ–ª–ª–±—ç–∫–∏
@router.callback_query(F.data == "med:cats")
async def on_med_cats(cb: CallbackQuery):
    await _safe_edit(cb.message, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())
    await cb.answer()

@router.callback_query(F.data.startswith("med:cat:"))
async def on_med_cat(cb: CallbackQuery):
    cid = cb.data.split(":", 2)[2]
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    cats = dict(get_categories())
    title = cats.get(cid, "–ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
    await _safe_edit(cb.message, f"üéß {title}", reply_markup=kb_meditations_list(cid))
    await cb.answer()

@router.callback_query(F.data.startswith("med:play:"))
async def on_med_play(cb: CallbackQuery):
    _, _, cid, mid = cb.data.split(":", 3)
    item = get_item(cid, mid)
    if not item:
        await cb.answer("–ù–µ –Ω–∞—à—ë–ª –∞—É–¥–∏–æ", show_alert=True)
        return
    url = item.get("url")
    caption = f"üéß {item.get('title','–ú–µ–¥–∏—Ç–∞—Ü–∏—è')} ¬∑ {item.get('duration','')}".strip()
    try:
        # –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π URL –Ω–∞ –∞—É–¥–∏–æ ‚Äî Telegram —Å–∞–º –µ–≥–æ –ø–æ–¥—Ç—è–Ω–µ—Ç
        await cb.message.answer_audio(url, caption=caption)
    except Exception:
        # fallback: –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ —ç—Ç–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, YouTube)
        await cb.message.answer(f"{caption}\n{url}")
    # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Å–ø–∏—Å–∫–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await cb.answer("–ó–∞–ø—É—Å–∫–∞–π, —è —Ä—è–¥–æ–º üíõ")
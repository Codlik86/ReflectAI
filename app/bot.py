# app/bot.py
from __future__ import annotations

import os
import hashlib
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
# –∞–ª–∏–∞—Å—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö, –≤ —Ç.—á. deep-link)
from aiogram.types import InlineKeyboardMarkup as _IKM, InlineKeyboardButton as _IKB

# ===== –ú–æ–¥—É–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ =====
from app.meditations import get_categories, get_items, get_item
from app.memory import save_user_message, save_bot_message, get_recent_messages
from app.exercises import TOPICS, EXERCISES
from app.prompts import SYSTEM_PROMPT as BASE_PROMPT
from app.prompts import TALK_SYSTEM_PROMPT as TALK_PROMPT
try:
    from app.prompts import REFLECTIVE_SUFFIX  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
except Exception:
    REFLECTIVE_SUFFIX = "\n\n(–†–µ–∂–∏–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: –º—è–≥–∫–æ –∑–∞–º–µ–¥–ª—è–π —Ç–µ–º–ø, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—é—â–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–∏—é.)"

# LLM
try:
    from app.llm_adapter import chat_with_style
except Exception:
    chat_with_style = None  # –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –Ω–µ –ø–∞–¥–∞–µ–º

# RAG (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from app.rag_qdrant import search as rag_search
except Exception:
    rag_search = None

# –ë–î (async)
from sqlalchemy import text
from app.db.core import async_session

from sqlalchemy import select
from app.db.core import get_session
from app.billing.yookassa_client import create_payment_link
from app.billing.service import start_trial_for_user, check_access, is_trial_active
from app.billing.service import disable_auto_renew, cancel_subscription_now, get_active_subscription_row


router = Router()

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û deep-link –≤–∏–¥–∞: /start paid_ok | paid_canceled | paid_fail
@router.message(F.text.regexp(r"^/start\s+paid_(ok|canceled|fail)$"))
async def on_start_payment_deeplink(m: Message):
    payload = (m.text or "").split(maxsplit=1)[1].strip().lower()

    if payload == "paid_ok":
        await m.answer(
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úÖ\n–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å ‚Äî ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª, ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª –∏–ª–∏ ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª.",
            reply_markup=kb_main_menu(),
        )
        return

    # paid_canceled / paid_fail
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="pay:open")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="menu:main")],
    ])
    await m.answer(
        "–ü–æ—Ö–æ–∂–µ, –æ–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∑–∞–π–º—ë—Ç –º–∏–Ω—É—Ç—É.",
        reply_markup=kb,
    )

# ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π paywall –≤ —Ä–∞–Ω—Ç–∞–π–º–µ ======================================
def _require_access_msg(_: Message) -> bool:
    """
    LEGACY: —Ä–∞–Ω—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ø–µ–π–≤–æ–ª–ª –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ _enforce_access_or_paywall(...) —Å –ë–î.
    –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ç–æ—Ç —Ö—É–∫, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    """
    return False

# =============================================================================

# --- async DB helpers (privacy, users, history) -----------------
async def _ensure_user_id(tg_id: int) -> int:
    """–í–µ—Ä–Ω—ë—Ç users.id –ø–æ tg_id, —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    async with async_session() as s:
        r = await s.execute(text("SELECT id FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
        uid = r.scalar()
        if uid is None:
            r = await s.execute(
                text("""
                    INSERT INTO users (tg_id, privacy_level, style_profile, created_at)
            VALUES (:tg, 'ask', 'default', NOW())
            RETURNING id
                """),
                {"tg": int(tg_id)},
            )
            uid = r.scalar_one()
            await s.commit()
        return int(uid)

async def _db_get_privacy(tg_id: int) -> str:
    async with async_session() as s:
        r = await s.execute(text("SELECT privacy_level FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
        val = r.scalar()
    return (val or "insights")

async def _db_set_privacy(tg_id: int, mode: str) -> None:
    async with async_session() as s:
        await s.execute(text("UPDATE users SET privacy_level = :m WHERE tg_id = :tg"),
                        {"m": mode, "tg": int(tg_id)})
        await s.commit()

async def _purge_user_history(tg_id: int) -> int:
    async with async_session() as s:
        r = await s.execute(text("SELECT id FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
        uid = r.scalar()
        if not uid:
            return 0
        r = await s.execute(text("DELETE FROM bot_messages WHERE user_id = :u"), {"u": int(uid)})
        await s.commit()
        return int(getattr(r, "rowcount", 0) or 0)
# ----------------------------------------------------------------

# ===== –û–Ω–±–æ—Ä–¥–∏–Ω–≥: —Å—Å—ã–ª–∫–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ =====
POLICY_URL = os.getenv("POLICY_URL", "").strip()
TERMS_URL  = os.getenv("TERMS_URL", "").strip()

DEFAULT_ONB_IMAGES = {
    "cover":       os.getenv("ONB_IMG_COVER", "https://file.garden/aML3M6Sqrg21TaIT/kind-creature-min.jpg"),
    "talk":        os.getenv("ONB_IMG_TALK", "https://file.garden/aML3M6Sqrg21TaIT/warm-conversation-min.jpg"),
    "work":        os.getenv("ONB_IMG_WORK", "https://file.garden/aML3M6Sqrg21TaIT/_practices-min.jpg"),
    "meditations": os.getenv("ONB_IMG_MEDIT", "https://file.garden/aML3M6Sqrg21TaIT/meditation%20(1)-min.jpg"),
}

def get_onb_image(key: str) -> str:
    return DEFAULT_ONB_IMAGES.get(key, "") or ""

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞) =====
CHAT_MODE: Dict[int, str] = {}        # chat_id -> "talk" | "work" | "reflection"
USER_TONE: Dict[int, str] = {}        # chat_id -> "default" | "friend" | "therapist" | "18plus"

# --- –ê–Ω—Ç–∏-—à—Ç–∞–º–ø—ã –∏ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ ¬´—à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏¬ª
BANNED_PHRASES = [
    "—ç—Ç–æ, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ, –æ—á–µ–Ω—å —Ç—Ä—É–¥–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
    "—è –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å",
    "–≤–∞–∂–Ω–æ –¥–∞—Ç—å —Å–µ–±–µ –≤—Ä–µ–º—è –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
    "–Ω–µ –∑–∞–±—ã–≤–∞–π –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ",
    "–µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –¥—Ä—É–∑—å—è–º"
]

def _has_banned_phrases(text_: str) -> bool:
    t = (text_ or "").lower()
    return any(p in t for p in BANNED_PHRASES)

def _jaccard(a: str, b: str) -> float:
    sa = set(a.lower().split())
    sb = set(b.lower().split())
    if not sa or not sb:
        return 0.0
    return len(sa & sb) / len(sa | sb)

def _too_similar_to_recent(chat_id: int, candidate: str, *, lookback: int = 8, thr: float = 0.62) -> bool:
    try:
        recent = get_recent_messages(chat_id, limit=lookback * 2)
        prev_bot = [m["text"] for m in recent if m["role"] == "bot"][-lookback:]
    except Exception:
        prev_bot = []
    return any(_jaccard(candidate, old) >= thr for old in prev_bot)

def _looks_templatey(text_: str) -> bool:
    return _has_banned_phrases(text_)

# --- ¬´–¥–Ω–µ–≤–Ω–∏—á–∫–æ–≤–∞—è¬ª –¥–ª–∏–Ω–∞: –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ
STRUCTURE_KEYWORDS = [
    "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å", "–ø–ª–∞–Ω", "—à–∞–≥–∏", "—Å—Ç—Ä—É–∫—Ç—É—Ä",
    "–æ–±—ä—è—Å–Ω–∏", "—Ä–∞–∑–ª–æ–∂–∏", "–ø–æ—á–µ–º—É", "–∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è", "–ø–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è",
]

def _wants_structure(user_text: str) -> bool:
    t = (user_text or "").lower()
    return (len(t) >= 240) or any(k in t for k in STRUCTURE_KEYWORDS)

# --- paywall helpers ---
async def _get_user_by_tg(session, tg_id: int):
    from app.db.models import User
    q = await session.execute(select(User).where(User.tg_id == tg_id))
    return q.scalar_one_or_none()

def _kb_paywall(show_trial: bool) -> InlineKeyboardMarkup:
    rows = []
    if show_trial:
        rows.append([InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚≠êÔ∏è", callback_data="trial:start")])
    rows.append([InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="pay:open")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

async def _enforce_access_or_paywall(msg_or_call, session, user_id: int) -> bool:
    """True ‚Äî –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å; False ‚Äî –ø–æ–∫–∞–∑–∞–Ω –ø–µ–π–≤–æ–ª–ª –∏ –Ω—É–∂–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É."""
    if await check_access(session, user_id):
        return True
    trial_active = await is_trial_active(session, user_id)
    show_trial = not trial_active
    text_ = (
        "–î–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª—É –æ—Ç–∫—Ä—ã—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
        "–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∑–∞—Ç–µ–º ‚Äî –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É."
    )
    if isinstance(msg_or_call, Message):
        await msg_or_call.answer(text_, reply_markup=_kb_paywall(show_trial))
    else:
        await msg_or_call.message.answer(text_, reply_markup=_kb_paywall(show_trial))
    return False

# --- pay status helpers ---
async def _access_status_text(session, user_id: int) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç."""
    # –ø–æ–¥–ø–∏—Å–∫–∞?
    try:
        from app.db.models import User
        u = (await session.execute(select(User).where(User.id == user_id))).scalar_one_or_none()
    except Exception:
        u = None
    if u and (getattr(u, "subscription_status", None) or "") == "active":
        return "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ\n–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–∫—Ä—ã—Ç."

    # —Ç—Ä–∏–∞–ª?
    if await is_trial_active(session, user_id):
        until = getattr(u, "trial_expires_at", None)
        tail = f" –¥–æ {until.astimezone().strftime('%d.%m.%Y %H:%M')}" if until else ""
        return f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω{tail} ‚úÖ\n–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–∫—Ä—ã—Ç."
    return None

def _fmt_dt(dt) -> str:
    try:
        return dt.astimezone().strftime('%d.%m.%Y %H:%M')
    except Exception:
        return str(dt)

async def _get_active_subscription(session, user_id: int):
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ: —á–∏—Ç–∞–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—Ä–æ–∫–æ–º
    row = await session.execute(text("""
        SELECT id, subscription_until, COALESCE(is_auto_renew, true) AS is_auto_renew
        FROM subscriptions
        WHERE user_id = :uid AND status = 'active'
        ORDER BY subscription_until DESC
        LIMIT 1
    """), {"uid": user_id})
    return row.mappings().first()

def _kb_trial_pay() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="pay:plans")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="menu:main")],
    ])

def _kb_active_sub_actions() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚ùå", callback_data="sub:cancel")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ ‚èπ", callback_data="sub:auto_off")],
    ])
def _kb_confirm(action: str) -> InlineKeyboardMarkup:
    # action: 'cancel' | 'auto_off'
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"sub:{action}:yes"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="pay:open"),
        ],
    ])

# ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π safe_edit (–Ω–µ —Ä–æ–Ω—è–µ—Ç UX) =====
async def _safe_edit(msg: Message, text: Optional[str] = None, reply_markup: Optional[InlineKeyboardMarkup] = None):
    try:
        if text is not None and reply_markup is not None:
            await msg.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
        elif text is not None:
            await msg.edit_text(text, disable_web_page_preview=True)
        elif reply_markup is not None:
            await msg.edit_reply_markup(reply_markup=reply_markup)
        else:
            return
    except Exception:
        if text is not None:
            try:
                await msg.answer(text, reply_markup=reply_markup, disable_web_page_preview=True)
            except Exception:
                pass
        elif reply_markup is not None:
            try:
                await msg.answer(".", reply_markup=reply_markup)
            except Exception:
                pass

# ===== –¢–æ–ø–∏–∫–∏/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
EMO_DEFAULTS = {
    "sleep": "üò¥", "body": "üí°", "procrastination": "üåø",
    "burnout": "‚òÄÔ∏è", "decisions": "üéØ", "social_anxiety": "ü´•",
    "reflection": "‚ú®",
}

def _emoji_by_topic(tid: str, title: str) -> str:
    meta = TOPICS.get(tid) or {}
    if isinstance(meta, dict):
        e = (meta.get("emoji") or "").strip()
        if e:
            return e
    pool = ["üå±", "üåø", "üå∏", "üåô", "‚òÄÔ∏è", "üî•", "üß≠", "üß†", "üõ†Ô∏è", "üí°", "üß©", "üéØ", "üåä", "ü´∂", "‚ú®"]
    idx = int(hashlib.md5((tid or title).encode("utf-8")).hexdigest(), 16) % len(pool)
    return pool[idx]

def _topic_title_with_emoji(tid: str) -> str:
    meta = TOPICS.get(tid) or {}
    title = (meta.get("title") or tid).strip()
    emo = (meta.get("emoji") or _emoji_by_topic(tid, title)).strip()
    return f"{emo} {title}"

def topic_button_title(tid: str) -> str:
    meta = TOPICS.get(tid, {})
    title = (meta.get("title") or tid).strip()
    emoji = (meta.get("emoji") or EMO_DEFAULTS.get(tid, "üå±")).strip()
    return f"{emoji} {title}"

def kb_main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")],
            [KeyboardButton(text="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
    )

def kb_topics() -> InlineKeyboardMarkup:
    order = TOPICS.get("__order__") or [k for k in TOPICS.keys() if not k.startswith("__")]
    rows = []
    for tid in order:
        if tid.startswith("__"):
            continue
        rows.append([InlineKeyboardButton(text=topic_button_title(tid), callback_data=f"t:{tid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_exercises(tid: str) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []
    for eid, ex in (EXERCISES.get(tid) or {}).items():
        if not isinstance(ex, dict):
            continue
        title = ex.get("title", eid)
        buttons.append([InlineKeyboardButton(text=title, callback_data=f"ex:{tid}:{eid}:start")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="work:topics")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def kb_settings() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéö –¢–æ–Ω –æ–±—â–µ–Ω–∏—è", callback_data="settings:tone")],
            [InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="settings:privacy")],
        ]
    )

def kb_tone_picker() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", callback_data="tone:default")],
            [InlineKeyboardButton(text="ü§ù –î—Ä—É–≥/–ø–æ–¥—Ä—É–≥–∞",                   callback_data="tone:friend")],
            [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–Ω—ã–π",                  callback_data="tone:therapist")],
            [InlineKeyboardButton(text="üå∂Ô∏è 18+",                           callback_data="tone:18plus")],
        ]
    )

async def kb_privacy_for(chat_id: int) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏."""
    try:
        mode = (await _db_get_privacy(chat_id) or "insights").lower()
    except Exception:
        mode = "insights"
    save_on = (mode != "none")
    toggle_text = "üîî –í–∫–ª. —Ö—Ä–∞–Ω–µ–Ω–∏–µ" if not save_on else "üîï –í—ã–∫–ª. —Ö—Ä–∞–Ω–µ–Ω–∏–µ"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=toggle_text,          callback_data="privacy:toggle")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="privacy:clear")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",            callback_data="menu:settings")],
        ]
    )

# ===== –¢—Ä–∏–∞–ª: —Ä–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤ –ë–î =========================================
@router.callback_query(lambda c: c.data == "trial:start")
async def cb_trial_start(call: CallbackQuery):
    tg_id = call.from_user.id

    async for session in get_session():
        from app.db.models import User
        q = await session.execute(select(User).where(User.tg_id == tg_id))
        u = q.scalar_one_or_none()
        if not u:
            await call.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.", show_alert=True)
            return

        # –µ—Å–ª–∏ —Ç—Ä–∏–∞–ª —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º
        if await is_trial_active(session, u.id):
            await call.answer("–¢—Ä–∏–∞–ª —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ", show_alert=True)
            return

        started, expires = await start_trial_for_user(session, u.id)
        await session.commit()

    # UI –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª–∞
    await call.message.edit_text(
        f"–¢—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ\n"
        f"–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–æ {expires.astimezone().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å: –≤—ã–±—Ä–∞—Ç—å ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª, ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª –∏–ª–∏ ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="menu:main")]
        ])
    )
    await call.answer()

@router.callback_query(lambda c: c.data == "pay:open")
async def cb_pay_open(call: CallbackQuery):
    await on_pay(call.message)   # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π —Ö—ç–Ω–¥–ª–µ—Ä /pay
    await call.answer()

@router.callback_query(lambda c: c.data == "pay:plans")
async def cb_pay_plans(call: CallbackQuery):
    await call.message.answer(
        "–ü–æ–¥–ø–∏—Å–∫–∞ ¬´–ü–æ–º–Ω–∏¬ª\n"
        "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É\n\n"
        "‚ö†Ô∏è <i>–í–∞–∂–Ω–æ: –ø–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º. –ï–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ /pay.</i>\n\n"
        "<b>–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω:</b>",
        reply_markup=_kb_pay_plans()
    )
    await call.answer()

# --- –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ ---
@router.callback_query(lambda c: c.data == "sub:auto_off")
async def cb_sub_auto_off(call: CallbackQuery):
    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not u:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        sub = await get_active_subscription_row(session, u.id)

    if not sub:
        await call.answer("–ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç.", show_alert=True); return

    until_str = _fmt_dt(sub["subscription_until"])
    await _safe_edit(
        call.message,
        text=f"–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?\n–¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ <b>{until_str}</b>, –¥–∞–ª—å—à–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç.",
        reply_markup=_kb_confirm("auto_off"),
    )
    await call.answer()

@router.callback_query(lambda c: c.data == "sub:auto_off:yes")
async def cb_sub_auto_off_yes(call: CallbackQuery):
    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not u:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        changed, until = await disable_auto_renew(session, u.id)

    if not changed:
        await _safe_edit(call.message, text="–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚èπ", reply_markup=_kb_active_sub_actions())
        await call.answer(); return

    until_str = _fmt_dt(until) if until else "–∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞"
    await _safe_edit(
        call.message,
        text=f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚èπ\n–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ {until_str}.",
        reply_markup=_kb_active_sub_actions(),
    )
    await call.answer()

# --- –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é ---
@router.callback_query(lambda c: c.data == "sub:cancel")
async def cb_sub_cancel(call: CallbackQuery):
    await _safe_edit(
        call.message,
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å?\n–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä–æ–µ—Ç—Å—è —Å—Ä–∞–∑—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç.",
        reply_markup=_kb_confirm("cancel"),
    )
    await call.answer()

@router.callback_query(lambda c: c.data == "sub:cancel:yes")
async def cb_sub_cancel_yes(call: CallbackQuery):
    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not u:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        ok = await cancel_subscription_now(session, u.id)

    if not ok:
        await _safe_edit(call.message, text="–ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=_kb_pay_plans())
        await call.answer(); return

    await _safe_edit(
        call.message,
        text="–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –æ—Ñ–æ—Ä–º–∏ –Ω–æ–≤—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ /pay.",
        reply_markup=_kb_pay_plans(),
    )
    await call.answer()

# ===== /policy =====
@router.message(Command("policy"))
async def cmd_policy(m: Message):
    parts = ["üîí <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞</b>"]
    if TERMS_URL:
        parts.append(f"‚Ä¢ <a href='{TERMS_URL}'>–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞</a>")
    if POLICY_URL:
        parts.append(f"‚Ä¢ <a href='{POLICY_URL}'>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>")
    if not TERMS_URL and not POLICY_URL:
        parts.append("–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è POLICY_URL –∏ TERMS_URL.")
    await m.answer("\n".join(parts), disable_web_page_preview=True)

# ===== –û–Ω–±–æ—Ä–¥–∏–Ω–≥ =====
ONB_1_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞–π—Ç–∏ –æ–ø–æ—Ä—É.\n"
    "–Ø —Ä—è–¥–æ–º –∏ –ø–æ–º–æ–≥—É ‚Äî –±–µ—Ä–µ–∂–Ω–æ –∏ –±–µ–∑ –æ—Ü–µ–Ω–æ–∫."
)

def kb_onb_step1() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ûú", callback_data="onb:step2")]])

ONB_2_TEXT = (
    "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫—É. "
    "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–º –æ–±–æ–∏–º –±—ã–ª–æ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ."
)

def kb_onb_step2() -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    link_row: list[InlineKeyboardButton] = []
    if TERMS_URL:
        link_row.append(InlineKeyboardButton(text="üìÑ –ü—Ä–∞–≤–∏–ª–∞", url=TERMS_URL))
    if POLICY_URL:
        link_row.append(InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞", url=POLICY_URL))
    if link_row:
        rows.append(link_row)
    rows.append([InlineKeyboardButton(text="–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ", callback_data="onb:agree")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

WHAT_NEXT_TEXT = """–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? üíõ

üí¨ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, –ø–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–≤–µ—Å—Ç–∏ —è—Å–Ω–æ—Å—Ç—å. –ó–∞–±–æ—Ç–ª–∏–≤—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, —Ç—ë–ø–ª—ã–π –¥—Ä—É–≥ –∏–ª–∏ –±–µ—Ä–µ–∂–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏ –º—ã—Å–ª–µ–π ‚Äî —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å.
üåø ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: —Å—Ç—Ä–µ—Å—Å, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è, —Ä–µ—à–µ–Ω–∏—è –∏ –¥—Ä.
üéß ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–µ –∞—É–¥–∏–æ-–ø–∞—É–∑—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–µ–±–µ –ø–µ—Ä–µ–¥—ã—à–∫—É.

–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü–æ—Å–ª–µ ‚Äî –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –ø–ª–∞–Ω."""
def kb_onb_step3() -> ReplyKeyboardMarkup:
    return kb_main_menu()

@router.message(CommandStart())
async def on_start(m: Message):
    CHAT_MODE[m.chat.id] = "talk"
    img = get_onb_image("cover")
    if img:
        try:
            await m.answer_photo(img, caption=ONB_1_TEXT, reply_markup=kb_onb_step1())
            return
        except Exception:
            pass
    await m.answer(ONB_1_TEXT, reply_markup=kb_onb_step1())

@router.callback_query(F.data == "onb:step2")
async def on_onb_step2(cb: CallbackQuery):
    await cb.message.answer(ONB_2_TEXT, reply_markup=kb_onb_step2())
    await cb.answer()

@router.callback_query(F.data == "onb:agree")
async def on_onb_agree(cb: CallbackQuery):
    tg_id = cb.from_user.id
    uid = await _ensure_user_id(tg_id)
    try:
        async with async_session() as s:
            await s.execute(text("UPDATE users SET policy_accepted_at = CURRENT_TIMESTAMP WHERE id = :uid"), {"uid": uid})
            await s.commit()
    except Exception:
        pass
    try:
        await cb.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª ‚úÖ", show_alert=False)
    except Exception:
        pass
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ–π–≤–æ–ª–ª (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∏–º–µ—Ä–∞)
    await cb.message.answer(WHAT_NEXT_TEXT, reply_markup=_kb_paywall(True))

# (—Å—Ç–∞—Ä—ã–π –ª–µ–≥–∞—Å–∏-—Ö—ç–Ω–¥–ª–µ—Ä trial:start –±—ã–ª —É–¥–∞–ª—ë–Ω)

# ===== –ú–µ–Ω—é/–Ω–∞–≤–∏–≥–∞—Ü–∏—è =====
@router.message(F.text == "üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
@router.message(Command("work"))
async def on_work_menu(m: Message):
    async for session in get_session():
        u = await _get_user_by_tg(session, m.from_user.id)
        if not u:
            await m.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
            return
        if not await _enforce_access_or_paywall(m, session, u.id):
            return
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    CHAT_MODE[m.chat.id] = "work"
    img = get_onb_image("work")
    if img:
        try:
            await m.answer_photo(img, caption="–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
            return
        except Exception:
            pass
    await m.answer("–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())

@router.callback_query(F.data == "work:topics")
async def on_back_to_topics(cb: CallbackQuery):
    async for session in get_session():
        u = await _get_user_by_tg(session, cb.from_user.id)
        if not u:
            await cb.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", show_alert=True)
            return
        if not await _enforce_access_or_paywall(cb, session, u.id):
            return
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    await _safe_edit(cb.message, "–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
    await cb.answer()

@router.callback_query(F.data.startswith("t:"))
async def on_topic_click(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    tid = cb.data.split(":", 1)[1]
    await _safe_edit(cb.message, topic_button_title(tid), reply_markup=kb_exercises(tid))
    await cb.answer()

# ===== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: —à–∞–≥–∏ =====
def step_keyboard(tid: str, eid: str, idx: int, total: int) -> InlineKeyboardMarkup:
    prev_idx = max(0, idx - 1)
    next_idx = min(total - 1, idx + 1)
    nav: List[InlineKeyboardButton] = []
    if idx == 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"exlist:{tid}"))
    else:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ex:{tid}:{eid}:{prev_idx}"))
    if idx < total - 1:
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"ex:{tid}:{eid}:{next_idx}"))
    else:
        nav.append(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"ex:{tid}:{eid}:finish"))
    return InlineKeyboardMarkup(inline_keyboard=[nav])

def step_keyboard_intro(tid: str, eid: str, total: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"exlist:{tid}"),
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"ex:{tid}:{eid}:0"),
        ]]
    )

@router.callback_query(F.data.startswith("exlist:"))
async def on_exlist(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    tid = cb.data.split(":", 1)[1]
    await _safe_edit(cb.message, topic_button_title(tid), reply_markup=kb_exercises(tid))
    await cb.answer()

@router.callback_query(F.data.startswith("ex:"))
async def on_ex_click(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    # ex:<tid>:<eid>:<idx|start|finish>
    try:
        parts = cb.data.split(":", 3)
        _, tid, eid = parts[0], parts[1], parts[2]
        action = parts[3] if len(parts) > 3 else "start"
    except Exception:
        await cb.answer(); return

    if eid == "reflection":
        await cb.answer()
        await _safe_edit(cb.message, "–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?", reply_markup=None)
        return

    ex = (EXERCISES.get(tid) or {}).get(eid)
    if not ex:
        await cb.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    steps = ex.get("steps") or []
    intro = ex.get("intro") or ""
    total = max(1, len(steps))

    if action == "finish":
        await _safe_edit(cb.message, "–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—ë–º—Å—è –∫ —Ç–µ–º–µ?", reply_markup=kb_exercises(tid))
        await cb.answer(); return

    if action == "start":
        text_ = intro or (steps[0] if steps else "–®–∞–≥–æ–≤ –Ω–µ—Ç.")
        await _safe_edit(cb.message, text_, reply_markup=step_keyboard_intro(tid, eid, total))
        await cb.answer(); return

    try:
        idx = int(action)
    except Exception:
        idx = 0
    idx = max(0, min(idx, total - 1))
    text_ = steps[idx] if steps else "–®–∞–≥–æ–≤ –Ω–µ—Ç."
    await _safe_edit(cb.message, text_, reply_markup=step_keyboard(tid, eid, idx, total))
    await cb.answer()

# ===== –†–µ—Ñ–ª–µ–∫—Å–∏—è =====
@router.callback_query(F.data == "reflect:start")
async def on_reflect_start(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    CHAT_MODE[cb.message.chat.id] = "reflection"
    await _safe_edit(cb.message, "–î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏–º –∏ –ø—Ä–∏—Å–ª—É—à–∞–µ–º—Å—è –∫ —Å–µ–±–µ. "
                                  "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Ç–æ–≥–æ, —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å.")
    await cb.answer()

# ===== –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ =====
def _as_track(item: object) -> dict:
    if isinstance(item, dict):
        return {
            "id": item.get("id") or item.get("key") or item.get("uid") or "",
            "title": item.get("title", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"),
            "duration": item.get("duration", ""),
            "url": item.get("url"),
        }
    if isinstance(item, (tuple, list)):
        if len(item) == 2 and isinstance(item[1], dict):
            meta = item[1]
            return {
                "id": meta.get("id") or item[0],
                "title": meta.get("title", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"),
                "duration": meta.get("duration", ""),
                "url": meta.get("url"),
            }
        if len(item) >= 3:
            return {"id": item[0], "title": item[1] or "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "url": item[2], "duration": item[3] if len(item) > 3 else ""}
        return {"id": str(item[0]), "title": str(item[-1]), "duration": "", "url": None}
    return {"id": "", "title": str(item), "duration": "", "url": None}

def kb_meditations_categories() -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for cid, label in get_categories():
        rows.append([InlineKeyboardButton(text=label, callback_data=f"med:cat:{cid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_meditations_list(cid: str) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for raw in get_items(cid):
        tr = _as_track(raw)
        label = f"{tr['title']} ¬∑ {tr.get('duration','')}".strip(" ¬∑")
        rows.append([InlineKeyboardButton(text=label, callback_data=f"med:play:{cid}:{tr['id']}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="med:cats")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

MEDITATIONS_TEXT = (
    "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏.\n"
    "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É ‚Äî –ø—Ä–∏—à–ª—é –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–∞–∫—Ç–∏–∫—É.\n"
    "–ù–∞—á–∏–Ω–∞–π —Å —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è."
)

@router.message(Command(commands=["meditations", "meditions", "meditation"]))
async def cmd_meditations(m: Message):
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    img = get_onb_image("meditations")
    if img:
        try:
            await m.answer_photo(img, caption=MEDITATIONS_TEXT, reply_markup=kb_meditations_categories()); return
        except Exception:
            pass
    await _safe_edit(m, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())

@router.message(F.text == "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
async def on_meditations_btn(m: Message):
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    await _safe_edit(m, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())

@router.callback_query(F.data == "med:cats")
async def on_med_cats(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    await _safe_edit(cb.message, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories()); await cb.answer()

@router.callback_query(F.data.startswith("med:cat:"))
async def on_med_cat(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    cid = cb.data.split(":", 2)[2]
    title = dict(get_categories()).get(cid, "–ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
    await _safe_edit(cb.message, f"üéß {title}", reply_markup=kb_meditations_list(cid))
    await cb.answer()

@router.callback_query(F.data.startswith("med:play:"))
async def on_med_play(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    _, _, cid, mid = cb.data.split(":", 3)
    raw = get_item(cid, mid)
    tr = _as_track(raw) if raw is not None else None
    if not tr:
        await cb.answer("–ù–µ –Ω–∞—à—ë–ª –∞—É–¥–∏–æ", show_alert=True); return

    caption = f"üéß {tr.get('title','–ú–µ–¥–∏—Ç–∞—Ü–∏—è')} ¬∑ {tr.get('duration','')}".strip(" ¬∑")
    url = tr.get("url")

    try:
        await cb.bot.send_chat_action(cb.message.chat.id, "upload_audio")
    except Exception:
        pass

    sent_ok = False
    if url:
        try:
            await cb.message.answer_audio(url, caption=caption)
            sent_ok = True
        except Exception:
            try:
                await cb.message.answer(f"{caption}\n{url}")
                sent_ok = True
            except Exception:
                pass
    if not sent_ok:
        await cb.message.answer(caption)

    # –º—è–≥–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞
    try:
        import json
        uid = await _ensure_user_id(cb.from_user.id)
        async with async_session() as s:
            await s.execute(
                text("""
                    INSERT INTO bot_events (user_id, event_type, payload, created_at)
                    VALUES (:uid, :etype, :payload, CURRENT_TIMESTAMP)
                """),
                {
                    "uid": uid,
                    "etype": "audio_play",
                    "payload": json.dumps(
                        {"cid": cid, "mid": mid, "title": tr.get("title"), "duration": tr.get("duration"), "url": tr.get("url")},
                        ensure_ascii=False,
                    ),
                },
            )
            await s.commit()
    except Exception:
        pass

    await cb.answer("–ó–∞–ø—É—Å–∫–∞–π, —è —Ä—è–¥–æ–º üíõ")

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@router.message(Command("settings"))
@router.message(Command("setting"))
async def on_settings(m: Message):
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    await m.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb_settings())

@router.callback_query(F.data == "menu:main")
async def on_menu_main(cb: CallbackQuery):
    await cb.message.answer("–ú–µ–Ω—é:", reply_markup=kb_main_menu()); await cb.answer()

@router.callback_query(F.data == "menu:settings")
async def on_menu_settings(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    await _safe_edit(cb.message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb_settings()); await cb.answer()

@router.callback_query(F.data == "settings:tone")
async def on_settings_tone(cb: CallbackQuery):
    await _safe_edit(cb.message, "–í—ã–±–µ—Ä–∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è:", reply_markup=kb_tone_picker()); await cb.answer()

@router.callback_query(F.data == "settings:privacy")
async def on_settings_privacy(cb: CallbackQuery):
    rm = await kb_privacy_for(cb.message.chat.id)
    await _safe_edit(cb.message, "–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:", reply_markup=rm); await cb.answer()

@router.callback_query(F.data == "privacy:toggle")
async def on_privacy_toggle(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    mode = (await _db_get_privacy(chat_id) or "insights").lower()
    new_mode = "none" if mode != "none" else "insights"
    await _db_set_privacy(chat_id, new_mode)
    state_txt = "–≤—ã–∫–ª—é—á–µ–Ω–æ" if new_mode == "none" else "–≤–∫–ª—é—á–µ–Ω–æ"
    rm = await kb_privacy_for(chat_id)
    await _safe_edit(cb.message, f"–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: <b>{state_txt}</b>.", reply_markup=rm)
    await cb.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")

@router.callback_query(F.data == "privacy:clear")
async def on_privacy_clear(cb: CallbackQuery):
    try:
        count = await _purge_user_history(cb.from_user.id)
    except Exception:
        await cb.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", show_alert=True); return
    await cb.answer("–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ ‚úÖ", show_alert=True)
    text_ = f"–ì–æ—Ç–æ–≤–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}."
    rm = await kb_privacy_for(cb.message.chat.id)
    await _safe_edit(cb.message, text_, reply_markup=rm)

@router.message(Command("privacy"))
async def on_privacy_cmd(m: Message):
    mode = (await _db_get_privacy(m.chat.id) or "insights").lower()
    state = "–≤—ã–∫–ª—é—á–µ–Ω–æ" if mode == "none" else "–≤–∫–ª—é—á–µ–Ω–æ"
    rm = await kb_privacy_for(m.chat.id)
    await m.answer(f"–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: <b>{state}</b>.", reply_markup=rm)

# ===== –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã =====
@router.message(Command("about"))
async def on_about(m: Message):
    await m.answer("¬´–ü–æ–º–Ω–∏¬ª ‚Äî —Ç—ë–ø–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏ –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º—ã—Å–ª–∏. "
                   "–ó–¥–µ—Å—å –±–µ—Ä–µ–∂–Ω–æ, –±–µ–∑–æ—Ü–µ–Ω–æ—á–Ω–æ, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –Ω–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥.")

@router.message(Command("help"))
async def on_help(m: Message):
    await m.answer("–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Å–µ—Ä–≤–∏—Å—É, –Ω–∞–ø–∏—à–∏ –Ω–∞ selflect@proton.me ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º.")

@router.message(Command("menu"))
async def on_menu(m: Message):
    msg = await m.answer('–ú–µ–Ω—é', reply_markup=kb_main_menu())
    try:
        await msg.delete()
    except Exception:
        pass

# ===== –¢–æ–Ω –∏ —Ä–µ–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ =====
@router.message(F.text == "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
@router.message(Command("talk"))
async def on_talk(m: Message):
    async for session in get_session():
        u = await _get_user_by_tg(session, m.from_user.id)
        if not u:
            await m.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
            return
        if not await _enforce_access_or_paywall(m, session, u.id):
            return

    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    CHAT_MODE[m.chat.id] = "talk"
    await m.answer("–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?", reply_markup=kb_main_menu())

@router.message(Command("tone"))
async def on_tone_cmd(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è:", reply_markup=kb_tone_picker())

@router.callback_query(F.data.startswith("tone:"))
async def on_tone_pick(cb: CallbackQuery):
    style = cb.data.split(":", 1)[1]
    USER_TONE[cb.message.chat.id] = style
    await cb.answer("–°—Ç–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ", show_alert=False)
    await _safe_edit(cb.message, f"–¢–æ–Ω –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{style}</b> ‚úÖ", reply_markup=kb_settings())

# ===== LLM-–ø–æ–º–æ—â–Ω–∏–∫ =====
def _style_overlay(style_key: str | None) -> str:
    if not style_key or style_key == "default":
        return ("–ù–∞—á–∏–Ω–∞–π —Å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è, –±–µ–∑ –∫–ª–∏—à–µ. "
                "–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî –º–∏–Ω–∏-–ø–ª–∞–Ω 2‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ –∏–ª–∏ 2‚Äì4 –∞–±–∑–∞—Ü–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è. "
                "–í—Å–µ–≥–¥–∞ 1 –≤–æ–ø—Ä–æ—Å/–≤–∏–ª–∫–∞ –≤ –∫–æ–Ω—Ü–µ.")
    if style_key == "friend":
        return ("–†–∞–∑–≥–æ–≤–æ—Ä–Ω–æ –∏ –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É. –ë–µ–∑ –∫–ª–∏—à–µ ¬´–ø–æ–Ω–∏–º–∞—é/–¥–µ—Ä–∂–∏—Å—å¬ª. "
                "–ú–æ–∂–Ω–æ –º–∏–Ω–∏-–ø–ª–∞–Ω, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫—É –Ω—É–∂–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞. –í –∫–æ–Ω—Ü–µ ‚Äî –≤–æ–ø—Ä–æ—Å/–≤–∏–ª–∫–∞.")
    if style_key == "therapist":
        return ("–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–Ω—ã–π, –Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π: –ø—Ä–æ—è—Å–Ω—è–π —Ñ–æ–∫—É—Å, –æ–±—ä—è—Å–Ω—è–π –∫—Ä–∞—Ç–∫–æ, "
                "–¥–∞–≤–∞–π 1 –Ω–µ–±–æ–ª—å—à–æ–π —à–∞–≥ –∏–ª–∏ –º–∏–Ω–∏-–ø–ª–∞–Ω. –ë–µ–∑ –ª–µ–∫—Ü–∏–π –∏ —à—Ç–∞–º–ø–æ–≤.")
    if style_key == "18plus":
        return ("–ú–æ–∂–Ω–æ —Å–º–µ–ª–µ–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–∏). –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–Ω–∏-–ø–ª–∞–Ω. "
                "–§–∏–Ω–∞–ª ‚Äî –≤–æ–ø—Ä–æ—Å/–≤–∏–ª–∫–∞.")
    return ""

async def _answer_with_llm(m: Message, user_text: str):
    chat_id = m.chat.id
    mode = CHAT_MODE.get(chat_id, "talk")
    style_key = USER_TONE.get(chat_id, "default")

    # 1) System prompt
    sys_prompt = TALK_PROMPT if mode in ("talk", "reflection") else BASE_PROMPT
    overlay = _style_overlay(style_key)
    if overlay:
        sys_prompt = sys_prompt + "\n\n" + overlay
    if mode == "reflection" and REFLECTIVE_SUFFIX:
        sys_prompt = sys_prompt + "\n\n" + REFLECTIVE_SUFFIX

    # 2) –ò—Å—Ç–æ—Ä–∏—è (—Å—Ç–∞—Ä—ã–µ ‚Üí –Ω–æ–≤—ã–µ)
    history_msgs: List[dict] = []
    try:
        recent = get_recent_messages(chat_id, limit=70)
        for r in recent:
            role = "assistant" if r["role"] == "bot" else "user"
            history_msgs.append({"role": role, "content": r["text"]})
    except Exception:
        pass

    # 3) RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    rag_ctx = ""
    if rag_search is not None:
        try:
            rag_ctx = await rag_search(user_text, k=6, max_chars=900, lang="ru")
        except Exception:
            rag_ctx = ""

    messages = [{"role": "system", "content": sys_prompt}]
    if rag_ctx:
        messages.append({"role": "system", "content": f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —Ç–µ–º–µ (–∏—Å–ø–æ–ª—å–∑—É–π –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):\n{rag_ctx}"})
    messages += history_msgs
    messages.append({"role": "user", "content": user_text})

    if chat_with_style is None:
        await m.answer("–Ø —Ç–µ–±—è —Å–ª—ã—à—É. –°–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–∞—é—Å—å‚Ä¶")
        return

    LLM_MAX_TOKENS = 480

    def _needs_regen(text_: str) -> bool:
        return not text_ or _looks_templatey(text_) or _too_similar_to_recent(chat_id, text_)

    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
    try:
        reply = await chat_with_style(
            messages=messages,
            style_hint=None,
            temperature=0.85,
            max_tokens=LLM_MAX_TOKENS,
        )
    except TypeError:
        reply = await chat_with_style(messages, temperature=0.85, max_tokens=LLM_MAX_TOKENS)
    except Exception:
        reply = ""

    # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏
    if _needs_regen(reply):
        fixer_system = (
            "–ü–µ—Ä–µ–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –∂–∏–≤–µ–µ, –±–µ–∑ –∫–ª–∏—à–µ –∏ –æ–±—â–∏—Ö —Å–ª–æ–≤.\n"
            "–§–æ—Ä–º–∞—Ç: –Ω–∞—á–Ω–∏ —Å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è/—É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–Ω–µ —Å ¬´–ø–æ–Ω–∏–º–∞—é/—ç—Ç–æ —Å–ª–æ–∂–Ω–æ¬ª), "
            "–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø–æ –¥–µ–ª—É. –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 2‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞ –ò–õ–ò 2‚Äì5 –ø—É–Ω–∫—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç. "
            "–û–¥–∏–Ω –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å/–≤–∏–ª–∫–∞ –≤ –∫–æ–Ω—Ü–µ. –ò–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: "
            + "; ".join(BANNED_PHRASES) + "."
        )
        refine_msgs = [
            {"role": "system", "content": fixer_system},
            {"role": "user", "content": f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–µ–ø–∏—à–∏ –≤ –¥—É—Ö–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π):\n\n{reply or '(–ø—É—Å—Ç–æ)'}"},
        ]
        try:
            better = await chat_with_style(
                messages=refine_msgs,
                temperature=0.8,
                max_tokens=LLM_MAX_TOKENS,
            )
        except TypeError:
            better = await chat_with_style(refine_msgs, temperature=0.8, max_tokens=LLM_MAX_TOKENS)
        except Exception:
            better = ""
        if better and not _needs_regen(better):
            reply = better

    if not reply:
        reply = "–î–∞–≤–∞–π —Å—É–∑–∏–º: –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–π –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–π? –î–≤–∞-—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."

    await m.answer(reply, reply_markup=kb_main_menu())
    try:
        save_bot_message(chat_id, reply)
    except Exception:
        pass

@router.message(Command("debug_prompt"))
async def on_debug_prompt(m: Message):
    mode = CHAT_MODE.get(m.chat.id, "talk")
    style_key = USER_TONE.get(m.chat.id, "default")
    sys_prompt = TALK_PROMPT if mode in ("talk", "reflection") else BASE_PROMPT
    overlay = _style_overlay(style_key)
    if overlay:
        sys_prompt += "\n\n" + overlay
    if mode == "reflection" and REFLECTIVE_SUFFIX:
        sys_prompt += "\n\n" + REFLECTIVE_SUFFIX
    preview = sys_prompt[:1200]
    await m.answer(f"<b>mode</b>: {mode}\n<b>tone</b>: {style_key}\n\n<code>{preview}</code>")

# ===== –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è =====
@router.message(F.text & ~F.text.startswith("/"))
async def on_text(m: Message):
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    chat_id = m.chat.id
    try:
        save_user_message(chat_id, m.text or "")
    except Exception:
        pass

    if CHAT_MODE.get(chat_id, "talk") in ("talk", "reflection"):
        await _answer_with_llm(m, m.text or ""); return

    if CHAT_MODE.get(chat_id) == "work":
        await m.answer(
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª. –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª.",
            reply_markup=kb_main_menu(),
        ); return

    await m.answer("–Ø —Ä—è–¥–æ–º –∏ –Ω–∞ —Å–≤—è–∑–∏. –ù–∞–∂–º–∏ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª –∏–ª–∏ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª.", reply_markup=kb_main_menu())

# === /pay ‚Äî –ø–ª–∞–Ω—ã —Å 4 —Ç–∞—Ä–∏—Ñ–∞–º–∏ =========================================
from aiogram.filters import Command as _CmdPay

_PLANS = {
    "week":  (499,  "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é"),
    "month": (1190, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"),
    "q3":    (2990, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞"),
    "year":  (7990, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥"),
}

def _kb_pay_plans() -> _IKM:
    return _IKM(inline_keyboard=[
        [_IKB(text="–ù–µ–¥–µ–ª—è ‚Äî 499 ‚ÇΩ",    callback_data="pay:plan:week")],
        [_IKB(text="–ú–µ—Å—è—Ü ‚Äî 1190 ‚ÇΩ",    callback_data="pay:plan:month")],
        [_IKB(text="3 –º–µ—Å—è—Ü–∞ ‚Äî 2990 ‚ÇΩ", callback_data="pay:plan:q3")],
        [_IKB(text="–ì–æ–¥ ‚Äî 7990 ‚ÇΩ",      callback_data="pay:plan:year")],
    ])

@router.message(_CmdPay("pay"))
async def on_pay(m: Message):
    tg_id = m.from_user.id

    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(select(User).where(User.tg_id == tg_id))).scalar_one_or_none()
        if not u:
            await m.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.", reply_markup=kb_main_menu())
            return

        # 1) –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞?
        active_sub = await _get_active_subscription(session, u.id)
        if active_sub:
            until = active_sub["subscription_until"]
            await m.answer(
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ\n–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–æ <b>{_fmt_dt(until)}</b>.\n\n"
                f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=_kb_active_sub_actions()
            )
            return

        # 2) –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–∞–ª?
        if await is_trial_active(session, u.id):
            until = getattr(u, "trial_expires_at", None)
            tail = f"–¥–æ <b>{_fmt_dt(until)}</b>" if until else "—Å–µ–π—á–∞—Å"
            await m.answer(
                f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî {tail}. ‚úÖ\n"
                f"–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã.\n\n"
                f"–•–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–∞–∑—É? (–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ /pay.)",
                reply_markup=_kb_trial_pay()
            )
            return

    # 3) –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    await m.answer(
        "–ü–æ–¥–ø–∏—Å–∫–∞ ¬´–ü–æ–º–Ω–∏¬ª\n"
        "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É\n\n"
        "‚ö†Ô∏è <i>–í–∞–∂–Ω–æ: –ø–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º. –ï–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ /pay.</i>\n\n"
        "<b>–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω:</b>",
        reply_markup=_kb_pay_plans()
    )

@router.callback_query(F.data.startswith("pay:plan:"))
async def on_pick_plan(cb: CallbackQuery):
    plan = cb.data.split(":")[-1]  # week|month|q3|year
    if plan not in _PLANS:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω", show_alert=True)
        return

    amount, desc = _PLANS[plan]  # amount: int, desc: str

    # --- –Ω–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã users) ---
    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(
            select(User).where(User.tg_id == cb.from_user.id)
        )).scalar_one_or_none()

        if not u:
            await cb.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", show_alert=True)
            return

        # --- —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ YooKassa –∏ –±–µ—Ä—ë–º redirect URL ---
        try:
            pay_url = create_payment_link(
                amount_rub=int(amount),
                description=desc,
                metadata={"user_id": int(u.id), "plan": plan},
                # return_url –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º ‚Äî –≤–æ–∑—å–º—ë—Ç—Å—è –∏–∑ YK_RETURN_URL (ENV)
            )
        except Exception:
            pay_url = None

    if not pay_url:
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        await cb.answer()
        return

    kb = _IKM(inline_keyboard=[[ _IKB(text="–û–ø–ª–∞—Ç–∏—Ç—å üí≥", url=pay_url) ]])
    await cb.message.answer(
        f"<b>{desc}</b>\n–°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n\n–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å üí≥¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ.",
        reply_markup=kb
    )
    await cb.answer()


# ===== Gate middleware: –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–æ —Å–æ–≥–ª–∞—Å–∏—è –∏ –¥–æ —Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–∏–∞–ª–∞/–æ–ø–ª–∞—Ç—ã =====

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –≤–µ—Ä—Ö —Ñ–∞–π–ª–∞
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from typing import Callable, Awaitable, Any, Dict, Tuple, Union

async def _gate_user_flags(tg_id: int) -> Tuple[bool, bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (policy_ok, access_ok)
    policy_ok ‚Äî –ø—Ä–∏–Ω—è—Ç –ª–∏ —ç–∫—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª;
    access_ok ‚Äî –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø (—Ç—Ä–∏–∞–ª –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞).
    """
    from sqlalchemy import text
    from app.db.core import async_session
    # policy
    async with async_session() as s:
        r = await s.execute(text("SELECT id, policy_accepted_at FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
        row = r.first()
        if not row:
            return False, False
        uid = int(row[0])
        policy_ok = bool(row[1])
    # access (trial/subscription)
    from app.billing.service import check_access
    async with async_session() as s2:
        try:
            access_ok = await check_access(s2, uid)
        except Exception:
            access_ok = False
    return policy_ok, access_ok

async def _gate_send_policy(event: Union[Message, CallbackQuery]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å ¬´–ü—Ä–∏–Ω–∏–º–∞—é¬ª –∑–∞–Ω–æ–≤–æ."""
    import os
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÑ –ü—Ä–∞–≤–∏–ª–∞", url=os.getenv("LEGAL_POLICY_URL") or "https://example.com/policy"),
            InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞", url=os.getenv("LEGAL_OFFER_URL") or "https://example.com/offer"),
        ],
        [InlineKeyboardButton(text="–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ", callback_data="onb:agree")],
    ])
    text = "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫—É. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–º –æ–±–æ–∏–º –±—ã–ª–æ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ."
    await (event.message if isinstance(event, CallbackQuery) else event).answer(text, reply_markup=kb)

async def _gate_send_trial_cta(event: Union[Message, CallbackQuery]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º CTA —Ç—Ä–∏–∞–ª–∞/—Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞–Ω–æ–≤–æ."""
    try:
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        from app.bot import WHAT_NEXT_TEXT, _kb_paywall  # type: ignore
        text = WHAT_NEXT_TEXT
        kb = _kb_paywall(True)
    except Exception:
        text = "–î–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª–∞–º –æ—Ç–∫—Ä—ã—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∑–∞—Ç–µ–º ‚Äî –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É."
        kb = None
    await (event.message if isinstance(event, CallbackQuery) else event).answer(text, reply_markup=kb)

class GateMiddleware(BaseMiddleware):
    """
    –õ–æ–≥–∏–∫–∞:
    1) –ü–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç policy ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ /start –∏ onb:* (–æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —ç–∫—Ä–∞–Ω policy).
    2) –ü–æ—Å–ª–µ policy, –Ω–æ –¥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ /pay –∏ trial/pay/plan/tariff/yk:* (–æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî CTA —Ç—Ä–∏–∞–ª–∞).
    3) –ö–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë.
    """
    async def __call__(
        self,
        handler: Callable[[Union[Message, CallbackQuery], Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any]
    ) -> Any:
        try:
            tg_id = getattr(getattr(event, "from_user", None), "id", None)
            if not tg_id:
                return await handler(event, data)

            policy_ok, access_ok = await _gate_user_flags(int(tg_id))

            # 1) policy –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç ‚Äî —Å–ø–∞–º–∏–º —ç–∫—Ä–∞–Ω–∞–º–∏ –ø—Ä–∞–≤–∏–ª
            if not policy_ok:
                if isinstance(event, Message):
                    if (event.text or "").startswith("/start"):
                        return await handler(event, data)
                    await _gate_send_policy(event)
                    return
                else:
                    if (event.data or "").startswith("onb:"):
                        return await handler(event, data)
                    await _gate_send_policy(event)
                    return

            # 2) policy –ø—Ä–∏–Ω—è—Ç, –Ω–æ –¥–æ—Å—Ç—É–ø–∞ –µ—â—ë –Ω–µ—Ç ‚Äî —Å–ø–∞–º–∏–º CTA —Ç—Ä–∏–∞–ª–∞/—Ç–∞—Ä–∏—Ñ–æ–≤
            if not access_ok:
                if isinstance(event, Message):
                    if (event.text or "").startswith("/pay"):
                        return await handler(event, data)
                    await _gate_send_trial_cta(event)
                    return
                else:
                    d = (event.data or "")
                    if d.startswith(("trial:", "pay:", "plan:", "tariff:", "yk:")):
                        return await handler(event, data)
                    await _gate_send_trial_cta(event)
                    return

            # 3) –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë
            return await handler(event, data)

        except Exception:
            # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –æ—à–∏–±–∫–∞—Ö (fail-open)
            return await handler(event, data)

# ---- mount GateMiddleware after its definition ----
def _mount_gate(rtr):
    rtr.message.middleware(GateMiddleware())
    rtr.callback_query.middleware(GateMiddleware())

# –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–∏–¥–ª–≤–∞—Ä—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∫–ª–∞—Å—Å —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω
try:
    _mount_gate(router)
except Exception:
    # fail-open: –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å—Ç–∞–≤–∏–º –º–∏–¥–ª–≤–∞—Ä—å
    pass


@router.message(Command("about"))
async def cmd_about(m: Message):
    import os
    email = os.getenv("CONTACT_EMAIL") or "support@example.com"
    txt = (
        "¬´–ü–æ–º–Ω–∏¬ª ‚Äî —Ç—ë–ø–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏ –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º—ã—Å–ª–∏. "
        "–ú—ã –±–µ—Ä–µ–∂–Ω–æ –∏ –±–µ–∑–æ—Ü–µ–Ω–æ—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–µ–±—è, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n\n"
        "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:\n"
        "‚Ä¢ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ –∂–∏–≤—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã: —Ä–∞–∑–ª–æ–∂–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, –Ω–∞–π—Ç–∏ –æ–ø–æ—Ä—É, –Ω–∞–º–µ—Ç–∏—Ç—å 1 –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥.\n"
        "‚Ä¢ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª ‚Äî –º–∏–Ω–∏-–ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥ –∑–∞–ø—Ä–æ—Å—ã: —Å—Ç—Ä–µ—Å—Å, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ, —Ä–µ—à–µ–Ω–∏—è –∏ –¥—Ä.\n"
        "‚Ä¢ ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–µ –∞—É–¥–∏–æ-–ø–∞—É–∑—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–µ–±–µ –ø–µ—Ä–µ–¥—ã—à–∫—É.\n\n"
        "–ö–∞–∫ –º—ã –æ–±—â–∞–µ–º—Å—è:\n"
        "‚Äî –º—è–≥–∫–æ, –ø–æ –¥–µ–ª—É –∏ –±–µ–∑ –∫–ª–∏—à–µ; 1 —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑; –º–µ–Ω—å—à–µ –ª–µ–∫—Ü–∏–π ‚Äî –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏;\n"
        "‚Äî –±–µ—Ä–µ–∂–Ω—ã–µ —Ä–∞–º–∫–∏ –ö–ü–¢/–ê–ö–¢/–≥–µ—à—Ç–∞–ª—å—Ç–∞; –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —à–∞–≥–∏;\n"
        "‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ /privacy.\n\n"
        "–ú—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º ¬´–ü–æ–º–Ω–∏¬ª: –Ω–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, —Ä–µ–∂–∏–º –¥–Ω–µ–≤–Ω–∏–∫–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –±–æ–ª—å—à–µ –º–µ–¥–∏—Ç–∞—Ü–∏–π.\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: {email}"
    ).format(email=email)
    await m.answer(txt)

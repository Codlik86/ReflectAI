# app/bot.py
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.llm_adapter import LLMAdapter
from app.prompts import SYSTEM_PROMPT
from app.safety import is_crisis, CRISIS_REPLY
from app.db import db_session, User, Insight
from app.tools import (
    REFRAMING_STEPS, BODY_SCAN_TEXT,
    start_breathing_task, stop_user_task, has_running_task, debounce_ok
)

router = Router()
adapter = None
_reframe_state: dict[str, dict] = {}  # user_id -> {"step_idx": int, "answers": dict}

def tools_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –†–µ—Ñ—Ä–µ–π–º–∏–Ω–≥", callback_data="tool_reframe")],
        [InlineKeyboardButton(text="ü´Å –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 60 —Å–µ–∫", callback_data="tool_breathe")],
        [InlineKeyboardButton(text="üßò Body Scan (3‚Äì5 –º–∏–Ω)", callback_data="tool_bodyscan")],
    ])

def save_insight_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å–∞–π—Ç", callback_data="save_insight")],
        [InlineKeyboardButton(text="üß∞ –ü—Ä–∞–∫—Ç–∏–∫–∏", callback_data="open_tools")],
    ])

def stop_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπÔ∏è –°—Ç–æ–ø", callback_data="tool_stop")]
    ])

@router.message(CommandStart())
async def start(m: Message):
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(m.from_user.id)).first()
        if not u:
            s.add(User(tg_id=str(m.from_user.id), privacy_level="insights"))
            s.commit()
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ReflectAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ö–ü–¢.\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è ‚Äî —è —Ä—è–¥–æ–º.\n\n"
        "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /privacy /insights /export /delete_me /help",
        reply_markup=tools_keyboard()
    )

@router.message(Command("help"))
async def help_cmd(m: Message):
    await m.answer(
        "–Ø –ø–æ–º–æ–≥–∞—é –æ—Å–º—ã—Å–ª–∏–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—é –º—è–≥–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –∏–Ω—Å–∞–π—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É.\n"
        "–í –∫—Ä–∏–∑–∏—Å–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–º–æ—â–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /privacy ‚Äî —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (none | insights | all)\n"
        "‚Ä¢ /insights ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ\n"
        "‚Ä¢ /export ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–Ω—Å–∞–π—Ç—ã\n"
        "‚Ä¢ /delete_me ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ",
        reply_markup=tools_keyboard()
    )

@router.message(Command("test"))
async def test_cmd(m: Message):
    await m.answer("–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üëá", reply_markup=tools_keyboard())

# === PRIVACY ===
@router.message(Command("privacy"))
async def privacy_cmd(m: Message):
    await m.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–∏—à–ª–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º):\n"
        "‚Ä¢ none ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å\n"
        "‚Ä¢ insights ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ all ‚Äî –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–∏—á)\n"
    )

@router.message(F.text.in_({"none", "insights", "all"}))
async def set_privacy(m: Message):
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(m.from_user.id)).first()
        if u:
            u.privacy_level = m.text.strip()
            s.commit()
    await m.answer(f"–û–∫. –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {m.text.strip()}")

# === MAIN CHAT ===
@router.message(F.text)
async def on_text(m: Message):
    global adapter
    if adapter is None:
        adapter = LLMAdapter()

    user_id = str(m.from_user.id)
    text = (m.text or "").strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–∏ —Ä–µ—Ñ—Ä–µ–π–º–∏–Ω–≥–∞ ‚Äî –≤–µ–¥—ë–º –ø–æ —à–∞–≥–∞–º
    if user_id in _reframe_state:
        st = _reframe_state[user_id]
        step_idx = st["step_idx"]
        key, _prompt = REFRAMING_STEPS[step_idx]
        st["answers"][key] = text

        if step_idx + 1 < len(REFRAMING_STEPS):
            st["step_idx"] += 1
            _, next_prompt = REFRAMING_STEPS[st["step_idx"]]
            await m.answer(next_prompt, reply_markup=stop_keyboard())
            return
        else:
            a = st["answers"]
            summary = (
                "üß© –ò—Ç–æ–≥ —Ä–µ—Ñ—Ä–µ–π–º–∏–Ω–≥–∞\n\n"
                f"‚Ä¢ –ú—ã—Å–ª—å: {a.get('thought','‚Äî')}\n"
                f"‚Ä¢ –≠–º–æ—Ü–∏—è (1‚Äì10): {a.get('emotion','‚Äî')}\n"
                f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {a.get('behavior','‚Äî')}\n"
                f"‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å: {a.get('alternative','‚Äî')}\n\n"
                "–ö–∞–∫ —ç—Ç–æ –º–µ–Ω—è–µ—Ç —Ç–≤–æ–π –≤–∑–≥–ª—è–¥ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é? –ß—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
            )
            _reframe_state.pop(user_id, None)
            await m.answer(summary, reply_markup=save_insight_keyboard())
            return

    # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥
    if is_crisis(text):
        await m.answer(CRISIS_REPLY)
        return

    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user",   "content": text},
    ]

    try:
        answer = await adapter.chat(messages, temperature=0.7)
    except Exception as e:
        answer = f"–£–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏: {e}"

    await m.answer(answer, reply_markup=save_insight_keyboard())

# === INLINE: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å–∞–π—Ç ===
@router.callback_query(F.data == "save_insight")
async def on_save_insight(cb: CallbackQuery):
    msg = cb.message
    if not msg or not msg.text:
        await cb.answer("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", show_alert=True)
        return
    preview = msg.text.strip()
    if len(preview) > 1000:
        preview = preview[:1000]
    with db_session() as s:
        s.add(Insight(tg_id=str(cb.from_user.id), text=preview))
        s.commit()
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", show_alert=False)

# === INLINE: –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø—Ä–∞–∫—Ç–∏–∫ ===
@router.callback_query(F.data == "open_tools")
async def on_open_tools(cb: CallbackQuery):
    user_id = str(cb.from_user.id)
    if not debounce_ok(user_id):
        await cb.answer()  # —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏–º –¥–∞–±–ª-–∫–ª–∏–∫
        return
    await cb.message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∞–∫—Ç–∏–∫—É:", reply_markup=tools_keyboard())
    await cb.answer()

# === INLINE: —Ä–µ—Ñ—Ä–µ–π–º–∏–Ω–≥ ===
@router.callback_query(F.data == "tool_reframe")
async def on_tool_reframe(cb: CallbackQuery):
    user_id = str(cb.from_user.id)
    if not debounce_ok(user_id):
        await cb.answer()
        return
    # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è (–¥—ã—Ö–∞–Ω–∏–µ –∏ —Ç.–ø.) ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏–º
    stop_user_task(user_id)
    _reframe_state[user_id] = {"step_idx": 0, "answers": {}}
    _, prompt = REFRAMING_STEPS[0]
    await cb.message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—Ñ—Ä–µ–π–º–∏–Ω–≥: 4 —à–∞–≥–∞, –∑–∞–π–º—ë—Ç ~2 –º–∏–Ω—É—Ç—ã.", reply_markup=stop_keyboard())
    await cb.message.answer(prompt, reply_markup=stop_keyboard())
    await cb.answer()

# === INLINE: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Å—ë –∏ –∑–∞–ø—É—Å—Ç–∏–º –Ω–æ–≤—É—é) ===
@router.callback_query(F.data == "tool_breathe")
async def on_tool_breathe(cb: CallbackQuery):
    user_id = str(cb.from_user.id)
    if not debounce_ok(user_id):
        await cb.answer()
        return
    # –°–±—Ä–æ—Å –ª—é–±—ã—Ö —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    _reframe_state.pop(user_id, None)
    stop_user_task(user_id)

    await cb.message.answer("ü´Å –•–æ—Ä–æ—à–æ. –Ø –±—É–¥—É –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∏—Ç–º –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", reply_markup=stop_keyboard())
    start_breathing_task(cb.message, user_id)  # –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    await cb.answer()

# === INLINE: body scan (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç + –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–æ–ø–∞, –Ω–∞ —Å–ª—É—á–∞–π –±—É–¥—É—â–∏—Ö –∞—É–¥–∏–æ) ===
@router.callback_query(F.data == "tool_bodyscan")
async def on_tool_bodyscan(cb: CallbackQuery):
    user_id = str(cb.from_user.id)
    if not debounce_ok(user_id):
        await cb.answer()
        return
    # –°–±—Ä–æ—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    _reframe_state.pop(user_id, None)
    stop_user_task(user_id)
    await cb.message.answer(BODY_SCAN_TEXT, reply_markup=save_insight_keyboard())
    await cb.answer()

# === INLINE: –°—Ç–æ–ø (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª—é–±—É—é —Ç–µ–∫—É—â—É—é –ø—Ä–∞–∫—Ç–∏–∫—É) ===
@router.callback_query(F.data == "tool_stop")
async def on_tool_stop(cb: CallbackQuery):
    user_id = str(cb.from_user.id)
    # –û—Å—Ç–∞–Ω–æ–≤–∏–º –¥—ã—Ö–∞–Ω–∏–µ/—Ç–∞–π–º–µ—Ä—ã
    stop_user_task(user_id)
    # –°–±—Ä–æ—Å–∏–º —Ä–µ—Ñ—Ä–µ–π–º–∏–Ω–≥, –µ—Å–ª–∏ —à—ë–ª
    _reframe_state.pop(user_id, None)
    await cb.message.answer("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ?", reply_markup=tools_keyboard())
    await cb.answer()

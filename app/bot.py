from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand, FSInputFile
)

from app.llm_adapter import LLMAdapter
from app.safety import is_crisis, CRISIS_REPLY
from app.db import db_session, User
from app.rag_qdrant import search as rag_search
from app.prompts import POMNI_MASTER_PROMPT, ASSISTANT_PROMPT
from app.memory import (
    add_journal_entry, update_user_memory, get_user_memory,
    get_user_settings, set_user_tone, set_user_method,
    is_help_intent, log_event, MemoryManager
)

router = Router()
LLM = LLMAdapter()

# –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ (–¥–ª—è RAG –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
LAST_SUGGESTED = {}   # chat_id -> tag
# –†–µ–∂–∏–º –¥–Ω–µ–≤–Ω–∏–∫–∞
DIARY_MODE = {}       # chat_id -> bool
# –ë—É—Ñ–µ—Ä ¬´–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–∑–∞–Ω–Ω–æ–µ¬ª –¥–ª—è ask-–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞ —É—Ä–æ–≤–Ω–µ —á–∞—Ç–∞)
STAGED_DIARY = {}     # chat_id -> text

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard)
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"), KeyboardButton(text="üõ† –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")],
        [KeyboardButton(text="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")],
        [KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ],
    resize_keyboard=True
)

async def _set_bot_commands(bot):
    cmds = [
        BotCommand(command="start", description="–Ω–∞—á–∞—Ç—å"),
        BotCommand(command="tone", description="—Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"),
        BotCommand(command="method", description="–ø–æ–¥—Ö–æ–¥ (–ö–ü–¢/ACT/...)"),
        BotCommand(command="privacy", description="–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–Ω–µ–≤–Ω–∏–∫–∞"),
    ]
    await bot.set_my_commands(cmds)


# ---------- –û–Ω–±–æ—Ä–¥–∏–Ω–≥ ----------
@router.message(CommandStart())
async def start_cmd(message: Message):
    user_id = message.from_user.id
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(user_id)).first()
        if not u:
            s.add(User(tg_id=str(user_id)))
            s.commit()

    await _set_bot_commands(message.bot)
    DIARY_MODE[message.chat.id] = False

    # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    try:
        await message.answer_photo(
            FSInputFile("assets/illustrations/hello.png"),
            caption=("–ü—Ä–∏–≤–µ—Ç! –Ø **–ü–æ–º–Ω–∏** ‚Äî –¥—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥-–¥–Ω–µ–≤–Ω–∏–∫. "
                     "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —è —Ä—è–¥–æ–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –¥–∞–º –º–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.")
        )
    except Exception:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–º–Ω–∏ ‚Äî –¥—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥-–¥–Ω–µ–≤–Ω–∏–∫.")

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤ /tone (–º—è–≥–∫–∏–π üíõ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π üß∞, –∫–æ—Ä–æ—Ç–∫–∏–π ‚úÇÔ∏è, —á–µ—Å—Ç–Ω—ã–π üñ§). "
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ üõ† –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è?",
        reply_markup=MAIN_KB
    )


# ---------- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Å—Ç–∏–ª—è/–ø–æ–¥—Ö–æ–¥–∞ ----------
@router.message(Command("tone"))
async def tone_cmd(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—è–≥–∫–∏–π üíõ", callback_data="tone:soft"),
         InlineKeyboardButton(text="–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π üß∞", callback_data="tone:practical")],
        [InlineKeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–∏–π ‚úÇÔ∏è", callback_data="tone:concise"),
         InlineKeyboardButton(text="–ß–µ—Å—Ç–Ω—ã–π üñ§", callback_data="tone:honest")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("tone:"))
async def tone_pick(cb: CallbackQuery):
    tone = cb.data.split(":")[1]
    set_user_tone(cb.from_user.id, tone)
    await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –ü–æ–¥—Å—Ç—Ä–æ—é –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ —ç—Ç–æ—Ç —Å—Ç–∏–ª—å.")
    await cb.answer()

@router.message(Command("method"))
async def method_cmd(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–ü–¢", callback_data="method:cbt"),
         InlineKeyboardButton(text="ACT", callback_data="method:act")],
        [InlineKeyboardButton(text="–ì–µ—à—Ç–∞–ª—å—Ç", callback_data="method:gestalt"),
         InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π", callback_data="method:supportive")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥—Ö–æ–¥:", reply_markup=kb)

@router.callback_query(F.data.startswith("method:"))
async def method_pick(cb: CallbackQuery):
    method = cb.data.split(":")[1]
    set_user_method(cb.from_user.id, method)
    await cb.message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –ë—É–¥—É –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥.")
    await cb.answer()


# ---------- –ù–∞–≤–∏–≥–∞—Ü–∏—è ----------
@router.message(Command("diary"))
@router.message(F.text == "üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
async def enter_diary(message: Message):
    DIARY_MODE[message.chat.id] = True
    await message.answer(
        "–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é üíõ –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –¥—É—à–µ. "
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.",
        reply_markup=MAIN_KB
    )

@router.message(Command("tools"))
@router.message(F.text == "üõ† –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
async def tools_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢—Ä–µ–≤–æ–≥–∞/—Å—Ç—Ä–µ—Å—Å", callback_data="triage:stress"),
         InlineKeyboardButton(text="–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", callback_data="triage:self")],
        [InlineKeyboardButton(text="–û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="triage:rel"),
         InlineKeyboardButton(text="–°–æ–Ω", callback_data="triage:sleep")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="triage:prod"),
         InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="triage:other")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂—É –ø—Ä–∞–∫—Ç–∏–∫—É:", reply_markup=kb)

@router.callback_query(F.data.startswith("triage:"))
async def triage_pick(cb: CallbackQuery):
    topic = cb.data.split(":")[1]
    topic_q = {
        "stress": "–°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏ –∏ —Å—Ç—Ä–µ—Å—Å-–∫–æ—É–ø–∏–Ω–≥",
        "self": "–°–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞ –∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞",
        "rel": "–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –≥—Ä–∞–Ω–∏—Ü—ã",
        "sleep": "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º",
        "prod": "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "other": "–°–∞–º–æ–ø–æ–º–æ—â—å –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
    }.get(topic, "–°–∞–º–æ–ø–æ–º–æ—â—å")
    try:
        chunks = await rag_search(topic_q, last_suggested_tag=LAST_SUGGESTED.get(cb.message.chat.id))
    except Exception:
        chunks = []
    ctx = "\n\n".join([c.get("text","") for c in chunks])[:1400]
    reply = await LLM.complete_chat(
        system=ASSISTANT_PROMPT.format(
            tone_desc="—Ç—ë–ø–ª—ã–π –∏ —Å–ø–æ–∫–æ–π–Ω—ã–π", method_desc="–ö–ü–¢/ACT/–≥–µ—à—Ç–∞–ª—å—Ç ‚Äî –ø–æ –º–µ—Å—Ç—É"
        ),
        user=f"–¢–µ–º–∞: {topic_q}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
    )
    await cb.message.answer(reply)
    await cb.answer()


# ---------- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (—Å–≤–æ–±–æ–¥–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ----------
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ë–ï–ó —Å–ª–µ—à–∞ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã)
@router.message(F.text & ~F.text.startswith("/"))
async def diary_or_general(message: Message):
    text = message.text or ""
    if is_crisis(text):
        await message.answer(CRISIS_REPLY)
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    DIARY_MODE.setdefault(chat_id, True)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª

    # –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    privacy = MemoryManager().get_privacy(str(user_id))  # ask|all|none

    if DIARY_MODE[chat_id]:
        # 1) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–±—É—Ñ–µ—Ä –ø–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        if privacy == "all":
            add_journal_entry(user_id, text)
        elif privacy == "ask":
            STAGED_DIARY[chat_id] = text  # –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

        # 2) –û–±–Ω–æ–≤–ª—è–µ–º ¬´–º—è–≥–∫—É—é¬ª –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ JSON-–¥–∞–Ω–Ω—ã–µ)
        update_user_memory(user_id, new_text=text)
        summary = get_user_memory(user_id)  # dict (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)

        # 3) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–Ω–∞/–ø–æ–¥—Ö–æ–¥–∞
        st = get_user_settings(user_id) or {}
        tone_key = (st.get("tone") or "soft").lower()
        method_key = (st.get("method") or "cbt").lower()

        tone_desc = {
            "soft": "–æ—á–µ–Ω—å —Ç—ë–ø–ª—ã–π –∏ –±–µ—Ä–µ–∂–Ω—ã–π",
            "practical": "—Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è",
            "concise": "–∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ –¥–µ–ª—É",
            "honest": "–ø—Ä—è–º–æ–π, –±–µ–∑ –ø—Ä–∏—É–∫—Ä–∞—Å, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π",
        }.get(tone_key, "—Ç—ë–ø–ª—ã–π")

        method_desc = {
            "cbt": "–ö–ü–¢ (–º—ã—Å–ª–∏‚Üî—ç–º–æ—Ü–∏–∏‚Üî–ø–æ–≤–µ–¥–µ–Ω–∏–µ)",
            "act": "ACT (—Ü–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–∏–Ω—è—Ç–∏–µ, –¥–µ—Ñ—É–∑–∏—è)",
            "gestalt": "–≥–µ—à—Ç–∞–ª—å—Ç (–æ—Å–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç)",
            "supportive": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π",
        }.get(method_key, "–ö–ü–¢")

        # 4) –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG
        try:
            chunks = await rag_search(text, last_suggested_tag=LAST_SUGGESTED.get(chat_id))
        except Exception:
            chunks = []
        ctx = "\n\n".join([c.get("text","") for c in chunks])[:1400]

        # 5) Friend-first vs –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        system = POMNI_MASTER_PROMPT.format(tone_desc=tone_desc, method_desc=method_desc)
        if is_help_intent(text):
            system = ASSISTANT_PROMPT.format(tone_desc=tone_desc, method_desc=method_desc)

        reply = await LLM.complete_chat(
            system=system,
            user=f"–ü–∞–º—è—Ç—å:\n{summary}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
        )
        await message.answer(reply, reply_markup=MAIN_KB)
        try:
            log_event(user_id, "diary_message", "")
        except Exception as e:
            print(f"[bot] log_event error: {e}")

        # 6) –ï—Å–ª–∏ —Ä–µ–∂–∏–º ask ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–≤–Ω—ã–º –∫–ª–∏–∫–æ–º
        if privacy == "ask":
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="diary_save:yes"),
                 InlineKeyboardButton(text="üö´ –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data="diary_save:no")]
            ])
        return

    # Fallback (–µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ)
    try:
        chunks = await rag_search(text, last_suggested_tag=LAST_SUGGESTED.get(chat_id))
    except Exception:
        chunks = []
    ctx = "\n\n".join([c.get("text","") for c in chunks])[:1400]
    reply = await LLM.complete_chat(
        system=POMNI_MASTER_PROMPT.format(tone_desc="—Ç—ë–ø–ª—ã–π", method_desc="–ö–ü–¢"),
        user=text + "\n\n" + ctx
    )
    await message.answer(reply, reply_markup=MAIN_KB)


# ---------- Callback: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–∏ privacy=ask ----------
@router.callback_query(F.data.startswith("diary_save:"))
async def diary_save_cb(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    action = cb.data.split(":")[1]
    text = STAGED_DIARY.get(chat_id)
    if action == "yes" and text:
        add_journal_entry(cb.from_user.id, text)
        STAGED_DIARY.pop(chat_id, None)
        await cb.message.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É.")
    else:
        STAGED_DIARY.pop(chat_id, None)
        try:
            await cb.message.edit_text("–û–∫, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é.")
        except Exception:
            await cb.message.answer("–û–∫, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é.")
    await cb.answer()


# ====== –ü–æ–º–Ω–∏: –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –¥–Ω–µ–≤–Ω–∏–∫ ======
_mem = MemoryManager()

@router.message(Command("privacy"))
async def cmd_privacy(message: Message, command: CommandObject):
    if _mem is None:
        await message.answer("–ü–∞–º—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    tg_id = str(message.from_user.id)
    arg = (command.args or "").strip().lower()

    if not arg:
        mode = _mem.get_privacy(tg_id)
        text = (
            "–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: *{mode}*\n"
            "–í–∞—Ä–∏–∞–Ω—Ç—ã: `ask` (—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å), `none` (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å), `all` (—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å—ë).\n"
            "–ü—Ä–∏–º–µ—Ä: `/privacy ask`"
        ).format(mode=mode)
        await message.answer(text, parse_mode="Markdown")
        return

    if arg not in {"ask","none","all","insights"}:
        await message.answer("–í—ã–±–µ—Ä–∏: ask | none | all")
        return

    _mem.set_privacy(tg_id, arg)
    await message.answer("–û–∫, —Ä–µ–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: *{arg}*".format(arg=arg), parse_mode="Markdown")
import os
import asyncio
import sqlite3
from contextlib import contextmanager
from collections import defaultdict, deque
from typing import Dict, Deque, Optional

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest  # <-- –¥–æ–±–∞–≤–∏–ª–∏

# --- Import system prompt and topics from your existing files ---
try:
    from app.prompts import SYSTEM_PROMPT  # preferred path
except Exception:
    try:
        from prompts import SYSTEM_PROMPT   # fallback if running flat
    except Exception:
        SYSTEM_PROMPT = (
            "–¢—ã ‚Äî –±–µ—Ä–µ–∂–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ReflectAI. "
            "–ù–µ –¥–∞—ë—à—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—à—å –≤—Ä–∞—á–∞. –ü—Ä–∏ —Ä–∏—Å–∫–∞—Ö –º—è–≥–∫–æ —Å–æ–≤–µ—Ç—É–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
        )

try:
    from app.exercises import TOPICS  # preferred path
except Exception:
    from exercises import TOPICS      # fallback if running flat

# --- Local adapters (LLM) ---
try:
    from app.llm_adapter import chat_with_style
except Exception:
    from llm_adapter import chat_with_style

# --- Optional RAG (defensive import) ---
rag_available = False
rag_search_fn = None
try:
    from app import rag_qdrant
    rag_available = True
    rag_search_fn = rag_qdrant.search
except Exception:
    try:
        import rag_qdrant
        rag_available = True
        rag_search_fn = rag_qdrant.search
    except Exception:
        rag_available = False
        rag_search_fn = None

router = Router()

# --- Constants / Config ---
EMO_HERB = "üåø"

# Images via ENV (optional)
ONB_IMAGES = {
    "cover": os.getenv("ONB_IMG_COVER", ""),
    "talk": os.getenv("ONB_IMG_TALK", ""),
    "work": os.getenv("ONB_IMG_WORK", ""),
    "meditations": os.getenv("ONB_IMG_MEDIT", ""),
}

VOICE_STYLES = {
    "default": "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –±–µ—Ä–µ–∂–Ω—ã–π. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –±–µ–∑ –∫–ª–∏—à–µ –∏ –±–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–æ–≤.",
    "friend":  "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: —Ç—ë–ø–ª—ã–π –¥—Ä—É–≥. –ü—Ä–æ—â–µ —Å–ª–æ–≤–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º—è–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ë–µ–∑ –Ω–∞–≤—è–∑—á–∏–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.",
    "pro":     "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ê–∫–∫—É—Ä–∞—Ç–Ω–æ, –ø–æ –¥–µ–ª—É, —Ç–µ—Ä–º–∏–Ω—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º.",
    "dark":    "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: –≤–∑—Ä–æ—Å–ª–∞—è –∏—Ä–æ–Ω–∏—è 18+. –ò—Ä–æ–Ω–∏—á–Ω–æ, –Ω–æ –±–µ—Ä–µ–∂–Ω–æ; –Ω–∏–∫–∞–∫–æ–π —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏.",
}

REFLECTIVE_SUFFIX = (
    "\n\n–†–µ–∂–∏–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: –∑–∞–¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É, –ø–æ–º–æ–≥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏."
)

# --- Simple memory (per-chat short history) ---
DIALOG_HISTORY: Dict[int, Deque[Dict[str, str]]] = defaultdict(lambda: deque(maxlen=12))
CHAT_MODE: Dict[int, str] = defaultdict(lambda: "talk")

# --- SQLite prefs ---
DB_PATH = os.getenv("BOT_DB_PATH", "bot.db")

@contextmanager
def db_session():
    conn = sqlite3.connect(DB_PATH)
    try:
        yield conn
    finally:
        conn.close()

def _ensure_tables():
    with db_session() as s:
        s.execute("""
        CREATE TABLE IF NOT EXISTS user_prefs (
            tg_id TEXT PRIMARY KEY,
            consent_save_all INTEGER DEFAULT 0,
            goals TEXT DEFAULT '',
            voice_style TEXT DEFAULT 'default',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        """)
        try:
            s.execute("ALTER TABLE user_prefs ADD COLUMN voice_style TEXT DEFAULT 'default';")
        except Exception:
            pass
        s.commit()

def _get_user_voice(tg_id: str) -> str:
    _ensure_tables()
    with db_session() as s:
        row = s.execute("SELECT voice_style FROM user_prefs WHERE tg_id=?", (tg_id,)).fetchone()
        return (row[0] if row and row[0] else "default")

def _set_user_voice(tg_id: str, style: str) -> None:
    _ensure_tables()
    with db_session() as s:
        s.execute("""
            INSERT INTO user_prefs (tg_id, voice_style) VALUES (?, ?)
            ON CONFLICT(tg_id) DO UPDATE SET voice_style=excluded.voice_style, updated_at=CURRENT_TIMESTAMP
        """, (tg_id, style))
        s.commit()

# --- Keyboards ---

def kb_main() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"{EMO_HERB} –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"), KeyboardButton(text="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")],
        ],
        resize_keyboard=True
    )

def kb_voice() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéöÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="voice:set:default")],
        [InlineKeyboardButton(text="ü§ù –î—Ä—É–≥",         callback_data="voice:set:friend")],
        [InlineKeyboardButton(text="üß† –ü—Ä–æ",          callback_data="voice:set:pro")],
        [InlineKeyboardButton(text="ÔøΩÔøΩÔ∏è –ò—Ä–æ–Ω–∏—è 18+",   callback_data="voice:set:dark")],
    ])

def kb_goals() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üò∞ –¢—Ä–µ–≤–æ–≥–∞", callback_data="goal:anxiety"),
         InlineKeyboardButton(text="üåÄ –°—Ç—Ä–µ—Å—Å", callback_data="goal:stress")],
        [InlineKeyboardButton(text="üí§ –°–æ–Ω", callback_data="goal:sleep"),
         InlineKeyboardButton(text="üß≠ –Ø—Å–Ω–æ—Å—Ç—å", callback_data="goal:clarity")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="goal_done")],
    ])

def _topic_title(tid: str) -> str:
    t = TOPICS.get(tid, {})
    title = t.get("title", tid)
    emoji = t.get("emoji") or EMO_HERB
    return f"{emoji} {title}"

def kb_topics() -> InlineKeyboardMarkup:
    rows = []
    # show reflection first if present
    ordered_ids = list(TOPICS.keys())
    if "reflection" in ordered_ids:
        ordered_ids.remove("reflection")
        ordered = ["reflection"] + ordered_ids
    else:
        ordered = ordered_ids
    for tid in ordered:
        rows.append([InlineKeyboardButton(text=_topic_title(tid), callback_data=f"topic:{tid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_exercises(tid: str) -> InlineKeyboardMarkup:
    t = TOPICS.get(tid, {})
    exs = t.get("exercises", []) or []
    rows = []
    for ex in exs:
        eid = ex["id"]
        rows.append([InlineKeyboardButton(text=f"‚Ä¢ {ex['title']}", callback_data=f"ex:{tid}:{eid}:start")])
    # back
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="topics:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def stop_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπÔ∏è –°—Ç–æ–ø", callback_data="reflect:stop")]
    ])

def step_keyboard(tid: str, eid: str, idx: int, total: int) -> InlineKeyboardMarkup:
    if idx + 1 < total:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data=f"ex:{tid}:{eid}:step:{idx+1}")],
            [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"ex:{tid}:{eid}:finish")],
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"ex:{tid}:{eid}:finish")],
        ])

# --- Utils ---

async def silent_ack(cb: CallbackQuery):
    try:
        await cb.answer()
    except Exception:
        pass

def _push(chat_id: int, role: str, content: str):
    DIALOG_HISTORY[chat_id].append({"role": role, "content": content})

def get_home_text() -> str:
    return (
        f"{EMO_HERB} –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —á—Ç–æ –¥–∞–ª—å—à–µ:\n\n"
        "‚Ä¢ ¬´üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –¥—É—à–µ.\n"
        "‚Ä¢ ¬´üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏ –ø—Ä–æ–π–¥–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n"
        "‚Ä¢ ¬´üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª ‚Äî —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –≤—ã–¥–æ—Ö–Ω—É—Ç—å.\n"
        "\n–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ /voice —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞."
    )

# --- Handlers ---

@router.message(Command("start"))
async def on_start(m: Message):
    # Screen 1 ‚Äî cover
    try:
        if ONB_IMAGES["cover"]:
            await m.answer_photo(ONB_IMAGES["cover"], caption="–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∏–º?")
        else:
            await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∏–º?")
    except Exception:
        await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∏–º?")
    # Screen 2 ‚Äî quick goals
    await m.answer("–ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ? –û—Ç–º–µ—Ç—å –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=kb_goals())

@router.callback_query(F.data.startswith("goal:"))
async def onb_goal_pick(cb: CallbackQuery):
    # –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –ø—ã—Ç–∞–µ–º—Å—è ¬´–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å¬ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
    # –Ω–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É TG
    await silent_ack(cb)
    try:
        await cb.message.edit_reply_markup(reply_markup=kb_goals())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –Ω–µ –º–µ–Ω—è–µ–º
            return
        raise

@router.callback_query(F.data == "goal_done")
async def onb_goal_done(cb: CallbackQuery):
    await silent_ack(cb)
    # Screen 3 ‚Äî What next?
    try:
        if ONB_IMAGES["talk"]:
            await cb.message.answer_photo(ONB_IMAGES["talk"], caption=get_home_text(), reply_markup=kb_main())
        else:
            await cb.message.answer(get_home_text(), reply_markup=kb_main())
    except Exception:
        await cb.message.answer(get_home_text(), reply_markup=kb_main())

# --- Voice selection ---

@router.message(Command("voice"))
async def on_cmd_voice(m: Message):
    cur = _get_user_voice(str(m.from_user.id))
    txt = f"–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≥–æ–ª–æ—Å–∞. –¢–µ–∫—É—â–∏–π: <b>{cur}</b>."
    await m.answer(txt, reply_markup=kb_voice())

@router.callback_query(F.data.startswith("voice:set:"))
async def on_voice_set(cb: CallbackQuery):
    await silent_ack(cb)
    style = cb.data.split(":", 2)[2]
    if style not in VOICE_STYLES:
        await cb.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑: /voice")
        return
    _set_user_voice(str(cb.from_user.id), style)
    await cb.message.answer(f"–°—Ç–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: <b>{style}</b> ‚úÖ")

# --- –†–∞–∑–¥–µ–ª ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª: —Ç–µ–º—ã –∏ —Å—Ç–µ–ø–ø–µ—Ä—ã ---

@router.message(F.text == f"{EMO_HERB} –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
async def on_work_section(m: Message):
    # image + caption
    try:
        if ONB_IMAGES["work"]:
            await m.answer_photo(ONB_IMAGES["work"], caption="–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
        else:
            await m.answer("–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
    except Exception:
        await m.answer("–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())

@router.callback_query(F.data == "topics:back")
async def on_topics_back(cb: CallbackQuery):
    await silent_ack(cb)
    try:
        await cb.message.edit_text("–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        raise

@router.callback_query(F.data.startswith("topic:"))
async def on_topic_pick(cb: CallbackQuery):
    await silent_ack(cb)
    tid = cb.data.split(":", 1)[1]
    t = TOPICS.get(tid)
    if not t:
        await cb.message.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–µ–º—É. –í–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É:", reply_markup=kb_topics())
        return

    # chat-type topics (e.g., 'reflection') ‚Äî route to flow
    if t.get("type") == "chat":
        if tid == "reflection":
            # Start reflection flow
            await reflect_start(cb)
            return
        else:
            await cb.message.answer("–≠—Ç–∞ —Ç–µ–º–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —á–∞—Ç. –ù–∞–ø–∏—à–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º.")
            return

    intro = t.get("intro") or _topic_title(tid)
    text = f"<b>{_topic_title(tid)}</b>\n\n{intro}"
    try:
        await cb.message.edit_text(text, reply_markup=kb_exercises(tid))
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        # –ù–∞ –∏–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await cb.message.answer(text, reply_markup=kb_exercises(tid))
        except Exception:
            raise

# Exercise stepper state (in-memory)
EX_STATE: Dict[int, Dict[str, object]] = defaultdict(dict)

def _ex_steps(tid: str, eid: str):
    t = TOPICS.get(tid, {})
    for ex in t.get("exercises", []) or []:
        if ex["id"] == eid:
            return ex, ex.get("steps", []) or []
    return None, []

@router.callback_query(F.data.startswith("ex:"))
async def on_ex_click(cb: CallbackQuery):
    await silent_ack(cb)
    parts = cb.data.split(":")
    # formats:
    # ex:<tid>:<eid>:start
    # ex:<tid>:<eid>:step:<idx>
    # ex:<tid>:<eid>:finish
    if len(parts) < 4:
        await cb.message.answer("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")
        return
    _, tid, eid, action, *rest = parts

    ex, steps = _ex_steps(tid, eid)
    if not ex:
        await cb.message.answer("–ù–µ –Ω–∞—à—ë–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –í–µ—Ä–Ω—ë–º—Å—è –∫ —Ç–µ–º–µ.", reply_markup=kb_exercises(tid))
        return

    if action == "start":
        EX_STATE[cb.message.chat.id] = {"tid": tid, "eid": eid, "idx": 0}
        intro = ex.get("intro") or ""
        head = f"<b>{_topic_title(tid)}</b>\n‚Äî {ex['title']}\n\n{intro}"
        await cb.message.answer(head)
        # first step
        step_text = steps[0] if steps else "–®–∞–≥–æ–≤ –Ω–µ—Ç."
        await cb.message.answer(step_text, reply_markup=step_keyboard(tid, eid, 0, len(steps)))
        return

    if action == "step":
        if not rest:
            await cb.message.answer("–ù—É–∂–µ–Ω –Ω–æ–º–µ—Ä —à–∞–≥–∞.")
            return
        try:
            idx = int(rest[0])
        except Exception:
            idx = 0
        if idx < 0 or idx >= len(steps):
            await cb.message.answer("–≠—Ç–æ –≤—Å–µ —à–∞–≥–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º?", reply_markup=step_keyboard(tid, eid, len(steps)-1, len(steps)))
            return
        EX_STATE[cb.message.chat.id] = {"tid": tid, "eid": eid, "idx": idx}
        step_text = steps[idx]
        await cb.message.answer(step_text, reply_markup=step_keyboard(tid, eid, idx, len(steps)))
        return

    if action == "finish":
        EX_STATE.pop(cb.message.chat.id, None)
        await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—ë–º—Å—è –∫ —Ç–µ–º–µ?", reply_markup=kb_exercises(tid))
        return

# --- Reflection mini-flow (short 4 steps) ---

REFRAMING_STEPS = [
    ("situation", "–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –≤ –¥–≤—É—Ö-—Ç—Ä—ë—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."),
    ("thought", "–ö–∞–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º—ã—Å–ª—å –≤–æ–∑–Ω–∏–∫–ª–∞?"),
    ("evidence", "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Ñ–∞–∫—Ç—ã ¬´–∑–∞¬ª –∏ ¬´–ø—Ä–æ—Ç–∏–≤¬ª —ç—Ç–æ–π –º—ã—Å–ª–∏?"),
    ("alternate", "–ö–∞–∫ –º–æ–≥–ª–∞ –±—ã –∑–≤—É—á–∞—Ç—å –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º—ã—Å–ª—å?"),
]
_reframe_state: Dict[str, Dict[str, object]] = {}

@router.callback_query(F.data == "reflect:start")
async def reflect_start(cb: CallbackQuery):
    await silent_ack(cb)
    chat_id = cb.message.chat.id
    tg_id = str(cb.from_user.id)
    CHAT_MODE[chat_id] = "reflection"
    _reframe_state[tg_id] = {"step_idx": 0, "answers": {}}
    await cb.message.answer("–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (4 —à–∞–≥–∞, ~2 –º–∏–Ω—É—Ç—ã).", reply_markup=stop_keyboard())
    await cb.message.answer(REFRAMING_STEPS[0][1], reply_markup=stop_keyboard())

@router.callback_query(F.data == "reflect:stop")
async def reflect_stop(cb: CallbackQuery):
    await silent_ack(cb)
    chat_id = cb.message.chat.id
    CHAT_MODE[chat_id] = "talk"
    await cb.message.answer("–û–∫–µ–π, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å. –ú–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ. üí¨")

# --- TALK: main text handler ---

@router.message(F.text == "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
async def on_talk_enter(m: Message):
    try:
        if ONB_IMAGES["talk"]:
            await m.answer_photo(ONB_IMAGES["talk"], caption="–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?")
        else:
            await m.answer("–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?")
    except Exception:
        await m.answer("–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?")

@router.message(F.text)
async def on_text(m: Message):
    chat_id = m.chat.id
    tg_id = str(m.from_user.id)
    user_text = (m.text or "").strip()

    # Reflection steps
    if CHAT_MODE.get(chat_id) == "reflection":
        state = _reframe_state.setdefault(tg_id, {"step_idx": 0, "answers": {}})
        step_idx: int = int(state.get("step_idx", 0))
        answers: Dict[str, str] = state.get("answers", {})  # type: ignore

        key, _prompt = REFRAMING_STEPS[step_idx]
        answers[key] = user_text
        step_idx += 1

        if step_idx >= len(REFRAMING_STEPS):
            CHAT_MODE[chat_id] = "talk"
            _reframe_state.pop(tg_id, None)
            summary = (
                f"–°–∏—Ç—É–∞—Ü–∏—è: {answers.get('situation','')}\n"
                f"–ú—ã—Å–ª—å: {answers.get('thought','')}\n"
                f"–§–∞–∫—Ç—ã: {answers.get('evidence','')}\n"
                f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {answers.get('alternate','')}\n\n"
                "–ö–∞–∫ —ç—Ç–æ –æ—â—É—â–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å?"
            )
            await m.answer(summary, reply_markup=stop_keyboard())
            return
        else:
            state["step_idx"] = step_idx
            state["answers"] = answers
            await m.answer(REFRAMING_STEPS[step_idx][1], reply_markup=stop_keyboard())
            return

    # Soft RAG
    rag_ctx = ""
    if rag_available and rag_search_fn:
        try:
            rag_ctx = await rag_search_fn(user_text, k=3, max_chars=1200)
        except Exception:
            rag_ctx = ""

    # Style
    style_key = _get_user_voice(tg_id)
    style_hint = VOICE_STYLES.get(style_key, VOICE_STYLES["default"])

    # System with (optional) reflective suffix and RAG
    sys_prompt = SYSTEM_PROMPT
    if CHAT_MODE.get(chat_id) == "reflection":
        sys_prompt += REFLECTIVE_SUFFIX
    if rag_ctx:
        sys_prompt = (
            sys_prompt
            + "\n\n[–ö–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é]\n"
            + rag_ctx
        ).strip()

    # Short history
    history = list(DIALOG_HISTORY[chat_id])
    messages = [{"role": "system", "content": sys_prompt}] + history + [{"role": "user", "content": user_text}]

    # LLM
    try:
        answer = await chat_with_style(messages=messages, style_hint=style_hint, temperature=0.6)
    except Exception:
        answer = "–ü–æ—Ö–æ–∂–µ, –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –Ø —Ä—è–¥–æ–º üåø –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?"

    _push(chat_id, "user", user_text)
    _push(chat_id, "assistant", answer)
    await m.answer(answer)
    return

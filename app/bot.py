# app/bot.py
# -*- coding: utf-8 -*-
from __future__ import annotations

from collections import defaultdict, deque
from typing import Dict, Deque, List

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import text as sql_text

from app.llm_adapter import LLMAdapter
from app.prompts import SYSTEM_PROMPT
from app.safety import is_crisis, CRISIS_REPLY
from app.db import db_session, User, Insight
from app.tools import (
    REFRAMING_STEPS,
    stop_user_task,
    debounce_ok,
)
from app.rag_qdrant import search as rag_search

router = Router()
adapter: LLMAdapter | None = None

# -------------------- –ö–û–†–û–¢–ö–ê–Ø –ü–ê–ú–Ø–¢–¨ (RAM) --------------------
# –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Ä–µ–ø–ª–∏–∫ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (–¥–ª—è ¬´–¥–µ—Ä–∂–∏–º —Ç–µ–º—É¬ª)
DIALOG_HISTORY: Dict[int, Deque[Dict[str, str]]] = defaultdict(lambda: deque(maxlen=8))

def _push(chat_id: int, role: str, content: str) -> None:
    if content:
        DIALOG_HISTORY[chat_id].append({"role": role, "content": content})

# -------------------- ¬´–°–£–ü–ï–†–ü–ê–ú–Ø–¢–¨¬ª (SQLite) --------------------
def _ensure_tables():
    with db_session() as s:
        s.execute(sql_text("""
        CREATE TABLE IF NOT EXISTS user_prefs (
          tg_id TEXT PRIMARY KEY,
          consent_save_all INTEGER DEFAULT 0,
          goals TEXT DEFAULT '',
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        """))
        s.execute(sql_text("""
        CREATE TABLE IF NOT EXISTS dialog_turns (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          tg_id TEXT NOT NULL,
          role TEXT NOT NULL,
          text TEXT NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        """))
        s.commit()

def _can_save_full(tg_id: str) -> bool:
    _ensure_tables()
    with db_session() as s:
        row = s.execute(
            sql_text("SELECT consent_save_all FROM user_prefs WHERE tg_id=:tg"),
            {"tg": tg_id}
        ).fetchone()
        return bool(row and row[0])

def _save_turn(tg_id: str, role: str, text: str) -> None:
    if not _can_save_full(tg_id):
        return
    _ensure_tables()
    with db_session() as s:
        s.execute(
            sql_text("INSERT INTO dialog_turns (tg_id, role, text) VALUES (:tg, :r, :t)"),
            {"tg": tg_id, "r": role, "t": (text or "")[:4000]},
        )
        s.commit()

def _load_recent_turns(tg_id: str, days: int = 7, limit: int = 24) -> List[Dict[str, str]]:
    _ensure_tables()
    with db_session() as s:
        q = f"""
          SELECT role, text FROM dialog_turns
          WHERE tg_id = :tg AND created_at >= datetime('now','-{int(days)} days')
          ORDER BY id DESC LIMIT {int(limit)}
        """
        rows = s.execute(sql_text(q), {"tg": tg_id}).fetchall() or []
    return [{"role": r, "content": t} for (r, t) in reversed(rows)]

# -------------------- –í–ù–£–¢–†–ï–ù–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø --------------------
# –ø—Ä–æ—Å—Ç–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π ¬´–†–µ—Ñ–ª–µ–∫—Å–∏—è¬ª
_reframe_state: Dict[str, Dict] = {}  # user_id -> {"step_idx": int, "answers": dict}

# -------------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ --------------------
def tools_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí° –†–µ—Ñ–ª–µ–∫—Å–∏—è", callback_data="tool_reframe"),
            InlineKeyboardButton(text="üß© –ú–∏–∫—Ä–æ—à–∞–≥",  callback_data="tool_micro"),
        ],
    ])

def stop_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπÔ∏è –°—Ç–æ–ø", callback_data="tool_stop")]
    ])

def save_insight_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å–∞–π—Ç", callback_data="save_insight")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É", callback_data="open_tools")],
    ])

# -------------------- –û–ù–ë–û–†–î–ò–ù–ì (–∫–∞–∫ —É ¬´–î–Ω–µ–≤–Ω–∏—á–∫–∞¬ª) --------------------
ONB_IMAGES = {
    # –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    "cover": "https://file.garden/aML3M6Sqrg21TaIT/kind-creature%20(3).png",
}

def onb_start_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëã –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!", callback_data="onb_hi")]
    ])

def onb_goals_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßò –°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É", callback_data="goal:anxiety")],
        [InlineKeyboardButton(text="üò¥ –£–ª—É—á—à–∏—Ç—å —Å–æ–Ω", callback_data="goal:sleep")],
        [InlineKeyboardButton(text="üåü –ü–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É", callback_data="goal:self")],
        [InlineKeyboardButton(text="üéØ –ù–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é", callback_data="goal:motivation")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="goal_done")],
    ])

def _set_consent(tg_id: str, yes: bool) -> None:
    _ensure_tables()
    with db_session() as s:
        s.execute(sql_text("""
            INSERT INTO user_prefs (tg_id, consent_save_all)
            VALUES (:tg, :c)
            ON CONFLICT(tg_id) DO UPDATE SET consent_save_all=:c, updated_at=CURRENT_TIMESTAMP
        """), {"tg": tg_id, "c": 1 if yes else 0})
        s.commit()

def _append_goal(tg_id: str, goal_code: str) -> None:
    _ensure_tables()
    with db_session() as s:
        row = s.execute(sql_text("SELECT goals FROM user_prefs WHERE tg_id=:tg"), {"tg": tg_id}).fetchone()
        goals = set(((row[0] or "") if row else "").split(","))
        if goal_code not in goals:
            goals.add(goal_code)
        s.execute(sql_text("""
            INSERT INTO user_prefs (tg_id, goals)
            VALUES (:tg, :g)
            ON CONFLICT(tg_id) DO UPDATE SET goals=:g, updated_at=CURRENT_TIMESTAMP
        """), {"tg": tg_id, "g": ",".join([g for g in goals if g])})
        s.commit()

# -------------------- –ö–û–ú–ê–ù–î–´ --------------------
@router.message(CommandStart())
async def start(m: Message):
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(m.from_user.id)).first()
        if not u:
            s.add(User(tg_id=str(m.from_user.id), privacy_level="insights"))
            s.commit()

    # –æ—á–∏—Å—Ç–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞–º—è—Ç—å —á–∞—Ç–∞
    DIALOG_HISTORY.pop(m.chat.id, None)

    caption = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –≤—ã—Å–ª—É—à–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω–æ–µ ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è.\n\n"
        "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫—É:\n"
        "https://tinyurl.com/5n98a7j8 ‚Ä¢ https://tinyurl.com/5n98a7j8\n\n"
        "–°–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π ‚Äî –∏ —è –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂—É üëá"
    )
    try:
        await m.answer_photo(ONB_IMAGES["cover"], caption=caption, reply_markup=onb_start_kb())
    except Exception:
        await m.answer(caption, reply_markup=onb_start_kb())

@router.callback_query(F.data == "onb_hi")
async def onb_hi(cb: CallbackQuery):
    tg_id = str(cb.from_user.id)
    _set_consent(tg_id, True)  # –≤–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    txt = (
        "–ö–ª–∞—Å—Å! –¢–æ–≥–¥–∞ –ø–∞—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ üõ†Ô∏è\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª:"
    )
    await cb.message.answer(txt, reply_markup=onb_goals_kb())
    await cb.answer()

@router.callback_query(F.data.startswith("goal:"))
async def onb_goal_pick(cb: CallbackQuery):
    code = cb.data.split(":", 1)[1]
    _append_goal(str(cb.from_user.id), code)
    names = {
        "anxiety": "–°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É",
        "sleep": "–£–ª—É—á—à–∏—Ç—å —Å–æ–Ω",
        "self": "–ü–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É",
        "motivation": "–ù–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é",
    }
    await cb.answer(f"–î–æ–±–∞–≤–∏–ª: {names.get(code, code)}", show_alert=False)

@router.callback_query(F.data == "goal_done")
async def onb_goal_done(cb: CallbackQuery):
    msg = (
        "–ß—Ç–æ –¥–∞–ª—å—à–µ? –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
        "1) –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ. –Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–ª–æ–∂–∏—Ç—å –∏ –Ω–∞—â—É–ø–∞—Ç—å –æ–ø–æ—Ä—É.\n"
        "2) –ù—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å ‚Äî –¥–∞–º –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ 1 –º–∏–Ω—É—Ç—É.\n"
        "3) –•–æ—á–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º ¬´–†–µ—Ñ–ª–µ–∫—Å–∏—é¬ª –∏–ª–∏ –ø–æ–¥–±–µ—Ä—ë–º ¬´–ú–∏–∫—Ä–æ—à–∞–≥¬ª.\n\n"
        "–ü–∏—à–∏ –∫–∞–∫ —É–¥–æ–±–Ω–æ ‚Äî —è –∑–¥–µ—Å—å ‚ù§Ô∏è"
    )
    await cb.message.answer(msg, reply_markup=tools_keyboard())
    await cb.answer()

@router.message(Command("help"))
async def help_cmd(m: Message):
    await m.answer(
        "–Ø –ø–æ–º–æ–≥–∞—é –æ—Å–º—ã—Å–ª—è—Ç—å –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –º—è–≥–∫–∏–µ —à–∞–≥–∏. –í –∫—Ä–∏–∑–∏—Å–µ –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /privacy ‚Äî —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (none | insights | all)\n"
        "‚Ä¢ /insights ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã\n"
        "‚Ä¢ /export ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã\n"
        "‚Ä¢ /delete_me ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ",
        reply_markup=tools_keyboard()
    )

@router.message(Command("privacy"))
async def privacy_cmd(m: Message):
    await m.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (–≤–≤–µ–¥–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º):\n"
        "‚Ä¢ none ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å\n"
        "‚Ä¢ insights ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ all ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n"
    )

@router.message(F.text.in_({"none", "insights", "all"}))
async def set_privacy(m: Message):
    level = (m.text or "").strip()
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(m.from_user.id)).first()
        if u:
            u.privacy_level = level
            s.commit()
    _set_consent(str(m.from_user.id), level == "all")
    await m.answer(f"–û–∫. –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {level}")


@router.message(F.text.in_({"üß© –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è","–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"}))
async def open_work_text(m: Message):
    await cmd_work(m)


@router.message(F.text.in_({"üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏","–ú–µ–¥–∏—Ç–∞—Ü–∏–∏"}))
async def open_medit_text(m: Message):
    await cmd_meditations(m)


@router.message(F.text.in_({"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏","–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}))
async def open_settings_text(m: Message):
    await m.answer("–¢—É—Ç –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–Ω, –ø–æ–¥—Ö–æ–¥, –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å). –ü–æ–∫–∞ ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.message(F.text.in_({"üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å","–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"}))
async def talk_text(m: Message):
    await m.answer("–Ø —Ä—è–¥–æ–º. –ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ –Ω–∞ –¥—É—à–µ.")
# -------------------- –°–í–û–ë–û–î–ù–´–ô –ß–ê–¢ --------------------
@router.message(F.text)
async def on_text(m: Message):
    if (m.text or '').startswith('/'):
        return
    global adapter
    if adapter is None:
        adapter = LLMAdapter()

    chat_id = m.chat.id
    tg_id = str(m.from_user.id)
    user_text = (m.text or "").strip()

    # –µ—Å–ª–∏ –∏–¥—ë—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π ¬´–†–µ—Ñ–ª–µ–∫—Å–∏—è¬ª ‚Äî –≤–µ–¥—ë–º –ø–æ —à–∞–≥–∞–º
    if tg_id in _reframe_state:
        st = _reframe_state[tg_id]
        step_idx = st["step_idx"]
        key, _prompt = REFRAMING_STEPS[step_idx]
        st["answers"][key] = user_text

        if step_idx + 1 < len(REFRAMING_STEPS):
            st["step_idx"] += 1
            _, next_prompt = REFRAMING_STEPS[st["step_idx"]]
            await m.answer(next_prompt, reply_markup=stop_keyboard())
            return
        else:
            a = st["answers"]
            summary = (
                "üß© –ò—Ç–æ–≥ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏\n\n"
                f"‚Ä¢ –ú—ã—Å–ª—å: {a.get('thought','‚Äî')}\n"
                f"‚Ä¢ –≠–º–æ—Ü–∏—è (1‚Äì10): {a.get('emotion','‚Äî')}\n"
                f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {a.get('behavior','‚Äî')}\n"
                f"‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å: {a.get('alternative','‚Äî')}\n\n"
                "–ö–∞–∫ —ç—Ç–æ –º–µ–Ω—è–µ—Ç —Ç–≤–æ–π –≤–∑–≥–ª—è–¥? –ß—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            )
            _reframe_state.pop(tg_id, None)
            await m.answer(summary, reply_markup=save_insight_keyboard())
            return

    # safety
    if is_crisis(user_text):
        await m.answer(CRISIS_REPLY)
        return

    # –º—è–≥–∫–∏–π RAG
    try:
        rag_ctx = await rag_search(user_text, k=3, max_chars=1200)
    except Exception:
        rag_ctx = ""

    # –¥–ª–∏–Ω–Ω–∞—è –ø–∞–º—è—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏)
    long_tail = _load_recent_turns(tg_id, days=7, limit=24)

    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    if rag_ctx:
        messages.append({"role": "system", "content": "–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n" + rag_ctx})
    messages.extend(long_tail[-10:])          # –∏–∑ –ë–î
    messages.extend(DIALOG_HISTORY[chat_id])  # –∏–∑ RAM
    messages.append({"role": "user", "content": user_text})

    try:
        # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º user (—Ä–∞–Ω—å—à–µ –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –ø–∞–¥–∞–ª–æ)
        answer = await adapter.complete_chat(user=tg_id, messages=messages, temperature=0.6)
    except Exception as e:
        answer = f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏: {e}"

    _push(chat_id, "user", user_text)
    _push(chat_id, "assistant", answer)
    _save_turn(tg_id, "user", user_text)
    _save_turn(tg_id, "assistant", answer)

    await m.answer(answer, reply_markup=tools_keyboard())

# -------------------- –ü–†–ê–ö–¢–ò–ö–ò --------------------
@router.callback_query(F.data == "open_tools")
async def on_open_tools(cb: CallbackQuery):
    user_id = str(cb.from_user.id)
    if not debounce_ok(user_id):
        await cb.answer(); return
    await cb.message.answer("–ß–µ–º –∑–∞–π–º—ë–º—Å—è?", reply_markup=tools_keyboard())
    await cb.answer()

@router.callback_query(F.data == "tool_reframe")
async def on_tool_reframe(cb: CallbackQuery):
    user_id = str(cb.from_user.id)
    if not debounce_ok(user_id):
        await cb.answer(); return
    stop_user_task(user_id)
    _reframe_state[user_id] = {"step_idx": 0, "answers": {}}

    last_user = next((m["content"] for m in reversed(DIALOG_HISTORY[cb.message.chat.id]) if m["role"] == "user"), "")
    if last_user:
        preview = last_user[:160] + ("‚Ä¶" if len(last_user) > 160 else "")
        await cb.message.answer(f"–û—Å—Ç–∞–Ω–µ–º—Å—è –≤ —Ç–µ–º–µ: ¬´{preview}¬ª.", reply_markup=stop_keyboard())

    _, prompt = REFRAMING_STEPS[0]
    await cb.message.answer("–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (4 —à–∞–≥–∞, ~2 –º–∏–Ω—É—Ç—ã).", reply_markup=stop_keyboard())
    await cb.message.answer(prompt, reply_markup=stop_keyboard())
    await cb.answer()

@router.callback_query(F.data == "tool_micro")
async def on_tool_micro(cb: CallbackQuery):
    global adapter
    if adapter is None:
        adapter = LLMAdapter()

    chat_id = cb.message.chat.id
    tg_id = str(cb.from_user.id)

    last_user = next((m["content"] for m in reversed(DIALOG_HISTORY[chat_id]) if m["role"] == "user"), "")
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    if last_user:
        messages.append({"role": "user", "content": last_user})
    messages.append({"role": "user", "content": "–ü–æ–¥—Å–∫–∞–∂–∏ 1‚Äì2 –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 10‚Äì30 –º–∏–Ω—É—Ç –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."})

    try:
        # –¢–æ–∂–µ –ø–µ—Ä–µ–¥–∞—ë–º user
        answer = await adapter.complete_chat(user=tg_id, messages=messages, temperature=0.4)
    except Exception as e:
        answer = f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏: {e}"

    _push(chat_id, "assistant", answer)
    _save_turn(tg_id, "assistant", answer)

    await cb.message.answer(answer, reply_markup=tools_keyboard())
    await cb.answer()

@router.callback_query(F.data == "tool_stop")
async def on_tool_stop(cb: CallbackQuery):
    user_id = str(cb.from_user.id)
    stop_user_task(user_id)
    _reframe_state.pop(user_id, None)
    await cb.message.answer("–û—Å—Ç–∞–Ω–æ–≤–∏–ª. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ?", reply_markup=tools_keyboard())
    await cb.answer()

# -------------------- –ò–ù–°–ê–ô–¢–´ --------------------
@router.callback_query(F.data == "save_insight")
async def on_save_insight(cb: CallbackQuery):
    msg = cb.message
    text = (msg.text or msg.caption or "").strip() if msg else ""
    if not text:
        await cb.answer("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", show_alert=True)
        return
    preview = text if len(text) <= 1000 else text[:1000]
    with db_session() as s:
        s.add(Insight(tg_id=str(cb.from_user.id), text=preview))
        s.commit()
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", show_alert=False)

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from .llm_adapter import LLMAdapter
from .prompts import SYSTEM_PROMPT
from .safety import is_crisis, CRISIS_REPLY

# NEW:
from .db import db_session, User, Insight

router = Router()
adapter = None  # –æ—Ç–ª–æ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

def save_insight_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å–∞–π—Ç", callback_data="save_insight")]
    ])

@router.message(CommandStart())
async def start(m: Message):
    # NEW: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –ë–î
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(m.from_user.id)).first()
        if not u:
            s.add(User(tg_id=str(m.from_user.id), privacy_level="insights"))
            s.commit()

    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ReflectAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ö–ü–¢. "
        "–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è ‚Äî —è —Ä—è–¥–æ–º.\n\n"
        "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /privacy /insights /export /delete_me /help"
    )

@router.message(Command("help"))
async def help_cmd(m: Message):
    await m.answer(
        "–Ø –ø–æ–º–æ–≥–∞—é –æ—Å–º—ã—Å–ª–∏–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—é –º—è–≥–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –∏–Ω—Å–∞–π—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É.\n"
        "–í –∫—Ä–∏–∑–∏—Å–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–º–æ—â–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /privacy ‚Äî —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (none | insights | all)\n"
        "‚Ä¢ /insights ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ\n"
        "‚Ä¢ /export ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–Ω—Å–∞–π—Ç—ã\n"
        "‚Ä¢ /delete_me ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"
    )

# === PRIVACY ===
@router.message(Command("privacy"))
async def privacy_cmd(m: Message):
    await m.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–∏—à–ª–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º):\n"
        "‚Ä¢ none ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å\n"
        "‚Ä¢ insights ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ all ‚Äî –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–∏—á)\n"
    )

@router.message(F.text.in_({"none", "insights", "all"}))
async def set_privacy(m: Message):
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(m.from_user.id)).first()
        if u:
            u.privacy_level = m.text.strip()
            s.commit()
    await m.answer(f"–û–∫. –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {m.text.strip()}")

# === MAIN CHAT ===
@router.message(F.text)
async def on_text(m: Message):
    global adapter
    if adapter is None:
        adapter = LLMAdapter()

    text = (m.text or "").strip()

    if is_crisis(text):
        await m.answer(CRISIS_REPLY)
        return

    # TODO: —Å—é–¥–∞ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ embeddings_index.json
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user",   "content": text},
    ]

    try:
        answer = await adapter.chat(messages, temperature=0.7)
    except Exception as e:
        answer = f"–£–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏: {e}"

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å–∞–π—Ç"
    await m.answer(answer, reply_markup=save_insight_keyboard())

# === SAVE INSIGHT (inline) ===
@router.callback_query(F.data == "save_insight")
async def on_save_insight(cb: CallbackQuery):
    # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ ‚Äî Telegram –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –µ–≥–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å,
    # –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ reply, –Ω–æ –¥–ª—è MVP —É–ø—Ä–æ—Å—Ç–∏–º:
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –¢–ï–ö–°–¢ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É (–æ–Ω–æ –∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞).
    msg = cb.message
    if not msg or not msg.text:
        await cb.answer("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", show_alert=True)
        return

    preview = msg.text.strip()
    if len(preview) > 1000:
        preview = preview[:1000]

    with db_session() as s:
        s.add(Insight(tg_id=str(cb.from_user.id), text=preview))
        s.commit()

    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", show_alert=False)

# === LIST INSIGHTS ===
@router.message(Command("insights"))
async def list_insights(m: Message):
    with db_session() as s:
        items = (
            s.query(Insight)
            .filter(Insight.tg_id == str(m.from_user.id))
            .order_by(Insight.created_at.desc())
            .limit(5)
            .all()
        )
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤.")
        return

    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Å–∞–π—Ç—ã:\n\n" + "\n\n".join(
        [f"‚Ä¢ {i.text[:300]}" for i in items]
    )
    await m.answer(text)

# === EXPORT ALL ===
@router.message(Command("export"))
async def export_insights(m: Message):
    with db_session() as s:
        items = (
            s.query(Insight)
            .filter(Insight.tg_id == str(m.from_user.id))
            .order_by(Insight.created_at.asc())
            .all()
        )
    if not items:
        await m.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    # –ü—Ä–æ—Å—Ç–æ–π JSON-—Ç–µ–∫—Å—Ç (–¥–ª—è MVP). –ü–æ—Ç–æ–º —Å–¥–µ–ª–∞–µ–º —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç.
    import json
    payload = [{"text": it.text, "created_at": it.created_at.isoformat()} for it in items]
    j = json.dumps(payload, ensure_ascii=False, indent=2)
    if len(j) <= 3500:
        await m.answer(f"<code>{j}</code>")
    else:
        await m.answer("–ú–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –æ—Ç–¥–∞–º —Ñ–∞–π–ª–æ–º.")

# === DELETE ME ===
@router.message(Command("delete_me"))
async def delete_me(m: Message):
    with db_session() as s:
        s.query(Insight).filter(Insight.tg_id == str(m.from_user.id)).delete()
        u = s.query(User).filter(User.tg_id == str(m.from_user.id)).first()
        if u:
            s.delete(u)
        s.commit()
    await m.answer("–û–∫. –í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ /start.")

# app/bot.py
from __future__ import annotations

import os
import hashlib
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
 ReplyKeyboardRemove)
# –∞–ª–∏–∞—Å—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö, –≤ —Ç.—á. deep-link)
from aiogram.types import InlineKeyboardMarkup as _IKM, InlineKeyboardButton as _IKB

# ===== –ú–æ–¥—É–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ =====
from app.meditations import get_categories, get_items, get_item
from app.memory import save_user_message, save_bot_message, get_recent_messages
from app.exercises import TOPICS, EXERCISES
from app.prompts import SYSTEM_PROMPT, STYLE_SUFFIXES, LENGTH_HINTS
try:
    # –í –Ω–æ–≤–æ–º prompts.py REFLECTIVE_SUFFIX –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî –ø—É—Å—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç.
    from app.prompts import REFLECTIVE_SUFFIX  # –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å –≤ –±—É–¥—É—â–µ–º ‚Äî –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—Å—è
except Exception:
    REFLECTIVE_SUFFIX = "\n\n(–†–µ–∂–∏–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: –º—è–≥–∫–æ –∑–∞–º–µ–¥–ª—è–π —Ç–µ–º–ø, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—é—â–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–∏—é.)"

# LLM
try:
    from app.llm_adapter import chat_with_style
except Exception:
    chat_with_style = None  # –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –Ω–µ –ø–∞–¥–∞–µ–º

# RAG (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from app.rag_qdrant import search as rag_search
except Exception:
    rag_search = None

# RAG summaries (–¥–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å)
from app.rag_summaries import search_summaries, delete_user_summaries

# –ë–î (async)
from sqlalchemy import text
from app.db.core import async_session

from sqlalchemy import select
from app.db.core import get_session
from app.billing.yookassa_client import create_payment_link
from app.billing.service import start_trial_for_user, check_access, is_trial_active
from app.billing.service import disable_auto_renew, cancel_subscription_now, get_active_subscription_row

from zoneinfo import ZoneInfo

from collections import deque

router = Router()

# ========== AUTO-LOGGING –í –ë–î (bot_messages) ==========
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

async def _log_message_by_tg(tg_id: int, role: str, text_: str) -> None:
    """
    –õ–æ–≥ –≤ bot_messages c —É—á—ë—Ç–æ–º users.id.
    –†–µ–∂–µ–º —Ç–µ–∫—Å—Ç –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤. –†–æ–ª—å –∂—ë—Å—Ç–∫–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ {'user','bot'}.
    –ö–æ–≥–¥–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å = 'none' ‚Äî –ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ –≤ —ç—Ñ–µ–º–µ—Ä–Ω—ã–π –±—É—Ñ–µ—Ä (–±–µ–∑ –ë–î).
    """
    try:
        mode = (await _db_get_privacy(int(tg_id)) or "insights").lower()

        uid = await _ensure_user_id(int(tg_id))
        safe = (text_ or "")[:4000]
        if not safe:
            return

        r = (role or "").lower()
        role_norm = "user" if r == "user" else "bot"

        if mode == "none":
            # –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±—É—Ñ–µ—Ä
            _buf_push(int(tg_id), role_norm, safe)
            return

        # –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ ‚Äî –ø–∏—à–µ–º –≤ –ë–î
        async with async_session() as s:
            await s.execute(
                text("""
                    INSERT INTO bot_messages (user_id, role, text, created_at)
                    VALUES (:u, :r, :t, CURRENT_TIMESTAMP)
                """),
                {"u": int(uid), "r": role_norm, "t": safe},
            )
            await s.commit()

        # –∏ –¥—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ—Ä–æ—Ç–∫–∏–π –±—É—Ñ–µ—Ä (–Ω–µ –æ–±—è–∑., –Ω–æ —É–¥–æ–±–Ω–æ)
        _buf_push(int(tg_id), role_norm, safe)

    except Exception as e:
        print("[log-db] error:", repr(e))

class LogIncomingMiddleware(BaseMiddleware):
    """
    –ü–∏—à–µ–º –í–°–ï –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è/–∫–æ–ª–±—ç–∫–∏ –≤ bot_messages (role='user'),
    –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –≤—ã–∫–ª—é—á–µ–Ω–æ (/privacy).
    """
    async def __call__(self, handler, event, data):
        try:
            tg_id = getattr(getattr(event, "from_user", None), "id", None)
            if tg_id:
                if isinstance(event, Message):
                    txt = event.text or event.caption
                    if txt:
                        await _log_message_by_tg(int(tg_id), "user", txt)
                elif isinstance(event, CallbackQuery):
                    if event.data:
                        await _log_message_by_tg(int(tg_id), "user", f"[cb] {event.data}")
        except Exception as e:
            print("[log-mw] error:", repr(e))
        return await handler(event, data)

async def send_and_log(
    message: Message,
    text_: str,
    **kwargs
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –∑–∞–ø–∏—Å—å –≤ bot_messages –∫–∞–∫ role='bot'.
    """
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ kwargs)
    kwargs.setdefault("disable_web_page_preview", True)

    sent = await message.answer(text_, **kwargs)
    try:
        await _log_message_by_tg(message.from_user.id, "bot", text_)
        # –∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä—è–º–æ–π –ª–æ–≥–≥–µ—Ä:
        # await _db_log_bot_message(message.from_user.id, text_)
    except Exception as e:
        print("[send-log] error:", repr(e))
    return sent

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û deep-link –≤–∏–¥–∞: /start paid_ok | paid_canceled | paid_fail
@router.message(F.text.regexp(r"^/start\s+paid_(ok|canceled|fail)$"))
async def on_start_payment_deeplink(m: Message):
    payload = (m.text or "").split(maxsplit=1)[1].strip().lower()

    if payload == "paid_ok":
        await m.answer(
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úÖ\n–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å ‚Äî ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª, ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª –∏–ª–∏ ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª.",
            reply_markup=kb_main_menu(),
        )
        return

    # paid_canceled / paid_fail
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="pay:open")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="menu:main")],
    ])
    await m.answer(
        "–ü–æ—Ö–æ–∂–µ, –æ–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∑–∞–π–º—ë—Ç –º–∏–Ω—É—Ç—É.",
        reply_markup=kb,
    )

# ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π paywall –≤ —Ä–∞–Ω—Ç–∞–π–º–µ ======================================
def _require_access_msg(_: Message) -> bool:
    """
    LEGACY: —Ä–∞–Ω—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ø–µ–π–≤–æ–ª–ª –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ _enforce_access_or_paywall(...) —Å –ë–î.
    –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ç–æ—Ç —Ö—É–∫, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    """
    return False
    
# --- async DB helpers (privacy, users, history) -----------------
async def _ensure_user_id(tg_id: int) -> int:
    """–í–µ—Ä–Ω—ë—Ç users.id –ø–æ tg_id, —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    async with async_session() as s:
        r = await s.execute(text("SELECT id FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
        uid = r.scalar()
        if uid is None:
            r = await s.execute(
                text("""
                    INSERT INTO users (tg_id, privacy_level, style_profile, created_at)
            VALUES (:tg, 'ask', 'default', NOW())
            RETURNING id
                """),
                {"tg": int(tg_id)},
            )
            uid = r.scalar_one()
            await s.commit()
        return int(uid)
    
# --- –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î (–¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–π –ø–∞–º—è—Ç–∏) ---
from sqlalchemy import text as _t

async def _load_history_from_db(tg_id: int, *, limit: int = 120, hours: int = 24*30) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `hours` —á–∞—Å–æ–≤,
    –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI messages: [{"role":"user|assistant","content": "..."}]
    –ü–æ—Ä—è–¥–æ–∫: —Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ.

    –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
    - –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å = "none" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (in-memory).
    - –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ ‚Äî –±–µ—Ä—ë–º –∏–∑ –ë–î –∏ –≤ –∫–æ–Ω—Ü–µ –¥–æ–º–µ—à–∏–≤–∞–µ–º –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑ –±—É—Ñ–µ—Ä–∞,
      —á—Ç–æ–±—ã –Ω–∏–≤–µ–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—É—é –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
    """
    uid = await _ensure_user_id(tg_id)

    # 0) —Ä–µ–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    try:
        mode = (await _db_get_privacy(int(tg_id)) or "insights").lower()
    except Exception:
        mode = "insights"

    # 1) –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∞ ‚Äî —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±—É—Ñ–µ—Ä (–±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î)
    if mode == "none":
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π get_recent_messages(chat_id, limit)
        buf = get_recent_messages(int(tg_id), limit=min(limit, 120)) or []
        out: list[dict] = []
        for r in buf:
            role = "assistant" if (r.get("role") == "bot") else "user"
            out.append({"role": role, "content": r.get("text") or ""})
        return out

    # 2) –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ ‚Äî —á–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
    async with async_session() as s:
        rows = (await s.execute(
            _t("""
                SELECT role, text
                FROM bot_messages
                WHERE user_id = :uid
                  AND created_at >= NOW() - (:hours::text || ' hours')::interval
                ORDER BY id ASC
                LIMIT :lim
            """),
            {"uid": int(uid), "hours": int(hours), "lim": int(limit)}
        )).mappings().all()

    msgs: list[dict] = []
    for r in rows:
        role = "assistant" if (r["role"] or "").lower() == "bot" else "user"
        msgs.append({"role": role, "content": r["text"] or ""})

    # 3) –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–º–µ—à–∏–≤–∞–µ–º –¥–æ 10 —Å–≤–µ–∂–∏—Ö –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ë–î –æ—Ç—Å—Ç–∞–ª–∞ –Ω–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
    try:
        tail_raw = get_recent_messages(int(tg_id), limit=10) or []
        if tail_raw:
            seen = {(m["role"], m["content"]) for m in msgs}
            for r in tail_raw:
                role = "assistant" if (r.get("role") == "bot") else "user"
                content = r.get("text") or ""
                key = (role, content)
                if key not in seen:
                    msgs.append({"role": role, "content": content})
                    seen.add(key)
    except Exception:
        # –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ë–î-–∏—Å—Ç–æ—Ä–∏—é
        pass

    return msgs

async def _db_get_privacy(tg_id: int) -> str:
    async with async_session() as s:
        r = await s.execute(text("SELECT privacy_level FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
        val = r.scalar()
    return (val or "insights")

async def _db_set_privacy(tg_id: int, mode: str) -> None:
    async with async_session() as s:
        await s.execute(text("UPDATE users SET privacy_level = :m WHERE tg_id = :tg"),
                        {"m": mode, "tg": int(tg_id)})
        await s.commit()

async def _purge_user_history(tg_id: int) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ –ë–î (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å) –∏ –≤—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ—Ç —ç—Ñ–µ–º–µ—Ä–Ω—ã–π –±—É—Ñ–µ—Ä.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î.
    """
    deleted = 0
    try:
        async with async_session() as s:
            r = await s.execute(text("SELECT id FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
            uid = r.scalar()
            if uid:
                res = await s.execute(text("DELETE FROM bot_messages WHERE user_id = :u"), {"u": int(uid)})
                await s.commit()
                try:
                    deleted = int(getattr(res, "rowcount", 0) or 0)
                except Exception:
                    deleted = 0
    except Exception:
        deleted = 0
    # –≤—Å–µ–≥–¥–∞ —á–∏—Å—Ç–∏–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±—É—Ñ–µ—Ä
    RECENT_BUFFER.pop(int(tg_id), None)
    return deleted
    
# --- Memory Q hook: "—á—Ç–æ –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ X —á–∞—Å–æ–≤/–¥–Ω–µ–π/–Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥?" ----------
import re
from sqlalchemy import text as _pg

_TIME_NUM = re.compile(r"(\d+)")

def _pick_window(txt: str) -> tuple[int, int, int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (minutes, hours, days, weeks). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: '–º–∏–Ω', '–º–∏–Ω—É', '—á–∞—Å', '–¥–Ω', '–Ω–µ–¥–µ–ª', '–Ω–µ–¥–∞–≤–Ω'.
    """
    t = (txt or "").lower()
    mins = hours = days = weeks = 0
    if "–Ω–µ–¥–∞–≤–Ω" in t:           # ¬´–Ω–µ–¥–∞–≤–Ω–æ¬ª
        hours = 3
    elif "–º–∏–Ω" in t or "–º–∏–Ω—É" in t:
        m = _TIME_NUM.search(t); mins = int(m.group(1)) if m else 10
    elif "—á–∞—Å" in t:
        m = _TIME_NUM.search(t); hours = int(m.group(1)) if m else 3
    elif "–¥–Ω" in t:
        m = _TIME_NUM.search(t); days = int(m.group(1)) if m else 1
    elif "–Ω–µ–¥–µ–ª" in t:
        m = _TIME_NUM.search(t); weeks = int(m.group(1)) if m else 1
    else:
        mins = 10
    return mins, hours, days, weeks

def _looks_like_memory_question(txt: str) -> bool:
    t = (txt or "").lower()
    # –±–∞–∑–æ–≤—ã–µ –∫–ª—é—á–∏
    keys = [
        "–ø–æ–º–Ω–∏—à—å", "–≤—Å–ø–æ–º–Ω–∏", "—á—Ç–æ –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏", "–æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏", "–æ —á—ë–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏",
        "—á—Ç–æ —è –≥–æ–≤–æ—Ä–∏–ª", "—á—Ç–æ —è –ø–∏—Å–∞–ª", "—á—Ç–æ —è —Å–ø—Ä–∞—à–∏–≤–∞–ª",
        "—á—Ç–æ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ", "–º—ã –æ–±—Å—É–∂–¥–∞–ª–∏",
        "–º–∏–Ω –Ω–∞–∑–∞–¥", "—á–∞—Å –Ω–∞–∑–∞–¥", "–¥–µ–Ω—å –Ω–∞–∑–∞–¥", "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥", "–≤—á–µ—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è",
        "–ø—Ä–æ—à–ª—ã–π —Ä–∞–∑", "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑", "–Ω–µ–¥–∞–≤–Ω–æ",
    ]
    # —Å–∏–Ω–æ–Ω–∏–º—ã ¬´–≥–æ–≤–æ—Ä–∏–ª–∏¬ª
    syn = ["—Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏", "–æ–±—â–∞–ª–∏—Å—å", "–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–ª–∏—Å—å", "–±–æ–ª—Ç–∞–ª–∏"]
    if any(k in t for k in keys):
        return True
    if ("–æ —á–µ–º" in t or "–æ —á—ë–º" in t) and any(s in t for s in syn):
        return True
    if "–Ω–µ –ø–æ–º–Ω–∏—à—å" in t and ("–æ —á–µ–º" in t or "–æ —á—ë–º" in t or "—á—Ç–æ –±—ã–ª–æ" in t):
        return True
    return False

async def _maybe_answer_memory_question(m: Message, user_text: str) -> bool:
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ¬´—á—Ç–æ –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ X –Ω–∞–∑–∞–¥/–Ω–µ–¥–∞–≤–Ω–æ¬ª, –æ—Ç–¥–∞—ë–º –ø–µ—Ä–µ—Å–∫–∞–∑ –±–µ–∑ LLM."""
    if not _looks_like_memory_question(user_text):
        return False

    uid = await _ensure_user_id(m.from_user.id)
    mins, h, d, w = _pick_window(user_text)
    total_minutes = mins + h*60 + d*24*60 + w*7*24*60
    if total_minutes <= 0:
        total_minutes = 10
    interval_txt = f"{total_minutes} minutes"

    async with async_session() as s:
        rows = (await s.execute(_pg("""
            SELECT role, text, created_at
            FROM bot_messages
            WHERE user_id = :uid
              AND created_at >= NOW() - (:ival::text)::interval
            ORDER BY id ASC
            LIMIT 120
        """), {"uid": int(uid), "ival": interval_txt})).mappings().all()

    if not rows:
        await send_and_log(
            m,
            "–ó–∞ —ç—Ç–æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–∂—É –≤ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–¥—Å–∫–∞–∂–∏ —Ç–µ–º—É ‚Äî –ø–æ–¥—Ö–≤–∞—á—É.",
            reply_markup=kb_main_menu(),
        )
        return True

    # –°–∂–∏–º–∞–µ–º ¬´–¥–∏–∞–ª–æ–≥¬ª –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑
    def _short(s: str, n: int = 220) -> str:
        s = (s or "").strip().replace("\n", " ")
        return s if len(s) <= n else s[:n - 1] + "‚Ä¶"

    parts = []
    for r in rows[-14:]:  # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 —Ä–µ–ø–ª–∏–∫, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å
        who = "—Ç—ã" if (r["role"] or "").lower() == "user" else "—è"
        when = _fmt_dt(r["created_at"])
        parts.append(f"{when} ‚Äî {who}: {_short(r['text'])}")

    header = "–ö–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –±—ã–ª–æ –≤ –Ω–µ–¥–∞–≤–Ω–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ:\n"
    body = "\n".join(parts)
    tail = "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏–º —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –∏–ª–∏ –ø–æ–º–µ–Ω—è–µ–º —Ç–µ–º—É?"

    await send_and_log(m, header + body + tail, reply_markup=kb_main_menu())
    return True
    
# --- Summaries helpers (fetch texts by ids, purge all for user) ---
from sqlalchemy import text as _sql_text

async def _fetch_summary_texts_by_ids(ids: List[int]) -> List[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã —Å–∞–º–º–∞—Ä–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ ids."""
    if not ids:
        return []
    async with async_session() as s:
        rows = (await s.execute(_sql_text("""
            SELECT id, kind, period_start, period_end, text
            FROM dialog_summaries
            WHERE id = ANY(:ids)
        """), {"ids": ids})).mappings().all()
    by_id = {r["id"]: r for r in rows}
    out: List[dict] = []
    for i in ids:
        r = by_id.get(i)
        if not r:
            continue
        out.append({
            "id": r["id"],
            "kind": r["kind"],
            "period": f"{_fmt_dt(r['period_start'])} ‚Äî {_fmt_dt(r['period_end'])}",
            "text": r["text"],
        })
    return out

async def _purge_user_summaries_all(tg_id: int) -> int:
    """–£–¥–∞–ª—è–µ—Ç –í–°–ï —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ë–î + Qdrant). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î."""
    # –ø–æ–ª—É—á–∞–µ–º users.id
    async with async_session() as s:
        r = await s.execute(_sql_text("SELECT id FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
        uid = r.scalar()
        if not uid:
            return 0
        # —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ —É–ø–∞–¥—ë—Ç)
        try:
            await delete_user_summaries(int(uid))
        except Exception:
            pass
        # –∑–∞—Ç–µ–º —á–∏—Å—Ç–∏–º –ë–î
        res = await s.execute(_sql_text("DELETE FROM dialog_summaries WHERE user_id = :uid"), {"uid": int(uid)})
        await s.commit()
        try:
            return int(getattr(res, "rowcount", 0) or 0)
        except Exception:
            return 0
# -----------------------------------------------------------------

# ===== –û–Ω–±–æ—Ä–¥–∏–Ω–≥: —Å—Å—ã–ª–∫–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ =====
POLICY_URL = os.getenv("POLICY_URL", "").strip()
TERMS_URL  = os.getenv("TERMS_URL", "").strip()

DEFAULT_ONB_IMAGES = {
    "cover":       os.getenv("ONB_IMG_COVER", "https://file.garden/aML3M6Sqrg21TaIT/kind-creature-min.jpg"),
    "talk":        os.getenv("ONB_IMG_TALK", "https://file.garden/aML3M6Sqrg21TaIT/warm-conversation-min.jpg"),
    "work":        os.getenv("ONB_IMG_WORK", "https://file.garden/aML3M6Sqrg21TaIT/_practices-min.jpg"),
    "meditations": os.getenv("ONB_IMG_MEDIT", "https://file.garden/aML3M6Sqrg21TaIT/meditation%20(1)-min.jpg"),
}

def get_onb_image(key: str) -> str:
    return DEFAULT_ONB_IMAGES.get(key, "") or ""

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞) =====
CHAT_MODE: Dict[int, str] = {}        # chat_id -> "talk" | "work" | "reflection"
USER_TONE: Dict[int, str] = {}        # chat_id -> "default" | "friend" | "therapist" | "18plus"

# ===== –≠—Ñ–µ–º–µ—Ä–Ω—ã–π –±—É—Ñ–µ—Ä –¥–∏–∞–ª–æ–≥–∞, –∫–æ–≥–¥–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å = none =====
# chat_id -> deque([{"role": "user|assistant", "content": "..."}])
RECENT_BUFFER: Dict[int, deque] = {}
BUFFER_MAX = 120  # —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–µ—Ä–∂–∏–º –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞

def _buf_push(chat_id: int, role: str, text_: str) -> None:
    if not chat_id or not text_:
        return
    q = RECENT_BUFFER.get(chat_id)
    if q is None:
        q = deque(maxlen=BUFFER_MAX)
        RECENT_BUFFER[chat_id] = q
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–æ–ª—å –ø–æ–¥ OpenAI-—Å—Ö–µ–º—É
    role_norm = "assistant" if (role or "").lower() == "bot" else "user"
    q.append({"role": role_norm, "content": (text_ or "").strip()})

def _buf_get(chat_id: int, limit: int = 90) -> List[dict]:
    q = RECENT_BUFFER.get(chat_id)
    if not q:
        return []
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ
    items = list(q)[-int(limit):]
    return items


# --- paywall helpers ---
async def _get_user_by_tg(session, tg_id: int):
    from app.db.models import User
    q = await session.execute(select(User).where(User.tg_id == tg_id))
    return q.scalar_one_or_none()

def _kb_paywall(show_trial: bool) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    if show_trial:
        rows.append([InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚≠ê", callback_data="trial:start")])
    rows.append([InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="pay:plans")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

async def _enforce_access_or_paywall(msg_or_call, session, user_id: int) -> bool:
    """True ‚Äî –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å; False ‚Äî –ø–æ–∫–∞–∑–∞–Ω –ø–µ–π–≤–æ–ª–ª –∏ –Ω—É–∂–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É."""
    if await check_access(session, user_id):
        return True
    trial_active = await is_trial_active(session, user_id)
    show_trial = not trial_active
    text_ = (
        "–î–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª—É –æ—Ç–∫—Ä—ã—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
        "–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∑–∞—Ç–µ–º ‚Äî –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É."
    )
    if isinstance(msg_or_call, Message):
        await msg_or_call.answer(text_, reply_markup=_kb_paywall(show_trial))
    else:
        await msg_or_call.message.answer(text_, reply_markup=_kb_paywall(show_trial))
    return False

# --- pay status helpers ---
async def _access_status_text(session, user_id: int) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç."""
    # –ø–æ–¥–ø–∏—Å–∫–∞?
    try:
        from app.db.models import User
        u = (await session.execute(select(User).where(User.id == user_id))).scalar_one_or_none()
    except Exception:
        u = None
    if u and (getattr(u, "subscription_status", None) or "") == "active":
        return "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ\n–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–∫—Ä—ã—Ç."

    # —Ç—Ä–∏–∞–ª?
    if await is_trial_active(session, user_id):
        until = getattr(u, "trial_expires_at", None)
        tail = f" –¥–æ {_fmt_dt(until)}" if until else ""
        return f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω{tail} ‚úÖ\n–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–∫—Ä—ã—Ç."
    return None

# --- –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
from zoneinfo import ZoneInfo
import os

_TZ = ZoneInfo(os.getenv("BOT_TZ", "Europe/Moscow"))

def _fmt_dt(dt) -> str:
    try:
        # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª naive-datetime, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ UTC
        if getattr(dt, "tzinfo", None) is None:
            dt = dt.replace(tzinfo=ZoneInfo("UTC"))
        return dt.astimezone(_TZ).strftime('%d.%m.%Y %H:%M')
    except Exception:
        return str(dt)
    
# === Length hint picker + "one-question" post-filter =======================

def _pick_len_hint(user_text: str, mode: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –∏–∑ LENGTH_HINTS: 'micro' | 'short' | 'medium' | 'deep'
    –õ–æ–≥–∏–∫–∞:
      ‚Äî 'deep' –ø—Ä–∏ —è–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ ¬´–ø–æ–¥—Ä–æ–±–Ω–æ/–ø–ª–∞–Ω/—Å—Ç—Ä—É–∫—Ç—É—Ä–∞/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª;
      ‚Äî –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞: <=50 —Å–∏–º–≤–æ–ª–æ–≤ -> micro; <=220 -> short; –∏–Ω–∞—á–µ -> medium;
      ‚Äî –≤ —Ä–µ–∂–∏–º–µ reflection –∏–∑–±–µ–≥–∞–µ–º 'deep', –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–π –ø—Ä–æ—Å—å–±—ã.
    """
    t = (user_text or "").lower()
    deep_keywords = ("–ø–æ–¥—Ä–æ–±", "–¥–µ—Ç–∞–ª—å", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç", "–ø–ª–∞–Ω", "—Å—Ç—Ä—É–∫—Ç—É—Ä", "–ø–æ—à–∞–≥", "–∏–Ω—Å—Ç—Ä—É–∫—Ü")

    if any(k in t for k in deep_keywords):
        return "deep"

    n = len(t.strip())
    if n <= 50:
        return "micro"
    if n <= 220:
        return "short"

    # –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if mode == "reflection":
        return "medium"
    return "medium"


def _enforce_single_question(text: str) -> str:
    """
    –û—Å—Ç–∞–≤–ª—è–µ—Ç –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É).
    –û—Å—Ç–∞–ª—å–Ω—ã–µ '?' –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ç–æ—á–∫–∏. –°—Ö–ª–æ–ø—ã–≤–∞–µ—Ç '??' -> '?'.
    """
    if not text:
        return text

    # —Å—Ö–ª–æ–ø–Ω—É—Ç—å –ø–æ–≤—Ç–æ—Ä—ã
    while "??" in text:
        text = text.replace("??", "?")

    last_q = text.rfind("?")
    if last_q == -1:
        return text

    # –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ '?' –Ω–∞ '.'
    chars = list(text)
    for i, ch in enumerate(chars):
        if ch == "?" and i != last_q:
            chars[i] = "."
    out = "".join(chars)

    # –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–∏–º –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏
    out = out.replace(" .", ".").replace(" ,", ",")
    return out


async def _get_active_subscription(session, user_id: int):
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ: —á–∏—Ç–∞–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—Ä–æ–∫–æ–º
    row = await session.execute(text("""
        SELECT id, subscription_until, COALESCE(is_auto_renew, true) AS is_auto_renew
        FROM subscriptions
        WHERE user_id = :uid AND status = 'active'
        ORDER BY subscription_until DESC
        LIMIT 1
    """), {"uid": user_id})
    return row.mappings().first()

def _kb_trial_pay() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="pay:plans")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="menu:main")],
    ])

def _kb_active_sub_actions() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚ùå", callback_data="sub:cancel")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ ‚èπ", callback_data="sub:auto_off")],
    ])
def _kb_confirm(action: str) -> InlineKeyboardMarkup:
    # action: 'cancel' | 'auto_off'
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"sub:{action}:yes"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="sub:cancel_back"),
        ],
    ])

@router.callback_query(lambda c: c.data == "sub:cancel_back")
async def cb_sub_cancel_back(call: CallbackQuery):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω /pay —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É / –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ¬ª
    await on_pay(call.message)
    await call.answer()

# ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π safe_edit (–Ω–µ —Ä–æ–Ω—è–µ—Ç UX) =====
async def _safe_edit(msg: Message, text: Optional[str] = None, reply_markup: Optional[InlineKeyboardMarkup] = None):
    try:
        if text is not None and reply_markup is not None:
            await msg.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
        elif text is not None:
            await msg.edit_text(text, disable_web_page_preview=True)
        elif reply_markup is not None:
            await msg.edit_reply_markup(reply_markup=reply_markup)
        else:
            return
    except Exception:
        if text is not None:
            try:
                await msg.answer(text, reply_markup=reply_markup, disable_web_page_preview=True)
            except Exception:
                pass
        elif reply_markup is not None:
            try:
                await msg.answer(".", reply_markup=reply_markup)
            except Exception:
                pass

# ===== –¢–æ–ø–∏–∫–∏/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
EMO_DEFAULTS = {
    "sleep": "üò¥", "body": "üí°", "procrastination": "üåø",
    "burnout": "‚òÄÔ∏è", "decisions": "üéØ", "social_anxiety": "ü´•",
    "reflection": "‚ú®",
}

def _emoji_by_topic(tid: str, title: str) -> str:
    meta = TOPICS.get(tid) or {}
    if isinstance(meta, dict):
        e = (meta.get("emoji") or "").strip()
        if e:
            return e
    pool = ["üå±", "üåø", "üå∏", "üåô", "‚òÄÔ∏è", "üî•", "üß≠", "üß†", "üõ†Ô∏è", "üí°", "üß©", "üéØ", "üåä", "ü´∂", "‚ú®"]
    idx = int(hashlib.md5((tid or title).encode("utf-8")).hexdigest(), 16) % len(pool)
    return pool[idx]

def _topic_title_with_emoji(tid: str) -> str:
    meta = TOPICS.get(tid) or {}
    title = (meta.get("title") or tid).strip()
    emo = (meta.get("emoji") or _emoji_by_topic(tid, title)).strip()
    return f"{emo} {title}"

def topic_button_title(tid: str) -> str:
    meta = TOPICS.get(tid, {})
    title = (meta.get("title") or tid).strip()
    emoji = (meta.get("emoji") or EMO_DEFAULTS.get(tid, "üå±")).strip()
    return f"{emoji} {title}"

def kb_main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")],
            [KeyboardButton(text="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
    )

def kb_topics() -> InlineKeyboardMarkup:
    order = TOPICS.get("__order__") or [k for k in TOPICS.keys() if not k.startswith("__")]
    rows = []
    for tid in order:
        if tid.startswith("__"):
            continue
        rows.append([InlineKeyboardButton(text=topic_button_title(tid), callback_data=f"t:{tid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_exercises(tid: str) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []
    for eid, ex in (EXERCISES.get(tid) or {}).items():
        if not isinstance(ex, dict):
            continue
        title = ex.get("title", eid)
        buttons.append([InlineKeyboardButton(text=title, callback_data=f"ex:{tid}:{eid}:start")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="work:topics")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def kb_settings() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéö –¢–æ–Ω –æ–±—â–µ–Ω–∏—è", callback_data="settings:tone")],
            [InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="settings:privacy")],
        ]
    )

def kb_tone_picker() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", callback_data="tone:default")],
            [InlineKeyboardButton(text="ü§ù –î—Ä—É–≥/–ø–æ–¥—Ä—É–≥–∞",                   callback_data="tone:friend")],
            [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–Ω—ã–π",                  callback_data="tone:therapist")],
            [InlineKeyboardButton(text="üå∂Ô∏è 18+",                           callback_data="tone:18plus")],
        ]
    )

async def kb_privacy_for(chat_id: int) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏."""
    try:
        mode = (await _db_get_privacy(chat_id) or "insights").lower()
    except Exception:
        mode = "insights"
    save_on = (mode != "none")
    toggle_text = "üîî –í–∫–ª. —Ö—Ä–∞–Ω–µ–Ω–∏–µ" if not save_on else "üîï –í—ã–∫–ª. —Ö—Ä–∞–Ω–µ–Ω–∏–µ"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=toggle_text,          callback_data="privacy:toggle")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="privacy:clear")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",            callback_data="menu:settings")],
        ]
    )

# ===== 5) –¢—Ä–∏–∞–ª: —Ä–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤ –ë–î =====================================
@router.callback_query(lambda c: c.data == "trial:start")
async def cb_trial_start(call: CallbackQuery):
    """
    –°—Ç–∞—Ä—Ç—É–µ–º —Ç—Ä–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ï—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî —Å–æ–æ–±—â–∞–µ–º.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º CTA –∏ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ü–†–ê–í–û–ô –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    tg_id = call.from_user.id

    async for session in get_session():
        from app.db.models import User
        q = await session.execute(select(User).where(User.tg_id == tg_id))
        u = q.scalar_one_or_none()

        if not u:
            await call.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.", show_alert=True)
            return

        # –µ—Å–ª–∏ —Ç—Ä–∏–∞–ª —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º
        if await is_trial_active(session, u.id):
            await call.answer("–¢—Ä–∏–∞–ª —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ", show_alert=True)
            return

        started, expires = await start_trial_for_user(session, u.id)
        await session.commit()

    # 1) —É–¥–∞–ª—è–µ–º CTA-—Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å ¬´–ª–∏—à–Ω–∏–µ¬ª)
    try:
        await call.message.delete()
    except Exception:
        pass

    # 2) —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ü–†–ê–í–û–ô –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    text = (
        f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ\n"
        f"–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–æ {_fmt_dt(expires)}\n\n"
        f"–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å: –≤—ã–±—Ä–∞—Ç—å ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª, ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª –∏–ª–∏ ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª."
    )
    try:
        await call.message.answer(text, reply_markup=kb_main_menu())
    except Exception:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await call.message.answer(text)

    await call.answer()

@router.callback_query(lambda c: c.data == "pay:open")
async def cb_pay_open(call: CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞)."""
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –Ω–µ –ø–∞–¥–∞—Ç—å –≤ /start
    try:
        await _ensure_user_id(call.from_user.id)
    except Exception:
        # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        pass

    await call.message.answer(
        "–ü–æ–¥–ø–∏—Å–∫–∞ ¬´–ü–æ–º–Ω–∏¬ª\n"
        "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É\n\n"
        "‚ö†Ô∏è <i>–í–∞–∂–Ω–æ: –ø–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º. –ï–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ /pay.</i>\n\n"
        "<b>–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω:</b>",
        reply_markup=_kb_pay_plans(),
        parse_mode="HTML",
    )
    await call.answer()

@router.callback_query(lambda c: c.data == "pay:plans")
async def cb_pay_plans(call: CallbackQuery):
    """–Ø–≤–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã (–¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –ª—é–±—ã—Ö –º–µ—Å—Ç, –≤ —Ç.—á. –æ–Ω–±–æ—Ä–¥–∏–Ω–≥)."""
    # —Ç–æ–∂–µ —Å—Ç—Ä–∞—Ö—É–µ–º—Å—è: —Å–æ–∑–¥–∞–¥–∏–º/–Ω–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        await _ensure_user_id(call.from_user.id)
    except Exception:
        pass

    await call.message.answer(
        "–ü–æ–¥–ø–∏—Å–∫–∞ ¬´–ü–æ–º–Ω–∏¬ª\n"
        "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É\n\n"
        "‚ö†Ô∏è <i>–í–∞–∂–Ω–æ: –ø–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º. –ï–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ /pay.</i>\n\n"
        "<b>–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω:</b>",
        reply_markup=_kb_pay_plans(),
        parse_mode="HTML",
    )
    await call.answer()

# --- –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ ---
@router.callback_query(lambda c: c.data == "sub:auto_off")
async def cb_sub_auto_off(call: CallbackQuery):
    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not u:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        sub = await get_active_subscription_row(session, u.id)

    if not sub:
        await call.answer("–ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç.", show_alert=True); return

    until_str = _fmt_dt(sub["subscription_until"])
    await _safe_edit(
        call.message,
        text=f"–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?\n–¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ <b>{until_str}</b>, –¥–∞–ª—å—à–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç.",
        reply_markup=_kb_confirm("auto_off"),
    )
    await call.answer()

@router.callback_query(lambda c: c.data == "sub:auto_off:yes")
async def cb_sub_auto_off_yes(call: CallbackQuery):
    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not u:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        changed, until = await disable_auto_renew(session, u.id)

    if not changed:
        await _safe_edit(call.message, text="–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚èπ", reply_markup=_kb_active_sub_actions())
        await call.answer(); return

    until_str = _fmt_dt(until) if until else "–∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞"
    await _safe_edit(
        call.message,
        text=f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚èπ\n–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ {until_str}.",
        reply_markup=_kb_active_sub_actions(),
    )
    await call.answer()

# --- –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é ---
@router.callback_query(lambda c: c.data == "sub:cancel")
async def cb_sub_cancel(call: CallbackQuery):
    await _safe_edit(
        call.message,
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å?\n–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä–æ–µ—Ç—Å—è —Å—Ä–∞–∑—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç.",
        reply_markup=_kb_confirm("cancel"),
    )
    await call.answer()

@router.callback_query(lambda c: c.data == "sub:cancel:yes")
async def cb_sub_cancel_yes(call: CallbackQuery):
    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not u:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        ok = await cancel_subscription_now(session, u.id)

    if not ok:
        await _safe_edit(call.message, text="–ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=_kb_pay_plans())
        await call.answer(); return

    await _safe_edit(
        call.message,
        text="–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –æ—Ñ–æ—Ä–º–∏ –Ω–æ–≤—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ /pay.",
        reply_markup=_kb_pay_plans(),
    )
    await call.answer()

# ===== /policy =====
@router.message(Command("policy"))
async def cmd_policy(m: Message):
    parts = ["üîí <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞</b>"]
    if TERMS_URL:
        parts.append(f"‚Ä¢ <a href='{TERMS_URL}'>–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞</a>")
    if POLICY_URL:
        parts.append(f"‚Ä¢ <a href='{POLICY_URL}'>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>")
    if not TERMS_URL and not POLICY_URL:
        parts.append("–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è POLICY_URL –∏ TERMS_URL.")
    await m.answer("\n".join(parts), disable_web_page_preview=True)

# ===== –û–Ω–±–æ—Ä–¥–∏–Ω–≥ =====
ONB_1_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞–π—Ç–∏ –æ–ø–æ—Ä—É.\n"
    "–Ø —Ä—è–¥–æ–º –∏ –ø–æ–º–æ–≥—É ‚Äî –±–µ—Ä–µ–∂–Ω–æ –∏ –±–µ–∑ –æ—Ü–µ–Ω–æ–∫."
)

def kb_onb_step1() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ûú", callback_data="onb:step2")]]
    )

ONB_2_TEXT = (
    "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫—É. "
    "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–º –æ–±–æ–∏–º –±—ã–ª–æ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ."
)

def kb_onb_step2() -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    link_row: list[InlineKeyboardButton] = []
    if TERMS_URL:
        link_row.append(InlineKeyboardButton(text="üìÑ –ü—Ä–∞–≤–∏–ª–∞", url=TERMS_URL))
    if POLICY_URL:
        link_row.append(InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞", url=POLICY_URL))
    if link_row:
        rows.append(link_row)
    rows.append([InlineKeyboardButton(text="–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ", callback_data="onb:agree")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

WHAT_NEXT_TEXT = """–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? üíõ

üí¨ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, –ø–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–≤–µ—Å—Ç–∏ —è—Å–Ω–æ—Å—Ç—å. –ó–∞–±–æ—Ç–ª–∏–≤—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, —Ç—ë–ø–ª—ã–π –¥—Ä—É–≥ –∏–ª–∏ –±–µ—Ä–µ–∂–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏ –º—ã—Å–ª–µ–π ‚Äî —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å.
üåø ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: —Å—Ç—Ä–µ—Å—Å, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è, —Ä–µ—à–µ–Ω–∏—è –∏ –¥—Ä.
üéß ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–µ –∞—É–¥–∏–æ-–ø–∞—É–∑—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–µ–±–µ –ø–µ—Ä–µ–¥—ã—à–∫—É.

–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü–æ—Å–ª–µ ‚Äî –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –ø–ª–∞–Ω."""

PAYWALL_POST_TEXT = (
    "–•–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–º–æ–≥–∞—Ç—å, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n"
    "–û—Ñ–æ—Ä–º–∏ –µ—ë –≤ /pay –∏ –ø–æ–ª—É—á–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"
    "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, –Ω–∞–≤–µ—Å—Ç–∏ —è—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–º–µ—Ç–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏.\n"
    "üåø –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å: —Å—Ç—Ä–µ—Å—Å, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è, —Ä–µ—à–µ–Ω–∏—è.\n"
    "üéß –ê—É–¥–∏–æ-–º–µ–¥–∏—Ç–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.\n"
    "üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ –∏ –±–µ—Ä–µ–∂–Ω–æ, –±–µ–∑ –ª–µ–∫—Ü–∏–π –∏ –æ—Ü–µ–Ω–æ–∫; –∏—Å—Ç–æ—Ä–∏—é –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –≤ /privacy.\n"
    "üî¨ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–∞—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.\n\n"
    "–ü–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ /pay –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
)

def kb_onb_step3() -> ReplyKeyboardMarkup:
    # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞ 3-–º —à–∞–≥–µ: –ø—Ä–∞–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä—è—á–µ–º –¥–æ CTA
    return kb_main_menu()


@router.message(CommandStart())
async def on_start(m: Message):
    CHAT_MODE[m.chat.id] = "talk"
    img = get_onb_image("cover")
    if img:
        try:
            await m.answer_photo(img, caption=ONB_1_TEXT, reply_markup=kb_onb_step1())
            return
        except Exception:
            pass
    await m.answer(ONB_1_TEXT, reply_markup=kb_onb_step1())


@router.callback_query(F.data == "onb:step2")
async def on_onb_step2(cb: CallbackQuery):
    """–®–ê–ì 2: —ç–∫—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª/–ø–æ–ª–∏—Ç–∏–∫–∏.
    –ü—Ä—è—á–µ–º –ø—Ä–∞–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚Äî –±–µ–∑ ¬´–ø—É—Å—Ç—ã—Ö¬ª –ø—É–∑—ã—Ä–µ–π –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –≤—Å—ë –ø—Ä–æ—Ö–æ–¥–∏–ª.
    """
    try:
        await cb.answer()
    except Exception:
        pass

    # –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–ª–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ)
    try:
        policy_ok, _ = await _gate_user_flags(int(cb.from_user.id))
    except Exception:
        policy_ok = False  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –µ—â—ë –ù–ï –ø—Ä–∏–Ω—è–ª –ø–æ–ª–∏—Ç–∏–∫—É ‚Äî —É–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if not policy_ok:
        try:
            # –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await cb.message.answer("\u2063", reply_markup=ReplyKeyboardRemove())
        except Exception:
            pass

    await cb.message.answer(ONB_2_TEXT, reply_markup=kb_onb_step2())

# ===== 3) –û–Ω–±–æ—Ä–¥–∏–Ω–≥: —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ (—à–∞–≥ 3) ============================
@router.callback_query(F.data == "onb:agree")
async def on_onb_agree(cb: CallbackQuery):
    """
    –®–ê–ì 3: —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CTA:
    - –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–∫—Ä—ã—Ç (–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–∞–ª/–ø–æ–¥–ø–∏—Å–∫–∞) ‚Äî ¬´–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?¬ª + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–ª—è –ø–ª–∞—Ç–Ω–æ–π);
      –∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–∏–∞–ª–∞ ‚Äî ¬´–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?¬ª + –ö–ù–û–ü–ö–ê ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª
    - –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç –∏ —Ç—Ä–∏–∞–ª –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–µ–π–≤–æ–ª (—Å –∫–Ω–æ–ø–∫–æ–π —Ç—Ä–∏–∞–ª–∞);
    - –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç –∏ —Ç—Ä–∏–∞–ª —É–∂–µ –±—ã–ª ‚Äî –ø–æ—Å–ª–µ—Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ–π–≤–æ–ª (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–∏–∞–ª–∞).
    """
    tg_id = cb.from_user.id
    uid = await _ensure_user_id(tg_id)

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    try:
        async with async_session() as s:
            await s.execute(
                text("UPDATE users SET policy_accepted_at = CURRENT_TIMESTAMP WHERE id = :uid"),
                {"uid": uid},
            )
            await s.commit()
    except Exception:
        pass

    try:
        await cb.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª ‚úÖ", show_alert=False)
    except Exception:
        pass

    # –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
    from app.billing.service import check_access, is_trial_active

    text_out = WHAT_NEXT_TEXT
    kb = _kb_paywall(True)

    try:
        async with async_session() as s:
            access_ok = await check_access(s, uid)     # —Ç—Ä–∏–∞–ª –ò–õ–ò –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã?
            trial_ok  = await is_trial_active(s, uid)  # –∏–º–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–∞–ª?

            if access_ok and not trial_ok:
                # –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ -> ¬´–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?¬ª + –ø—Ä–∞–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                text_out = WHAT_NEXT_TEXT
                kb = kb_main_menu()
            elif trial_ok:
                # –∞–∫—Ç–∏–≤–µ–Ω —Ç—Ä–∏–∞–ª -> ¬´–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?¬ª + –¢–û–õ–¨–ö–û ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª
                text_out = WHAT_NEXT_TEXT
                kb = _kb_paywall(False)
            else:
                # –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç: —Ä–∞–∑–ª–∏—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏ –ø–æ—Å—Ç-–ø–µ–π–≤–æ–ª –ø–æ ¬´–±—ã–ª –ª–∏ —Ç—Ä–∏–∞–ª –∏–ª–∏ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª
                r1 = await s.execute(text("SELECT trial_started_at FROM users WHERE id = :uid"), {"uid": uid})
                trial_started = r1.scalar() is not None

                r2 = await s.execute(text("""
                    SELECT 1
                    FROM subscriptions
                    WHERE user_id = :uid
                    LIMIT 1
                """), {"uid": uid})
                had_paid = r2.first() is not None

                if (not trial_started) and (not had_paid):
                    # —Å–æ–≤—Å–µ–º ¬´—á–∏—Å—Ç—ã–π¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–µ–π–≤–æ–ª (–∫–Ω–æ–ø–∫–∞ —Ç—Ä–∏–∞–ª–∞)
                    text_out = WHAT_NEXT_TEXT
                    kb = _kb_paywall(True)
                else:
                    # —Ç—Ä–∏–∞–ª –±—ã–ª –ò–õ–ò –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª–∞ -> –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç-–ø–µ–π–≤–æ–ª
                    text_out = PAYWALL_POST_TEXT
                    kb = _kb_paywall(False)
    except Exception:
        pass

    await cb.message.answer(text_out, reply_markup=kb)

# ===== –ú–µ–Ω—é/–Ω–∞–≤–∏–≥–∞—Ü–∏—è =====
@router.message(F.text == "üåø –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
@router.message(Command("work"))
async def on_work_menu(m: Message):
    async for session in get_session():
        u = await _get_user_by_tg(session, m.from_user.id)
        if not u:
            # hint removed
            return
        if not await _enforce_access_or_paywall(m, session, u.id):
            return
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    CHAT_MODE[m.chat.id] = "work"
    img = get_onb_image("work")
    if img:
        try:
            await m.answer_photo(img, caption="–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
            return
        except Exception:
            pass
    await m.answer("–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())

@router.callback_query(F.data == "work:topics")
async def on_back_to_topics(cb: CallbackQuery):
    async for session in get_session():
        u = await _get_user_by_tg(session, cb.from_user.id)
        if not u:
            await cb.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", show_alert=True)
            return
        if not await _enforce_access_or_paywall(cb, session, u.id):
            return
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    await _safe_edit(cb.message, "–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=kb_topics())
    await cb.answer()

@router.callback_query(F.data.startswith("t:"))
async def on_topic_click(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    tid = cb.data.split(":", 1)[1]
    await _safe_edit(cb.message, topic_button_title(tid), reply_markup=kb_exercises(tid))
    await cb.answer()

# ===== –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: —à–∞–≥–∏ =====
def step_keyboard(tid: str, eid: str, idx: int, total: int) -> InlineKeyboardMarkup:
    prev_idx = max(0, idx - 1)
    next_idx = min(total - 1, idx + 1)
    nav: List[InlineKeyboardButton] = []
    if idx == 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"exlist:{tid}"))
    else:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ex:{tid}:{eid}:{prev_idx}"))
    if idx < total - 1:
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"ex:{tid}:{eid}:{next_idx}"))
    else:
        nav.append(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"ex:{tid}:{eid}:finish"))
    return InlineKeyboardMarkup(inline_keyboard=[nav])

def step_keyboard_intro(tid: str, eid: str, total: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"exlist:{tid}"),
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"ex:{tid}:{eid}:0"),
        ]]
    )

@router.callback_query(F.data.startswith("exlist:"))
async def on_exlist(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    tid = cb.data.split(":", 1)[1]
    await _safe_edit(cb.message, topic_button_title(tid), reply_markup=kb_exercises(tid))
    await cb.answer()

@router.callback_query(F.data.startswith("ex:"))
async def on_ex_click(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    # ex:<tid>:<eid>:<idx|start|finish>
    try:
        parts = cb.data.split(":", 3)
        _, tid, eid = parts[0], parts[1], parts[2]
        action = parts[3] if len(parts) > 3 else "start"
    except Exception:
        await cb.answer(); return

    if eid == "reflection":
        await cb.answer()
        await _safe_edit(cb.message, "–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?", reply_markup=None)
        return

    ex = (EXERCISES.get(tid) or {}).get(eid)
    if not ex:
        await cb.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    steps = ex.get("steps") or []
    intro = ex.get("intro") or ""
    total = max(1, len(steps))

    if action == "finish":
        await _safe_edit(cb.message, "–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—ë–º—Å—è –∫ —Ç–µ–º–µ?", reply_markup=kb_exercises(tid))
        await cb.answer(); return

    if action == "start":
        text_ = intro or (steps[0] if steps else "–®–∞–≥–æ–≤ –Ω–µ—Ç.")
        await _safe_edit(cb.message, text_, reply_markup=step_keyboard_intro(tid, eid, total))
        await cb.answer(); return

    try:
        idx = int(action)
    except Exception:
        idx = 0
    idx = max(0, min(idx, total - 1))
    text_ = steps[idx] if steps else "–®–∞–≥–æ–≤ –Ω–µ—Ç."
    await _safe_edit(cb.message, text_, reply_markup=step_keyboard(tid, eid, idx, total))
    await cb.answer()

# ===== –†–µ—Ñ–ª–µ–∫—Å–∏—è =====
@router.callback_query(F.data == "reflect:start")
async def on_reflect_start(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    CHAT_MODE[cb.message.chat.id] = "reflection"
    await _safe_edit(cb.message, "–î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏–º –∏ –ø—Ä–∏—Å–ª—É—à–∞–µ–º—Å—è –∫ —Å–µ–±–µ. "
                                  "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Ç–æ–≥–æ, —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å.")
    await cb.answer()

# ===== –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ =====
def _as_track(item: object) -> dict:
    if isinstance(item, dict):
        return {
            "id": item.get("id") or item.get("key") or item.get("uid") or "",
            "title": item.get("title", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"),
            "duration": item.get("duration", ""),
            "url": item.get("url"),
        }
    if isinstance(item, (tuple, list)):
        if len(item) == 2 and isinstance(item[1], dict):
            meta = item[1]
            return {
                "id": meta.get("id") or item[0],
                "title": meta.get("title", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"),
                "duration": meta.get("duration", ""),
                "url": meta.get("url"),
            }
        if len(item) >= 3:
            return {"id": item[0], "title": item[1] or "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "url": item[2], "duration": item[3] if len(item) > 3 else ""}
        return {"id": str(item[0]), "title": str(item[-1]), "duration": "", "url": None}
    return {"id": "", "title": str(item), "duration": "", "url": None}

def kb_meditations_categories() -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for cid, label in get_categories():
        rows.append([InlineKeyboardButton(text=label, callback_data=f"med:cat:{cid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_meditations_list(cid: str) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for raw in get_items(cid):
        tr = _as_track(raw)
        label = f"{tr['title']} ¬∑ {tr.get('duration','')}".strip(" ¬∑")
        rows.append([InlineKeyboardButton(text=label, callback_data=f"med:play:{cid}:{tr['id']}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="med:cats")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

MEDITATIONS_TEXT = (
    "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏.\n"
    "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É ‚Äî –ø—Ä–∏—à–ª—é –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–∞–∫—Ç–∏–∫—É.\n"
    "–ù–∞—á–∏–Ω–∞–π —Å —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è."
)

@router.message(Command(commands=["meditations", "meditions", "meditation"]))
async def cmd_meditations(m: Message):
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    img = get_onb_image("meditations")
    if img:
        try:
            await m.answer_photo(img, caption=MEDITATIONS_TEXT, reply_markup=kb_meditations_categories()); return
        except Exception:
            pass
    await _safe_edit(m, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())

@router.message(F.text == "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
async def on_meditations_btn(m: Message):
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    await _safe_edit(m, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories())

@router.callback_query(F.data == "med:cats")
async def on_med_cats(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    await _safe_edit(cb.message, MEDITATIONS_TEXT, reply_markup=kb_meditations_categories()); await cb.answer()

@router.callback_query(F.data.startswith("med:cat:"))
async def on_med_cat(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    cid = cb.data.split(":", 2)[2]
    title = dict(get_categories()).get(cid, "–ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
    await _safe_edit(cb.message, f"üéß {title}", reply_markup=kb_meditations_list(cid))
    await cb.answer()

@router.callback_query(F.data.startswith("med:play:"))
async def on_med_play(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    _, _, cid, mid = cb.data.split(":", 3)
    raw = get_item(cid, mid)
    tr = _as_track(raw) if raw is not None else None
    if not tr:
        await cb.answer("–ù–µ –Ω–∞—à—ë–ª –∞—É–¥–∏–æ", show_alert=True); return

    caption = f"üéß {tr.get('title','–ú–µ–¥–∏—Ç–∞—Ü–∏—è')} ¬∑ {tr.get('duration','')}".strip(" ¬∑")
    url = tr.get("url")

    try:
        await cb.bot.send_chat_action(cb.message.chat.id, "upload_audio")
    except Exception:
        pass

    sent_ok = False
    if url:
        try:
            await cb.message.answer_audio(url, caption=caption)
            sent_ok = True
        except Exception:
            try:
                await cb.message.answer(f"{caption}\n{url}")
                sent_ok = True
            except Exception:
                pass
    if not sent_ok:
        await cb.message.answer(caption)

    # –º—è–≥–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞
    try:
        import json
        uid = await _ensure_user_id(cb.from_user.id)
        async with async_session() as s:
            await s.execute(
                text("""
                    INSERT INTO bot_events (user_id, event_type, payload, created_at)
                    VALUES (:uid, :etype, :payload, CURRENT_TIMESTAMP)
                """),
                {
                    "uid": uid,
                    "etype": "audio_play",
                    "payload": json.dumps(
                        {"cid": cid, "mid": mid, "title": tr.get("title"), "duration": tr.get("duration"), "url": tr.get("url")},
                        ensure_ascii=False,
                    ),
                },
            )
            await s.commit()
    except Exception:
        pass

    await cb.answer("–ó–∞–ø—É—Å–∫–∞–π, —è —Ä—è–¥–æ–º üíõ")

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@router.message(Command("settings"))
@router.message(Command("setting"))
async def on_settings(m: Message):
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    await m.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb_settings())

@router.callback_query(F.data == "menu:main")
async def on_menu_main(cb: CallbackQuery):
    await cb.message.answer("\u2063", reply_markup=kb_main_menu()); await cb.answer()

@router.callback_query(F.data == "menu:settings")
async def on_menu_settings(cb: CallbackQuery):
    if _require_access_msg(cb.message if hasattr(cb, "message") else cb): return
    await _safe_edit(cb.message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb_settings()); await cb.answer()

@router.callback_query(F.data == "settings:tone")
async def on_settings_tone(cb: CallbackQuery):
    await _safe_edit(cb.message, "–í—ã–±–µ—Ä–∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è:", reply_markup=kb_tone_picker()); await cb.answer()

@router.callback_query(F.data == "settings:privacy")
async def on_settings_privacy(cb: CallbackQuery):
    rm = await kb_privacy_for(cb.message.chat.id)
    await _safe_edit(cb.message, "–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:", reply_markup=rm); await cb.answer()

@router.callback_query(F.data == "privacy:toggle")
async def on_privacy_toggle(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    mode = (await _db_get_privacy(chat_id) or "insights").lower()
    new_mode = "none" if mode != "none" else "insights"
    await _db_set_privacy(chat_id, new_mode)
    state_txt = "–≤—ã–∫–ª—é—á–µ–Ω–æ" if new_mode == "none" else "–≤–∫–ª—é—á–µ–Ω–æ"
    rm = await kb_privacy_for(chat_id)
    await _safe_edit(cb.message, f"–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: <b>{state_txt}</b>.", reply_markup=rm)
    await cb.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")

@router.callback_query(F.data == "privacy:clear")
async def on_privacy_clear(cb: CallbackQuery):
    # 1) —á–∏—Å—Ç–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        msg_count = await _purge_user_history(cb.from_user.id)
    except Exception:
        await cb.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", show_alert=True)
        return

    # 2) —á–∏—Å—Ç–∏–º —Å–∞–º–º–∞—Ä–∏ (–ë–î + Qdrant)
    try:
        sum_count = await _purge_user_summaries_all(cb.from_user.id)
    except Exception:
        sum_count = 0  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è UX

    await cb.answer("–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ ‚úÖ", show_alert=True)
    text_ = (
        "–ì–æ—Ç–æ–≤–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n"
        f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–∏–∞–ª–æ–≥–∞: {msg_count}.\n"
        f"–£–¥–∞–ª–µ–Ω–æ —Å–∞–º–º–∞—Ä–µ–π: {sum_count}."
    )
    rm = await kb_privacy_for(cb.message.chat.id)
    await _safe_edit(cb.message, text_, reply_markup=rm)

@router.message(Command("privacy"))
async def on_privacy_cmd(m: Message):
    mode = (await _db_get_privacy(m.chat.id) or "insights").lower()
    state = "–≤—ã–∫–ª—é—á–µ–Ω–æ" if mode == "none" else "–≤–∫–ª—é—á–µ–Ω–æ"
    rm = await kb_privacy_for(m.chat.id)
    await m.answer(f"–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: <b>{state}</b>.", reply_markup=rm)

@router.message(Command("help"))
async def on_help(m: Message):
    await m.answer("–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Å–µ—Ä–≤–∏—Å—É, –Ω–∞–ø–∏—à–∏ –Ω–∞ selflect@proton.me ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º.")

@router.message(Command("menu"))
async def on_menu(m: Message):
    msg = await m.answer('–ú–µ–Ω—é', reply_markup=kb_main_menu())
    try:
        await msg.delete()
    except Exception:
        pass

# ===== –¢–æ–Ω –∏ —Ä–µ–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ =====
@router.message(F.text == "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
@router.message(Command("talk"))
async def on_talk(m: Message):
    async for session in get_session():
        u = await _get_user_by_tg(session, m.from_user.id)
        if not u:
            # hint removed
            return
        if not await _enforce_access_or_paywall(m, session, u.id):
            return

    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    CHAT_MODE[m.chat.id] = "talk"
    await m.answer("–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é. –û —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?", reply_markup=kb_main_menu())

@router.message(Command("tone"))
async def on_tone_cmd(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è:", reply_markup=kb_tone_picker())

@router.callback_query(F.data.startswith("tone:"))
async def on_tone_pick(cb: CallbackQuery):
    style = cb.data.split(":", 1)[1]
    USER_TONE[cb.message.chat.id] = style
    await cb.answer("–°—Ç–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ", show_alert=False)
    await _safe_edit(cb.message, f"–¢–æ–Ω –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{style}</b> ‚úÖ", reply_markup=kb_settings())

async def _answer_with_llm(m: Message, user_text: str):
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
    1) –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ app/prompts.py (SYSTEM_PROMPT).
    2) –°–≤–µ—Ä—Ö—É –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–Ω, (–æ–ø—Ü.) —Ä–µ—Ñ–ª–µ–∫—Å–∏—é, —Ö–∏–Ω—Ç –ø–æ –¥–ª–∏–Ω–µ –æ—Ç–≤–µ—Ç–∞.
    3) –ü–æ–¥–º–µ—à–∏–≤–∞–µ–º RAG (reflectai_corpus_v2) –æ—Ç–¥–µ–ª—å–Ω—ã–º system-—Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    4) –ü–æ–¥–º–µ—à–∏–≤–∞–µ–º ¬´–¥–æ–ª–≥—É—é –ø–∞–º—è—Ç—å¬ª (daily/weekly/monthly summaries) –æ—Ç–¥–µ–ª—å–Ω—ã–º system-—Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    5) –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î (~90 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥), –∑–∞—Ç–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """

    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ä—Ö —Ñ–∞–π–ª–∞
    import random
    from app.prompts import LENGTH_HINTS

    chat_id = m.chat.id
    mode = CHAT_MODE.get(chat_id, "talk")

    # 0) –°–ø–µ—Ü-–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã ¬´—á—Ç–æ –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ X –Ω–∞–∑–∞–¥/–Ω–µ–¥–∞–≤–Ω–æ‚Ä¶¬ª
    try:
        if await _maybe_answer_memory_question(m, user_text):
            return
    except Exception:
        pass  # –Ω–µ –º–µ—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ–∫—É

    # 1) SYSTEM_PROMPT + —Ç–æ–Ω + (–æ–ø—Ü.) —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
    style = USER_TONE.get(chat_id, "default")  # "default" | "friend" | "therapist" | "18plus"
    sys_prompt = SYSTEM_PROMPT
    tone_suffix = STYLE_SUFFIXES.get(style, "")
    if tone_suffix:
        sys_prompt += "\n\n" + tone_suffix
    if mode == "reflection" and REFLECTIVE_SUFFIX:
        sys_prompt += "\n\n" + REFLECTIVE_SUFFIX

    # –Ø–í–ù–ê–Ø –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª–∏–Ω—ã –ø–æ —Å–ª–æ–≤–∞–º-—Ç—Ä–∏–≥–≥–µ—Ä–∞–º (–ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –æ–±—â–∏–π picker)
    try:
        t = (user_text or "").lower()
        need_deep = any(x in t for x in ["—Ä–∞–∑–ª–æ–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ", "–ø–æ–¥—Ä–æ–±–Ω–æ", "–ø–ª–∞–Ω", "—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ —à–∞–≥–∞–º", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])
        need_medium = any(x in t for x in ["–æ–±—ä—è—Å–Ω–∏", "–ø–æ—è—Å–Ω–∏", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π", "–∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø–æ—á–µ–º—É"])

        if need_deep:
            sys_prompt += "\n\n" + LENGTH_HINTS["deep"]
        elif need_medium:
            sys_prompt += "\n\n" + LENGTH_HINTS["medium"]
        else:
            # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –¥–æ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º –Ω–∏–∂–µ
            sys_prompt += "\n\n" + LENGTH_HINTS["short"]
    except Exception:
        pass

    # 1.1) –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—ä—ë–º–∞ –æ—Ç–≤–µ—Ç–∞ (–º–∏–∫—Ä–æ/–∫–æ—Ä–æ—Ç–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≥–ª—É–±–æ–∫–∏–π)
    def _pick_length_profile(ut: str, turns: int) -> str:
        t = (ut or "").lower()
        # –ó–∞–ø—Ä–æ—Å—ã ¬´—á—Ç–æ –¥–µ–ª–∞—Ç—å / –ø–ª–∞–Ω / —Ä–∞–∑–ª–æ–∂–∏ / –ø–æ–¥—Ä–æ–±–Ω–æ¬ª
        if any(k in t for k in ("—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–ø–ª–∞–Ω", "—Å—Ç—Ä—É–∫—Ç—É—Ä", "—Ä–∞–∑–ª–æ–∂–∏", "–ø–æ–¥—Ä–æ–±–Ω", "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "—à–∞–≥")):
            return "deep" if "–ø–æ–¥—Ä–æ–±" in t or "–ø–ª–∞–Ω" in t else "medium"
        # –ë—ã—Å—Ç—Ä—ã–µ ¬´—É—Å–ø–æ–∫–æ–π / –ø–∞–Ω–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ / —Ç—Ä–µ–≤–æ–≥–∞ / –¥—ã—Ö–∞–Ω–∏–µ / –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å¬ª
        if any(k in t for k in ("–ø–∞–Ω–∏—á–µ—Å–∫", "—Ç—Ä–µ–≤–æ–≥", "—É—Å–ø–æ–∫–æ–π", "–¥—ã—à–∞–Ω", "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å", "–ø–æ–º–æ–≥–∏ —Å–µ–π—á–∞—Å")):
            return "micro" if "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å" in t or "–ø–∞–Ω–∏—á–µ—Å–∫" in t else "short"
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –º—è–≥–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å + —á—É—Ç—å –≥–ª—É–±–∂–µ –Ω–∞ 1-–º –∏ 5‚Äì6-–º —Ö–æ–¥–∞—Ö
        base = [("micro", 0.15), ("short", 0.45), ("medium", 0.30), ("deep", 0.10)]
        if turns in (0, 1, 5, 6):
            base = [("micro", 0.10), ("short", 0.40), ("medium", 0.35), ("deep", 0.15)]
        r = random.random()
        acc = 0.0
        for key, p in base:
            acc += p
            if r <= acc:
                return key
        return "short"

    # 2) –ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã –∏–∑ –ë–î (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
    history_msgs: List[dict] = []
    try:
        history_msgs = await _load_history_from_db(m.from_user.id, limit=90, hours=24*90)
    except Exception:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: in-memory
        try:
            recent = get_recent_messages(chat_id, limit=90)
            for r in recent:
                role = "assistant" if r["role"] == "bot" else "user"
                history_msgs.append({"role": role, "content": r["text"]})
        except Exception:
            history_msgs = []

    # 1.2) –ü—Ä–∏–º–µ–Ω—è–µ–º —Ö–∏–Ω—Ç –ø–æ –¥–ª–∏–Ω–µ (–ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–Ω–∞–µ–º –Ω–æ–º–µ—Ä —Ö–æ–¥–∞)
    try:
        turn_idx = len(history_msgs)  # —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ (–ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º —é–∑–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–µ–º)
    except Exception:
        turn_idx = 0
    length_key = _pick_length_profile(user_text, turn_idx)
    len_hint = LENGTH_HINTS.get(length_key, "")
    if len_hint:
        sys_prompt += "\n\n" + len_hint

    # 3) RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º system-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
    rag_ctx = ""
    if rag_search is not None:
        try:
            # –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π k/max_chars –æ—Ç –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
            qlen = len((user_text or "").split())
            k = 3 if qlen < 8 else 6 if qlen < 20 else 8
            max_chars = 600 if qlen < 8 else 1000 if qlen < 30 else 1400
            rag_ctx = await rag_search(user_text, k=k, max_chars=max_chars, lang="ru")
        except Exception:
            rag_ctx = ""

    # 4) –î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å (—Å–∞–º–º–∞—Ä–∏): daily/weekly/monthly ‚Äî –∫–∞–∫ –º—è–≥–∫–∏–π ¬´–ø—Ä–æ—à–ª—ã–π –æ–ø—ã—Ç¬ª
    sum_block = ""
    try:
        uid = await _ensure_user_id(m.from_user.id)
        hits = await search_summaries(user_id=uid, query=user_text, top_k=4)
        ids = [int(h.get("summary_id")) for h in (hits or []) if str(h.get("summary_id", "")).isdigit()]
        items = await _fetch_summary_texts_by_ids(ids)

        if items:
            # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ –∏ –æ–±—â–∏–π –±–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ ¬´—Å—ä–µ–¥–∞—Ç—å¬ª –∫–æ–Ω—Ç–µ–∫—Å—Ç
            def _short(s: str, n: int = 260) -> str:
                s = (s or "").strip().replace("\r", " ").replace("\n", " ")
                return s if len(s) <= n else (s[: n - 1] + "‚Ä¶")

            lines = [f"‚Ä¢ [{it['period']}] {_short(it.get('text', ''))}" for it in items]
            sum_text = "\n".join(lines).strip()
            MAX_SUMMARY_BLOCK = 900
            if len(sum_text) > MAX_SUMMARY_BLOCK:
                sum_text = sum_text[: MAX_SUMMARY_BLOCK - 1] + "‚Ä¶"

            sum_block = "–ó–∞–º–µ—Ç–∫–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ (—É—á–∏—Ç—ã–≤–∞–π –ø–æ –º–µ—Ä–µ —É–º–µ—Å—Ç–Ω–æ—Å—Ç–∏):\n" + sum_text
    except Exception:
        sum_block = ""

    # 5) –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
    # –ü–æ—Ä—è–¥–æ–∫: system —Å—Ç–∏–ª—å -> system RAG -> system summaries -> –∏—Å—Ç–æ—Ä–∏—è -> —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages: List[Dict[str, str]] = [{"role": "system", "content": sys_prompt}]
    if rag_ctx:
        messages.append({"role": "system", "content": f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ:\n{rag_ctx}"})
    if sum_block:
        messages.append({"role": "system", "content": sum_block})

    messages += history_msgs
    messages.append({"role": "user", "content": user_text})

    # 6) –í—ã–∑–æ–≤ LLM
    if chat_with_style is None:
        await send_and_log(m, "–Ø —Ç–µ–±—è —Å–ª—ã—à—É. –°–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–∞—é—Å—å‚Ä¶", reply_markup=kb_main_menu())
        return

    # –ñ–∏–≤–∞—è —Ä–µ—á—å: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–ª–µ–≥–∫–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏
    seed = f"{user_text}|{turn_idx}"
    temp = 0.66 + (abs(hash(seed)) % 17) / 100.0  # 0.66‚Äì0.82
    LLM_MAX_TOKENS = 480

    try:
        reply = await chat_with_style(
            messages=messages,
            temperature=temp,
            max_tokens=LLM_MAX_TOKENS,
        )
    except TypeError:
        # –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
        reply = await chat_with_style(messages, temperature=temp, max_tokens=LLM_MAX_TOKENS)
    except Exception:
        reply = ""

    if not reply or not reply.strip():
        reply = "–•–æ—á—É –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –ø–æ—Ç–æ—á–Ω–µ–µ. –ß—Ç–æ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ ‚Äî –æ–¥–∏–Ω-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?"

    # NEW: –ø–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä ‚Äî –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
    try:
        reply = _enforce_single_question(reply)
    except Exception:
        pass

    # --- –ê–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª: –º—è–≥–∫–∞—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ ---
    try:
        # –±–µ—Ä—ë–º/—Å–æ–∑–¥–∞—ë–º in-memory LRU –≤ –º–æ–¥—É–ª–µ
        store = globals().setdefault("LAST_OPENERS", {})
        from collections import deque as _dq
        if chat_id not in store:
            store[chat_id] = _dq(maxlen=3)

        def _extract_opener_local(text: str) -> str:
            line = (text or "").strip().split("\n", 1)[0]
            return line[:60].lower()

        opener = _extract_opener_local(reply)
        seen = store.get(chat_id)
        opener_seen = opener in seen

        if opener_seen and chat_with_style is not None:
            # –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ö–∏–Ω—Ç: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ü–ï–†–í–£–Æ —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∫–ª–∏—à–µ/–ø–æ–≤—Ç–æ—Ä–æ–≤
            sys_prompt_r = sys_prompt + "\n\n(–ü–µ—Ä–µ–ø–∏—à–∏ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∫–ª–∏—à–µ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤, –Ω–∞—á–Ω–∏ —Å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ø–æ —Å—É—Ç–∏ —Å–∏—Ç—É–∞—Ü–∏–∏.)"

            messages_r: List[Dict[str, str]] = [{"role": "system", "content": sys_prompt_r}]
            if rag_ctx:
                messages_r.append({"role": "system", "content": f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ:\n{rag_ctx}"})
            if sum_block:
                messages_r.append({"role": "system", "content": sum_block})
            messages_r += history_msgs
            messages_r.append({"role": "user", "content": user_text})

            try:
                reply_r = await chat_with_style(messages=messages_r, temperature=temp, max_tokens=LLM_MAX_TOKENS)
            except TypeError:
                reply_r = await chat_with_style(messages_r, temperature=temp, max_tokens=LLM_MAX_TOKENS)
            except Exception:
                reply_r = ""

            if reply_r and reply_r.strip():
                try:
                    reply = _enforce_single_question(reply_r)
                except Exception:
                    reply = reply_r

        # –æ–±–Ω–æ–≤–ª—è–µ–º LRU
        seen.append(_extract_opener_local(reply))
    except Exception:
        pass

    # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ 'bot' (–¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–π –ø–∞–º—è—Ç–∏)
    await send_and_log(m, reply, reply_markup=kb_main_menu())

# ===== –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è =====
@router.message(F.text & ~F.text.startswith("/"))
async def on_text(m: Message):
    if _require_access_msg(m.message if hasattr(m, "message") else m): return
    chat_id = m.chat.id

    if CHAT_MODE.get(chat_id, "talk") in ("talk", "reflection"):
        await _answer_with_llm(m, m.text or ""); return

    if CHAT_MODE.get(chat_id) == "work":
        await m.answer(
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª. –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª.",
            reply_markup=kb_main_menu(),
        ); return

    await m.answer("–Ø —Ä—è–¥–æ–º –∏ –Ω–∞ —Å–≤—è–∑–∏. –ù–∞–∂–º–∏ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª –∏–ª–∏ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª.", reply_markup=kb_main_menu())

# === /pay ‚Äî –ø–ª–∞–Ω—ã —Å 4 —Ç–∞—Ä–∏—Ñ–∞–º–∏ =========================================
from aiogram.filters import Command as _CmdPay

_PLANS = {
    "week":  (499,  "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é"),
    "month": (1190, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"),
    "q3":    (2990, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞"),
    "year":  (7990, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥"),
}

def _kb_pay_plans() -> _IKM:
    return _IKM(inline_keyboard=[
        [_IKB(text="–ù–µ–¥–µ–ª—è ‚Äî 499 ‚ÇΩ",    callback_data="pay:plan:week")],
        [_IKB(text="–ú–µ—Å—è—Ü ‚Äî 1190 ‚ÇΩ",    callback_data="pay:plan:month")],
        [_IKB(text="3 –º–µ—Å—è—Ü–∞ ‚Äî 2990 ‚ÇΩ", callback_data="pay:plan:q3")],
        [_IKB(text="–ì–æ–¥ ‚Äî 7990 ‚ÇΩ",      callback_data="pay:plan:year")],
    ])

@router.message(_CmdPay("pay"))
async def on_pay(m: Message):
    tg_id = m.from_user.id

    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(select(User).where(User.tg_id == tg_id))).scalar_one_or_none()
        if not u:
            await m.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.", reply_markup=kb_main_menu())
            return

        # 1) –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞?
        active_sub = await _get_active_subscription(session, u.id)
        if active_sub:
            until = active_sub["subscription_until"]
            await m.answer(
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ\n–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–æ <b>{_fmt_dt(until)}</b>.\n\n"
                f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=_kb_active_sub_actions()
            )
            return

        # 2) –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–∞–ª?
        if await is_trial_active(session, u.id):
            until = getattr(u, "trial_expires_at", None)
            tail = f"–¥–æ <b>{_fmt_dt(until)}</b>" if until else "—Å–µ–π—á–∞—Å"
            await m.answer(
                f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî {tail}. ‚úÖ\n"
                f"–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã.\n\n"
                f"–•–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–∞–∑—É? (–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ /pay.)",
                reply_markup=_kb_trial_pay()
            )
            return

    # 3) –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    await m.answer(
        "–ü–æ–¥–ø–∏—Å–∫–∞ ¬´–ü–æ–º–Ω–∏¬ª\n"
        "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É\n\n"
        "‚ö†Ô∏è <i>–í–∞–∂–Ω–æ: –ø–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º. –ï–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ /pay.</i>\n\n"
        "<b>–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω:</b>",
        reply_markup=_kb_pay_plans()
    )

@router.callback_query(F.data.startswith("pay:plan:"))
async def on_pick_plan(cb: CallbackQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ. –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa –∏ –¥–∞—ë–º —Å—Å—ã–ª–∫—É.
    """
    # raw: pay:plan:month | pay:plan:week | pay:plan:q3 | pay:plan:year ...
    try:
        raw_plan = (cb.data or "").split(":", 2)[-1].strip().lower()
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return

    # –ê–ª–∏–∞—Å—ã -> –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫)
    PLAN_ALIAS = {
        "q3": "quarter",
        "3m": "quarter",
        "quarter": "quarter",
        "week": "week",
        "weekly": "week",
        "month": "month",
        "year": "year",
        "annual": "year",
        "y": "year",
        "q": "quarter",
    }
    plan = PLAN_ALIAS.get(raw_plan, raw_plan)

    if plan not in _PLANS:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω", show_alert=True)
        return

    amount, desc = _PLANS[plan]  # int RUB, str

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
    async for session in get_session():
        from app.db.models import User
        u = (await session.execute(
            select(User).where(User.tg_id == cb.from_user.id)
        )).scalar_one_or_none()

        if not u:
            await cb.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", show_alert=True)
            return

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –∏ –ø–æ–ª—É—á–∏—Ç—å redirect URL
        try:
            pay_url = create_payment_link(
                amount_rub=int(amount),
                description=desc,
                metadata={"user_id": int(u.id), "plan": plan},
                # return_url –±–µ—Ä—ë—Ç—Å—è –∏–∑ YK_RETURN_URL (ENV), –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
            )
        except Exception as e:
            # –ù–ï –≥–ª–æ—Ç–∞–µ–º –ø—Ä–∏—á–∏–Ω—É ‚Äî –ª–æ–≥–∏—Ä—É–µ–º
            print(f"[pay] create_payment_link raised: {e}")
            pay_url = None

    if not pay_url:
        # –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∏—Ç 401/422 –∏ —Ç.–ø., –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –≤ –ª–æ–≥–∞—Ö –∏–∑ yookassa_client.py
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        await cb.answer()
        return

    kb = _IKM(inline_keyboard=[[ _IKB(text="–û–ø–ª–∞—Ç–∏—Ç—å üí≥", url=pay_url) ]])
    await cb.message.answer(
        f"<b>{desc}</b>\n–°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n\n–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å üí≥¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ.",
        reply_markup=kb
    )
    await cb.answer()

# ===== Gate middleware: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π mount =====
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from typing import Callable, Awaitable, Any, Dict, Tuple, Union

AllowedEvent = Union[Message, CallbackQuery]
ALLOWED_CB_PREFIXES = ("trial:", "pay:", "plan:", "tariff:", "yk:")

async def _gate_user_flags(tg_id: int) -> Tuple[bool, bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (policy_ok, access_ok)
    policy_ok ‚Äî –ø—Ä–∏–Ω—è—Ç –ª–∏ —ç–∫—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª;
    access_ok ‚Äî –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø (—Ç—Ä–∏–∞–ª –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞).
    """
    from sqlalchemy import text
    from app.db.core import async_session
    from app.billing.service import check_access

    async with async_session() as s:
        r = await s.execute(text("SELECT id, policy_accepted_at FROM users WHERE tg_id = :tg"), {"tg": int(tg_id)})
        row = r.first()
        if not row:
            return False, False
        uid = int(row[0])
        policy_ok = bool(row[1])

    async with async_session() as s2:
        try:
            access_ok = await check_access(s2, uid)
        except Exception:
            access_ok = False

    return policy_ok, access_ok


async def _gate_send_policy(event: AllowedEvent) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å ¬´–ü—Ä–∏–Ω–∏–º–∞—é¬ª."""
    import os
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÑ –ü—Ä–∞–≤–∏–ª–∞", url=os.getenv("LEGAL_POLICY_URL") or "https://example.com/policy"),
            InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞", url=os.getenv("LEGAL_OFFER_URL")  or "https://example.com/offer"),
        ],
        [InlineKeyboardButton(text="–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ", callback_data="onb:agree")],
    ])
    text = ("–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫—É. "
            "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–º –æ–±–æ–∏–º –±—ã–ª–æ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.")
    target = event.message if isinstance(event, CallbackQuery) else event
    await target.answer(text, reply_markup=kb)


async def _gate_send_trial_cta(event: Union[Message, CallbackQuery]) -> None:
    """
    –ü–µ–π–≤–æ–ª –≤ ¬´–∑–∞–∫—Ä—ã—Ç—ã—Ö¬ª –º–µ—Å—Ç–∞—Ö:
    - –µ—Å–ª–∏ —Ç—Ä–∏–∞–ª–∞ –µ—â—ë –Ω–µ –±—ã–ª–æ –ò –Ω–µ –±—ã–ª–æ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤—ã–π (–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞—á–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π‚Ä¶¬ª)
    - –∏–Ω–∞—á–µ (—Ç—Ä–∏–∞–ª —É–∂–µ –±—ã–ª –ò–õ–ò –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞, –Ω–æ –∏—Å—Ç–µ–∫–ª–∞/–æ—Ç–∫–ª—é—á–µ–Ω–∞) ‚Äî –ø–æ—Å—Ç-—Ç—Ä–∏–∞–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ–π–≤–æ–ª (—Ç–æ–ª—å–∫–æ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª)
    """
    from sqlalchemy import text
    from app.db.core import async_session

    tg_id = getattr(getattr(event, "from_user", None), "id", None)
    show_trial = False
    try:
        async with async_session() as s:
            # –±—ã–ª –ª–∏ –∫–æ–≥–¥–∞-–ª–∏–±–æ —Ç—Ä–∏–∞–ª
            trial_started = False
            if tg_id:
                r1 = await s.execute(
                    text("SELECT trial_started_at FROM users WHERE tg_id = :tg"),
                    {"tg": int(tg_id)},
                )
                trial_started = r1.scalar() is not None

            # –±—ã–ª–∞ –ª–∏ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–ª—é–±–∞—è –∑–∞–ø–∏—Å—å –≤ subscriptions)
            had_paid = False
            if tg_id:
                r2 = await s.execute(text("""
                    SELECT 1
                    FROM subscriptions AS s
                    JOIN users u ON u.id = s.user_id
                    WHERE u.tg_id = :tg
                    LIMIT 1
                """), {"tg": int(tg_id)})
                had_paid = r2.first() is not None

            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç—Ä–∏–∞–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ù–ò —Ç—Ä–∏–∞–ª–∞, –ù–ò –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            show_trial = (not trial_started) and (not had_paid)
    except Exception:
        show_trial = False  # –±–µ–∑–æ–ø–∞—Å–Ω–æ: –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç-–ø–µ–π–≤–æ–ª

    text_out = WHAT_NEXT_TEXT if show_trial else PAYWALL_POST_TEXT
    kb = _kb_paywall(show_trial)

    target = event.message if isinstance(event, CallbackQuery) else event
    await target.answer(text_out, reply_markup=kb)


class GateMiddleware(BaseMiddleware):
    """
    1) –ü–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç policy ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ /start –∏ onb:* (–æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —ç–∫—Ä–∞–Ω policy).
    2) –ü–æ—Å–ª–µ policy, –Ω–æ –¥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ /pay –∏ trial/pay/plan/tariff/yk:* (–æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî CTA).
    3) –ö–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë.
    """
    async def __call__(
        self,
        handler: Callable[[AllowedEvent, Dict[str, Any]], Awaitable[Any]],
        event: AllowedEvent,
        data: Dict[str, Any]
    ) -> Any:
        try:
            tg_id = getattr(getattr(event, "from_user", None), "id", None)
            if not tg_id:
                return await handler(event, data)

            policy_ok, access_ok = await _gate_user_flags(int(tg_id))

            # 1) policy –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç
            if not policy_ok:
                if isinstance(event, Message):
                    if (event.text or "").startswith("/start"):
                        return await handler(event, data)
                elif isinstance(event, CallbackQuery):
                    if (event.data or "").startswith("onb:"):
                        return await handler(event, data)
                await _gate_send_policy(event)
                return

            # 2) policy –ø—Ä–∏–Ω—è—Ç, –Ω–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç
            if not access_ok:
                if isinstance(event, Message):
                    if (event.text or "").startswith("/pay"):
                        return await handler(event, data)
                elif isinstance(event, CallbackQuery):
                    d = (event.data or "")
                    if d.startswith(ALLOWED_CB_PREFIXES):
                        return await handler(event, data)
                await _gate_send_trial_cta(event)
                return

            # 3) –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë
            return await handler(event, data)

        except Exception:
            # fail-open ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
            return await handler(event, data)


# --- –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π mount, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π ---
if not getattr(router, "_gate_mounted", False):
    router.message.middleware(GateMiddleware())
    router.callback_query.middleware(GateMiddleware())
    router._gate_mounted = True

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å–ª–µ Gate (—á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å —ç–∫—Ä–∞–Ω—ã-–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã)
router.message.middleware(LogIncomingMiddleware())
router.callback_query.middleware(LogIncomingMiddleware())

@router.message(Command("about"))
async def cmd_about(m: Message):
    import os
    email = os.getenv("CONTACT_EMAIL") or "support@example.com"
    txt = (
        "¬´–ü–æ–º–Ω–∏¬ª ‚Äî —Ç—ë–ø–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏ –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º—ã—Å–ª–∏. "
        "–ë–µ—Ä–µ–∂–Ω–∞—è –∏ –±–µ–∑–æ—Ü–µ–Ω–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n\n"
        "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:\n"
        "‚Ä¢ ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª ‚Äî –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞: —Ä–∞–∑–ª–æ–∂–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, –Ω–∞–π—Ç–∏ –æ–ø–æ—Ä—É, –Ω–∞–º–µ—Ç–∏—Ç—å 1 –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥.\n"
        "‚Ä¢ ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è¬ª ‚Äî –º–∏–Ω–∏-–ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥ –∑–∞–ø—Ä–æ—Å—ã: —Å—Ç—Ä–µ—Å—Å, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ, —Ä–µ—à–µ–Ω–∏—è –∏ –¥—Ä.\n"
        "‚Ä¢ ¬´–ú–µ–¥–∏—Ç–∞—Ü–∏–∏¬ª ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–µ –∞—É–¥–∏–æ-–ø–∞—É–∑—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–µ–±–µ –ø–µ—Ä–µ–¥—ã—à–∫—É.\n\n"
        "–ù–∞—à–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "‚Äî –º—è–≥–∫–æ–µ –∏ –¥—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –ø—Ä–∞–≤–∏–ª –∏ –ª–µ–∫—Ü–∏–π ‚Äî —Å–∞–º —Ä–µ—à–∞–π –∫–∞–∫ –∏ –æ —á–µ–º —Ö–æ—á–µ—Ç—Å—è –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥;\n"
        "‚Äî –±–µ—Ä–µ–∂–Ω—ã–µ —Ä–∞–º–∫–∏ –ö–ü–¢/–ê–ö–¢/–≥–µ—à—Ç–∞–ª—å—Ç–∞; –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —à–∞–≥–∏;\n"
        "‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ /privacy (—Ç–æ–≥–¥–∞ –º—ã –Ω–µ –±—É–¥–µ–º –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä—ã).\n\n"
        "–ú—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º ¬´–ü–æ–º–Ω–∏¬ª: –Ω–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, —Ä–µ–∂–∏–º –¥–Ω–µ–≤–Ω–∏–∫–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –±–æ–ª—å—à–µ –º–µ–¥–∏—Ç–∞—Ü–∏–π.\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: {email}"
    ).format(email=email)
    await m.answer(txt)

from __future__ import annotations

import re
from typing import Dict, Optional

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand, FSInputFile
)

from app.llm_adapter import LLMAdapter
from app.safety import is_crisis, CRISIS_REPLY
from app.db import db_session, User
from app.rag_qdrant import search as rag_search
from app.prompts import POMNI_MASTER_PROMPT, ASSISTANT_PROMPT
from app.memory import (
    add_journal_entry, update_user_memory, get_user_memory,
    get_user_settings, set_user_tone, set_user_method,
    is_help_intent, log_event
)

router = Router()
LLM = LLMAdapter()

# --------- –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ (in-memory) ----------
LAST_SUGGESTED: Dict[int, Optional[str]] = {}   # chat_id -> last rag tag
DIARY_MODE: Dict[int, bool] = {}                # chat_id -> bool (true = "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
CURRENT_FOCUS: Dict[int, str] = {}              # chat_id -> –ø–æ—Å–ª–µ–¥–Ω—è—è –º—ã—Å–ª—å/—Ç–µ–º–∞ (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç)

# –¢–µ–∫—É—â–∞—è "–ø–æ–¥—Ç–µ–º–∞" (–∫–∞—Ç–µ–≥–æ—Ä–∏—è), –∏ –±—ã—Å—Ç—Ä—ã–π —Å–¥–≤–∏–≥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
CURRENT_TOPIC: Dict[int, str] = {}              # chat_id -> slug ("work", "rel", ...)
FLOW_MODE: Dict[int, Optional[str]] = {}        # chat_id -> "reflect"|"microstep"|"pause"|None

TOPIC_TITLES = {
    "work": "–†–∞–±–æ—Ç–∞",
    "rel": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
    "self": "–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞",
    "sleep": "–°–æ–Ω",
    "prod": "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    "health": "–ó–¥–æ—Ä–æ–≤—å–µ",
    "money": "–î–µ–Ω—å–≥–∏",
    "study": "–£—á—ë–±–∞",
    "family": "–°–µ–º—å—è",
    "friends": "–î—Ä—É–∑—å—è",
    "mood": "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
    "other": "–î—Ä—É–≥–æ–µ",
}

TOPIC_KEYWORDS = {
    "work": r"\b(—Ä–∞–±–æ—Ç–∞|–æ—Ñ–∏—Å|–Ω–∞—á–∞–ª—å–Ω–∏–∫|–∫–æ–ª–ª–µ–≥|—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏|–∫–∞—Ä—å–µ—Ä|–≤—ã–≥–æ—Ä|–∞–ø–∞—Ç–∏[—è–∏])\b",
    "rel": r"\b(–æ—Ç–Ω–æ—à–µ–Ω|–ø–∞—Ä—Ç–Ω|–ø–∞—Ä–Ω|–¥–µ–≤—É—à–∫|–∂–µ–Ω|–º—É–∂|—Ä–∞–∑–≤–æ–¥|—Å—Å–æ—Ä–∞|–∫–æ–Ω—Ñ–ª–∏–∫—Ç|–≥—Ä–∞–Ω–∏—Ü)\b",
    "self": r"\b(—Å–∞–º–æ–æ—Ü–µ–Ω|—Å–∞–º–æ–∫—Ä–∏—Ç|–Ω–µ—É–≤–µ—Ä–µ–Ω|—Å—Ç—ã–¥|–≤–∏–Ω–∞|—è –Ω–∏—á—Ç|—è –ø–ª–æ—Ö)\b",
    "sleep": r"\b(—Å–æ–Ω|–±–µ—Å—Å–æ–Ω–Ω–∏—Ü|–∑–∞—Å–Ω—É—Ç—å|–ø–ª–æ—Ö–æ–π —Å–æ–Ω|–ø—Ä–æ—Å–Ω|–ø–æ–∑–¥–Ω–æ –ª–µ–≥)\b",
    "prod": r"\b(–ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω|–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω|–¥–µ–ª–∞|–∑–∞–¥–∞—á|—Å—Ä–æ–∫|–¥–µ–¥–ª–∞–π–Ω)\b",
    "health": r"\b(–∑–¥–æ—Ä–æ–≤—å|–±–æ–ª–∏—Ç|–ø–∞–Ω–∏—á|—Å–∏–º–ø—Ç–æ–º|—Ç—Ä–µ–≤–æ–≥[–∞–∏]|—Å—Ç—Ä–µ—Å—Å)\b",
    "money": r"\b(–¥–µ–Ω—å–≥|–∑–∞—Ä–ø–ª–∞—Ç|–∫—Ä–µ–¥–∏—Ç|–∏–ø–æ—Ç–µ–∫|—Ä–∞—Å—Ö–æ–¥|–±—é–¥–∂–µ—Ç)\b",
    "study": r"\b(—É—á–µ–±|—à–∫–æ–ª|—É–Ω–∏–≤–µ—Ä|—ç–∫–∑–∞–º–µ–Ω|—Å–µ—Å—Å–∏—è|–∫—É—Ä—Å|–¥–∑|–¥–æ–º–∞—à–∫)\b",
    "family": r"\b(—Å–µ–º—å|—Ä–æ–¥–∏—Ç–µ–ª|–º–∞–º|–ø–∞–ø|—Ä–µ–±–µ–Ω|—Å—ã–Ω|–¥–æ—á—å|–¥–µ—Ç)\b",
    "friends": r"\b(–¥—Ä—É–∑|–∫–æ–º–ø–∞–Ω|—Ç—É—Å–æ–≤|–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤|–Ω–µ—Ç –¥—Ä—É–∑–µ–π)\b",
    "mood": r"\b(–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏|–≥—Ä—É—Å—Ç—å|–ø–µ—á–∞–ª—å|–∞–ø–∞—Ç–∏|—Ä–∞–¥–æ—Å—Ç|–∑–ª–æ—Å—Ç—å|—Ä–∞–∑–¥—Ä–∞–∂)\b",
}

def _topic_title(slug: Optional[str]) -> str:
    return TOPIC_TITLES.get(slug or "", "–î—Ä—É–≥–æ–µ")

# --------- –£—Ç–∏–ª–∏—Ç—ã ----------
def _main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"), KeyboardButton(text="ÔøΩÔøΩ –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")],
            [KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )

def _flow_kb(show_change_focus: bool = True) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è", callback_data="flow:reflect"),
         InlineKeyboardButton(text="ü™ú –ú–∏–∫—Ä–æ—à–∞–≥", callback_data="flow:microstep")],
        [InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="flow:pause")],
    ]
    if show_change_focus:
        rows.append([InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å —Ñ–æ–∫—É—Å", callback_data="focus:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _focus_menu_kb(selected: Optional[str] = None) -> InlineKeyboardMarkup:
    # –î–µ–ª–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å–µ—Ç–∫—É —Ç–µ–º
    order = ["work","rel","self","sleep","prod","health","money","study","family","friends","mood","other"]
    buttons = []
    row = []
    for slug in order:
        title = _topic_title(slug)
        prefix = "‚Ä¢ " if slug == selected else ""
        row.append(InlineKeyboardButton(text=f"{prefix}{title}", callback_data=f"setfocus:{slug}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ–∫—É—Å", callback_data="setfocus:")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def _set_bot_commands(bot):
    cmds = [
        BotCommand(command="start", description="–Ω–∞—á–∞—Ç—å"),
        BotCommand(command="tone", description="—Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"),
        BotCommand(command="method", description="–ø–æ–¥—Ö–æ–¥ (–ö–ü–¢/ACT/...)"),
        BotCommand(command="privacy", description="–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–Ω–µ–≤–Ω–∏–∫–∞"),
        BotCommand(command="focus", description="–ø–æ–∫–∞–∑–∞—Ç—å/—Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"),
    ]
    await bot.set_my_commands(cmds)

async def _call_llm(system: str, user: str) -> str:
    if hasattr(LLM, "complete_chat"):
        return await LLM.complete_chat(system=system, user=user)
    return await LLM.chat(system=system, user=user)

def _detect_text_choice(text: str) -> Optional[str]:
    t = (text or "").lower()
    if re.search(r"\b(—Ä–µ—Ñ–ª–µ–∫—Å|–ø–æ—Ä–µ—Ñ–ª–µ–∫—Å|—Ä–∞–∑–±–µ—Ä[–µ—ë]–º|—Ä–∞–∑–ª–æ–∂(–∏–º|–∏—Ç—å))\b", t):
        return "reflect"
    if re.search(r"\b(–º–∏–∫—Ä–æ—à–∞–≥|–º–∞–ª–µ–Ω—å–∫(–∏–π|–∏–µ) —à–∞–≥|—á—Ç–æ —Å–¥–µ–ª–∞—Ç—å|—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å)\b", t):
        return "microstep"
    if re.search(r"\b(–ø–∞—É–∑–∞|–ø–µ—Ä–µ—Ä—ã–≤|–æ—Ç–≤–ª–µ—á—å—Å—è|–ø–µ—Ä–µ–¥—ã—à–∫–∞)\b", t):
        return "pause"
    return None

def _guess_topic(text: str) -> Optional[str]:
    tt = (text or "").lower()
    for slug, pat in TOPIC_KEYWORDS.items():
        if re.search(pat, tt):
            return slug
    return None

def _tone_desc(code: str) -> str:
    return {
        "soft":"–æ—á–µ–Ω—å —Ç—ë–ø–ª—ã–π –∏ –±–µ—Ä–µ–∂–Ω—ã–π",
        "practical":"—Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è",
        "concise":"–∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ –¥–µ–ª—É",
        "honest":"–ø—Ä—è–º–æ–π, –±–µ–∑ –ø—Ä–∏—É–∫—Ä–∞—Å, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π"
    }.get(code, "—Ç—ë–ø–ª—ã–π")

def _method_desc(code: str) -> str:
    return {
        "cbt":"–ö–ü–¢ (–º—ã—Å–ª–∏<->—ç–º–æ—Ü–∏–∏<->–ø–æ–≤–µ–¥–µ–Ω–∏–µ)",
        "act":"ACT (—Ü–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–∏–Ω—è—Ç–∏–µ, –¥–µ—Ñ—É–∑–∏—è)",
        "gestalt":"–≥–µ—à—Ç–∞–ª—å—Ç (–æ—Å–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç)",
        "supportive":"–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π"
    }.get(code, "–ö–ü–¢")


# ---------- –û–Ω–±–æ—Ä–¥–∏–Ω–≥ ----------
@router.message(CommandStart())
async def start_cmd(message: Message):
    user_id = message.from_user.id
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(user_id)).first()
        if not u:
            s.add(User(tg_id=str(user_id)))
            s.commit()

    await _set_bot_commands(message.bot)
    chat_id = message.chat.id
    DIARY_MODE[chat_id] = True
    FLOW_MODE[chat_id] = None
    CURRENT_FOCUS.pop(chat_id, None)
    CURRENT_TOPIC.pop(chat_id, None)

    try:
        await message.answer_photo(
            FSInputFile("assets/illustrations/hello.png"),
            caption=("–ü—Ä–∏–≤–µ—Ç! –Ø **–ü–æ–º–Ω–∏** ‚Äî –¥—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥-–¥–Ω–µ–≤–Ω–∏–∫. "
                     "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —è —Ä—è–¥–æ–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –¥–∞–º –º–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.")
        )
    except Exception:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–º–Ω–∏ ‚Äî –¥—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥-–¥–Ω–µ–≤–Ω–∏–∫.")

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤ /tone (–º—è–≥–∫–∏–π üíõ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π üß∞, –∫–æ—Ä–æ—Ç–∫–∏–π ‚úÇÔ∏è, —á–µ—Å—Ç–Ω—ã–π üñ§).\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ üõ† –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è?",
        reply_markup=_main_kb()
    )


# ---------- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Å—Ç–∏–ª—è/–ø–æ–¥—Ö–æ–¥–∞ ----------
@router.message(Command("tone"))
async def tone_cmd(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—è–≥–∫–∏–π üíõ", callback_data="tone:soft"),
         InlineKeyboardButton(text="–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π üß∞", callback_data="tone:practical")],
        [InlineKeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–∏–π ‚úÇÔ∏è", callback_data="tone:concise"),
         InlineKeyboardButton(text="–ß–µ—Å—Ç–Ω—ã–π üñ§", callback_data="tone:honest")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("tone:"))
async def tone_pick(cb: CallbackQuery):
    tone = cb.data.split(":")[1]
    set_user_tone(cb.from_user.id, tone)
    await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –ü–æ–¥—Å—Ç—Ä–æ—é –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ —ç—Ç–æ—Ç —Å—Ç–∏–ª—å.")
    await cb.answer()

@router.message(Command("method"))
async def method_cmd(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–ü–¢", callback_data="method:cbt"),
         InlineKeyboardButton(text="ACT", callback_data="method:act")],
        [InlineKeyboardButton(text="–ì–µ—à—Ç–∞–ª—å—Ç", callback_data="method:gestalt"),
         InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π", callback_data="method:supportive")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥—Ö–æ–¥:", reply_markup=kb)

@router.callback_query(F.data.startswith("method:"))
async def method_pick(cb: CallbackQuery):
    method = cb.data.split(":")[1]
    set_user_method(cb.from_user.id, method)
    await cb.message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –ë—É–¥—É –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥.")
    await cb.answer()


# ---------- –§–æ–∫—É—Å/—Ç–µ–º–∞ (–ø–æ–¥—Ç–µ–º—ã) ----------
@router.message(Command("focus"))
async def focus_cmd(message: Message):
    chat_id = message.chat.id
    cur = CURRENT_TOPIC.get(chat_id)
    title = _topic_title(cur) if cur else "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    await message.answer(
        f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: *{title}*\n–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∏–∂–µ.",
        reply_markup=_focus_menu_kb(selected=cur),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "focus:menu")
async def focus_menu(cb: CallbackQuery):
    cur = CURRENT_TOPIC.get(cb.message.chat.id)
    await cb.message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:", reply_markup=_focus_menu_kb(selected=cur))
    await cb.answer()

@router.callback_query(F.data.startswith("setfocus:"))
async def focus_set(cb: CallbackQuery):
    slug = cb.data.split(":", 1)[1]  # –º–æ–∂–µ—Ç –±—ã—Ç—å "" (–æ—á–∏—Å—Ç–∏—Ç—å)
    chat_id = cb.message.chat.id
    user_id = cb.from_user.id
    if slug:
        CURRENT_TOPIC[chat_id] = slug
        await cb.message.answer(f"–û–∫, –¥–µ—Ä–∂–∏–º —Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ–º–µ: *{_topic_title(slug)}*.", parse_mode="Markdown")
        try:
            log_event(str(user_id), "focus_set", slug)
        except Exception as e:
            print("[bot] log_event error:", e)
    else:
        CURRENT_TOPIC.pop(chat_id, None)
        await cb.message.answer("–§–æ–∫—É—Å –æ—á–∏—â–µ–Ω. –ü–æ–π–º—É —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
        try:
            log_event(str(user_id), "focus_clear", "")
        except Exception as e:
            print("[bot] log_event error:", e)
    await cb.answer()


# ---------- –ù–∞–≤–∏–≥–∞—Ü–∏—è ----------
@router.message(Command("diary"))
@router.message(F.text == "üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
async def enter_diary(message: Message):
    chat_id = message.chat.id
    DIARY_MODE[chat_id] = True
    FLOW_MODE[chat_id] = None
    # –§–æ–∫—É—Å –∏ —Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –æ–Ω–∏ –ø–æ–ª–µ–∑–Ω—ã –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
    await message.answer(
        "–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é üíõ –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –¥—É—à–µ. "
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.",
        reply_markup=_main_kb()
    )

@router.message(Command("tools"))
@router.message(F.text == "üõ† –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
async def tools_menu(message: Message):
    DIARY_MODE[message.chat.id] = False
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢—Ä–µ–≤–æ–≥–∞/—Å—Ç—Ä–µ—Å—Å", callback_data="triage:stress"),
         InlineKeyboardButton(text="–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", callback_data="triage:self")],
        [InlineKeyboardButton(text="–û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="triage:rel"),
         InlineKeyboardButton(text="–°–æ–Ω", callback_data="triage:sleep")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="triage:prod"),
         InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="triage:other")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂—É –ø—Ä–∞–∫—Ç–∏–∫—É:", reply_markup=kb)

@router.callback_query(F.data.startswith("triage:"))
async def triage_pick(cb: CallbackQuery):
    topic = cb.data.split(":")[1]
    topic_q = {
        "stress": "–°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏ –∏ —Å—Ç—Ä–µ—Å—Å-–∫–æ—É–ø–∏–Ω–≥",
        "self": "–°–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞ –∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞",
        "rel": "–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –≥—Ä–∞–Ω–∏—Ü—ã",
        "sleep": "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º",
        "prod": "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "other": "–°–∞–º–æ–ø–æ–º–æ—â—å –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
    }.get(topic, "–°–∞–º–æ–ø–æ–º–æ—â—å")

    chunks = await rag_search(topic_q, last_suggested_tag=LAST_SUGGESTED.get(cb.message.chat.id))
    ctx = "\n\n".join([c.get("text","") for c in (chunks or [])])[:1400]

    st = get_user_settings(cb.from_user.id)
    system = ASSISTANT_PROMPT.format(tone_desc=_tone_desc(st.tone), method_desc=_method_desc(st.method))
    reply = await _call_llm(system=system, user=f"–¢–µ–º–∞: {topic_q}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}")
    await cb.message.answer(reply, reply_markup=_main_kb())
    await cb.answer()


# ---------- –í—ã–±–æ—Ä ¬´–†–µ—Ñ–ª–µ–∫—Å–∏—è/–ú–∏–∫—Ä–æ—à–∞–≥/–ü–∞—É–∑–∞¬ª (–∫–Ω–æ–ø–∫–∏) ----------
@router.callback_query(F.data.startswith("flow:"))
async def flow_pick(cb: CallbackQuery):
    mode = cb.data.split(":")[1]  # reflect | microstep | pause
    chat_id = cb.message.chat.id
    FLOW_MODE[chat_id] = mode
    focus = CURRENT_FOCUS.get(chat_id, "").strip()
    topic = CURRENT_TOPIC.get(chat_id)

    st = get_user_settings(cb.from_user.id)
    tone = _tone_desc(st.tone)
    method = _method_desc(st.method)

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç RAG –ø–æ —Ç–µ–º–µ
    rag_query = " ".join(filter(None, [focus, _topic_title(topic)]))
    chunks = await rag_search(rag_query or "—ç–º–æ—Ü–∏–∏ –∏ —Å–∞–º–æ–ø–æ–º–æ—â—å", last_suggested_tag=LAST_SUGGESTED.get(chat_id))
    ctx = "\n\n".join([c.get("text","") for c in (chunks or [])])[:1200]

    if mode == "reflect":
        prompt = (
            f"–†–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ —Ç–µ–º–µ: ¬´{focus or _topic_title(topic)}¬ª. "
            "–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π ABC: 1) —Å–æ–±—ã—Ç–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ), 2) –º—ã—Å–ª—å, 3) —á—É–≤—Å—Ç–≤–æ (0-10). "
            "–ü–æ—Ç–æ–º 2 —Ñ–∞–∫—Ç–∞ –∑–∞/2 –ø—Ä–æ—Ç–∏–≤, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å –∏ 1 –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥."
        )
    elif mode == "microstep":
        prompt = (
            f"–ú–∏–∫—Ä–æ—à–∞–≥–∏ –ø–æ —Ç–µ–º–µ: ¬´{focus or _topic_title(topic)}¬ª. "
            "–ü—Ä–µ–¥–ª–æ–∂–∏ 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ –Ω–∞ 5-10 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º —Å–ø—Ä–æ—Å–∏, –∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å."
        )
    else:  # pause
        prompt = (
            f"–ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–æ —Ç–µ–º–µ: ¬´{focus or _topic_title(topic)}¬ª. "
            "–î–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ ~2 –º–∏–Ω—É—Ç—ã (–¥—ã—Ö–∞–Ω–∏–µ, —Å–∫–∞–Ω —Ç–µ–ª–∞), –∑–∞—Ç–µ–º –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å –∫ –Ω–∞–º–µ—Ä–µ–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
        )

    system = POMNI_MASTER_PROMPT.format(tone_desc=tone, method_desc=method)
    reply = await _call_llm(system=system, user=f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {_topic_title(topic)}\n{prompt}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}")
    await cb.message.answer(reply, reply_markup=_main_kb())
    await cb.answer()


# ---------- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (—Å–≤–æ–±–æ–¥–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ----------
@router.message()
async def diary_or_general(message: Message):
    text = message.text or ""
    if is_crisis(text):
        await message.answer(CRISIS_REPLY)
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    DIARY_MODE.setdefault(chat_id, True)

    # –û–±–Ω–æ–≤–ª—è–µ–º "—Ñ–æ–∫—É—Å" –∏ –ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –ø–æ–¥—Ç–µ–º—É
    if text.strip():
        CURRENT_FOCUS[chat_id] = text.strip()
        guessed = _guess_topic(text)
        if guessed and not CURRENT_TOPIC.get(chat_id):
            # –ü—Ä–µ–¥–ª–æ–∂–∏–º –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é –≤–∑—è—Ç—å —Ç–µ–º—É
            CURRENT_TOPIC[chat_id] = guessed  # –∞–≤—Ç–æ-—Ñ–∏–∫—Å–∏—Ä—É–µ–º –º—è–≥–∫–æ
            try:
                log_event(str(user_id), "focus_auto", guessed)
            except Exception as e:
                print("[bot] log_event error:", e)
            await message.answer(
                f"–ü–æ—Ö–æ–∂–µ, –≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ ¬´{_topic_title(guessed)}¬ª. "
                f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´üîÅ –°–º–µ–Ω–∏—Ç—å —Ñ–æ–∫—É—Å¬ª –∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é.",
                reply_markup=_flow_kb(show_change_focus=True)
            )

    if DIARY_MODE[chat_id]:
        # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        add_journal_entry(user_id=user_id, text=text)
        update_user_memory(user_id=user_id, new_text=text, adapter=LLM)
        summary = get_user_memory(user_id)

        # 2) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–Ω–∞/–ø–æ–¥—Ö–æ–¥–∞
        st = get_user_settings(user_id)
        tone_desc = _tone_desc(st.tone)
        method_desc = _method_desc(st.method)

        # 3) –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG: —É—á–∏—Ç—ã–≤–∞–µ–º –∏ —Ç–µ–∫—Å—Ç, –∏ —Ç–µ–º—É
        topic = CURRENT_TOPIC.get(chat_id)
        rag_query = " ".join(filter(None, [text, _topic_title(topic)]))
        chunks = await rag_search(rag_query, last_suggested_tag=LAST_SUGGESTED.get(chat_id))
        ctx = "\n\n".join([c.get("text","") for c in (chunks or [])])[:1400]

        # 4) –í—ã–±–æ—Ä –ø–æ—Ç–æ–∫–∞ (–ø–æ –∫–Ω–æ–ø–∫–µ/–ø–æ —Ç–µ–∫—Å—Ç—É)
        choice = FLOW_MODE.get(chat_id) or _detect_text_choice(text)
        system = POMNI_MASTER_PROMPT.format(tone_desc=tone_desc, method_desc=method_desc)

        if choice == "reflect":
            focus = CURRENT_FOCUS.get(chat_id, text).strip()
            user = (
                f"–¢–µ–∫—É—â–∞—è –ø–æ–¥—Ç–µ–º–∞: {_topic_title(topic)}.\n"
                f"–†–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ: ¬´{focus or _topic_title(topic)}¬ª.\n"
                "–°–¥–µ–ª–∞–π ABC (–∫–æ—Ä–æ—Ç–∫–æ), –¥–∞–ª—å—à–µ 2 –∑–∞/2 –ø—Ä–æ—Ç–∏–≤, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å, 1 –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥."
                f"\n\n–ü–∞–º—è—Ç—å:\n{summary}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
            )
            reply = await _call_llm(system=system, user=user)
            await message.answer(reply, reply_markup=_main_kb())
            FLOW_MODE[chat_id] = None
            try:
                log_event(str(user_id), "diary_message", "")
            except Exception as e:
                print("[bot] log_event error:", e)
            return

        if choice == "microstep":
            focus = CURRENT_FOCUS.get(chat_id, text).strip()
            user = (
                f"–¢–µ–∫—É—â–∞—è –ø–æ–¥—Ç–µ–º–∞: {_topic_title(topic)}.\n"
                f"–ú–∏–∫—Ä–æ—à–∞–≥–∏ –ø–æ: ¬´{focus or _topic_title(topic)}¬ª.\n"
                "–î–∞–π 2-3 –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–∞ (5-10 –º–∏–Ω—É—Ç), –∑–∞—Ç–µ–º —Å–ø—Ä–æ—Å–∏, –∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å."
                f"\n\n–ü–∞–º—è—Ç—å:\n{summary}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
            )
            reply = await _call_llm(system=system, user=user)
            await message.answer(reply, reply_markup=_main_kb())
            FLOW_MODE[chat_id] = None
            try:
                log_event(str(user_id), "diary_message", "")
            except Exception as e:
                print("[bot] log_event error:", e)
            return

        if choice == "pause":
            focus = CURRENT_FOCUS.get(chat_id, text).strip()
            user = (
                f"–¢–µ–∫—É—â–∞—è –ø–æ–¥—Ç–µ–º–∞: {_topic_title(topic)}.\n"
                f"–ü–∞—É–∑–∞ –ø–æ: ¬´{focus or _topic_title(topic)}¬ª.\n"
                "–î–∞–π 2-–º–∏–Ω—É—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–¥—ã—Ö–∞–Ω–∏–µ+—Å–∫–∞–Ω —Ç–µ–ª–∞), –∑–∞—Ç–µ–º –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å –∫ –Ω–∞–º–µ—Ä–µ–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
                f"\n\n–ü–∞–º—è—Ç—å:\n{summary}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
            )
            reply = await _call_llm(system=system, user=user)
            await message.answer(reply, reply_markup=_main_kb())
            FLOW_MODE[chat_id] = None
            try:
                log_event(str(user_id), "diary_message", "")
            except Exception as e:
                print("[bot] log_event error:", e)
            return

        # 5) –ë–∞–∑–æ–≤—ã–π friend-first: –¥–µ—Ä–∂–∏–º —Ç–µ–º—É –∏ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ask_or_assist = ASSISTANT_PROMPT if is_help_intent(text) else POMNI_MASTER_PROMPT
        system = ask_or_assist.format(tone_desc=tone_desc, method_desc=method_desc)
        user = (
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–∏–∞–ª–æ–≥ –≤ —Ç—ë–ø–ª–æ–º —Å—Ç–∏–ª–µ, 1 –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑. "
            "–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –†–µ—Ñ–ª–µ–∫—Å–∏—é / –ú–∏–∫—Ä–æ—à–∞–≥ / –ü–∞—É–∑–∞ (–±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è).\n\n"
            f"–¢–µ–∫—É—â–∞—è –ø–æ–¥—Ç–µ–º–∞: {_topic_title(topic)}\n"
            f"–ü–∞–º—è—Ç—å:\n{summary}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
        )
        reply = await _call_llm(system=system, user=user)
        await message.answer(reply, reply_markup=_flow_kb(show_change_focus=True))
        try:
            log_event(str(user_id), "diary_message", "")
        except Exception as e:
            print("[bot] log_event error:", e)
        return

    # ----- –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–Ω–µ–≤–Ω–∏–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ RAG -----
    topic = CURRENT_TOPIC.get(chat_id)
    rag_query = " ".join(filter(None, [text, _topic_title(topic)]))
    chunks = await rag_search(rag_query, last_suggested_tag=LAST_SUGGESTED.get(chat_id))
    ctx = "\n\n".join([c.get("text","") for c in (chunks or [])])[:1400]
    system = ASSISTANT_PROMPT.format(tone_desc="—Ç—ë–ø–ª—ã–π", method_desc="–ö–ü–¢")
    reply = await _call_llm(system=system, user=f"–¢–µ–∫—É—â–∞—è –ø–æ–¥—Ç–µ–º–∞: {_topic_title(topic)}\n" + text + "\n\n" + ctx)
    await message.answer(reply, reply_markup=_main_kb())


# ====== –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (/privacy) ======
try:
    from .memory import MemoryManager  # type: ignore
    _mem = MemoryManager()
except Exception:
    _mem = None

@router.message(Command("privacy"))
async def cmd_privacy(message: Message, command: CommandObject):
    global _mem
    try:
        from .memory import MemoryManager  # type: ignore
        _mem = MemoryManager()
    except Exception:
        _mem = None

    if _mem is None:
        await message.answer("–ü–∞–º—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    tg_id = str(message.from_user.id)
    arg = (command.args or "").strip().lower()

    if not arg:
        mode = _mem.get_privacy(tg_id)
        text = (
            f"–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: *{mode}*\n"
            "–í–∞—Ä–∏–∞–Ω—Ç—ã: `ask` (—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å), `none` (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å), `all` (—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å—ë).\n"
            "–ü—Ä–∏–º–µ—Ä: `/privacy ask`"
        )
        await message.answer(text, parse_mode="Markdown")
        return

    if arg not in {"ask","none","all","insights"}:
        await message.answer("–í—ã–±–µ—Ä–∏: ask | none | all")
        return

    _mem.set_privacy(tg_id, arg)
    await message.answer(f"–û–∫, —Ä–µ–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: *{arg}*", parse_mode="Markdown")

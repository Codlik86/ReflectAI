from __future__ import annotations

import re
from typing import Dict, Optional

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand, FSInputFile
)

from app.llm_adapter import LLMAdapter
from app.safety import is_crisis, CRISIS_REPLY
from app.db import db_session, User
from app.rag_qdrant import search as rag_search
from app.prompts import POMNI_MASTER_PROMPT, ASSISTANT_PROMPT
from app.memory import (
    add_journal_entry, update_user_memory, get_user_memory,
    get_user_settings, set_user_tone, set_user_method,
    is_help_intent, log_event
)

router = Router()
LLM = LLMAdapter()

# --------- –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ (in-memory) ----------
LAST_SUGGESTED: Dict[int, Optional[str]] = {}   # chat_id -> last rag tag
DIARY_MODE: Dict[int, bool] = {}                # chat_id -> bool (true = "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
CURRENT_FOCUS: Dict[int, str] = {}              # chat_id -> –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞/–º—ã—Å–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
FLOW_MODE: Dict[int, Optional[str]] = {}        # chat_id -> "reflect"|"microstep"|"pause"|None


# --------- –£—Ç–∏–ª–∏—Ç—ã ----------
def _main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"), KeyboardButton(text="üõ† –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üéß –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")],
            [KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )

def _flow_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è", callback_data="flow:reflect"),
         InlineKeyboardButton(text="ü™ú –ú–∏–∫—Ä–æ—à–∞–≥", callback_data="flow:microstep")],
        [InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="flow:pause")],
    ])

async def _set_bot_commands(bot):
    cmds = [
        BotCommand(command="start", description="–Ω–∞—á–∞—Ç—å"),
        BotCommand(command="tone", description="—Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"),
        BotCommand(command="method", description="–ø–æ–¥—Ö–æ–¥ (–ö–ü–¢/ACT/...)"),
        BotCommand(command="privacy", description="–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–Ω–µ–≤–Ω–∏–∫–∞"),
    ]
    await bot.set_my_commands(cmds)

async def _call_llm(system: str, user: str) -> str:
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞
    if hasattr(LLM, "complete_chat"):
        return await LLM.complete_chat(system=system, user=user)
    return await LLM.chat(system=system, user=user)

def _detect_text_choice(text: str) -> Optional[str]:
    t = (text or "").lower()
    # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    if re.search(r"\b(—Ä–µ—Ñ–ª–µ–∫—Å|–ø–æ—Ä–µ—Ñ–ª–µ–∫—Å|—Ä–∞–∑–±–µ—Ä[–µ—ë]–º|—Ä–∞–∑–ª–æ–∂(–∏–º|–∏—Ç—å))\b", t):
        return "reflect"
    if re.search(r"\b(–º–∏–∫—Ä–æ—à–∞–≥|–º–∞–ª–µ–Ω—å–∫(–∏–π|–∏–µ) —à–∞–≥|—á—Ç–æ —Å–¥–µ–ª–∞—Ç—å|—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å)\b", t):
        return "microstep"
    if re.search(r"\b(–ø–∞—É–∑–∞|–ø–µ—Ä–µ—Ä—ã–≤|–æ—Ç–≤–ª–µ—á—å—Å—è|–ø–µ—Ä–µ–¥—ã—à–∫–∞)\b", t):
        return "pause"
    return None

def _tone_desc(code: str) -> str:
    return {
        "soft":"–æ—á–µ–Ω—å —Ç—ë–ø–ª—ã–π –∏ –±–µ—Ä–µ–∂–Ω—ã–π",
        "practical":"—Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è",
        "concise":"–∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ –¥–µ–ª—É",
        "honest":"–ø—Ä—è–º–æ–π, –±–µ–∑ –ø—Ä–∏—É–∫—Ä–∞—Å, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π"
    }.get(code, "—Ç—ë–ø–ª—ã–π")

def _method_desc(code: str) -> str:
    return {
        "cbt":"–ö–ü–¢ (–º—ã—Å–ª–∏‚Üî—ç–º–æ—Ü–∏–∏‚Üî–ø–æ–≤–µ–¥–µ–Ω–∏–µ)",
        "act":"ACT (—Ü–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–∏–Ω—è—Ç–∏–µ, –¥–µ—Ñ—É–∑–∏—è)",
        "gestalt":"–≥–µ—à—Ç–∞–ª—å—Ç (–æ—Å–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç)",
        "supportive":"–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π"
    }.get(code, "–ö–ü–¢")


# ---------- –û–Ω–±–æ—Ä–¥–∏–Ω–≥ ----------
@router.message(CommandStart())
async def start_cmd(message: Message):
    user_id = message.from_user.id
    with db_session() as s:
        u = s.query(User).filter(User.tg_id == str(user_id)).first()
        if not u:
            s.add(User(tg_id=str(user_id)))
            s.commit()

    await _set_bot_commands(message.bot)
    DIARY_MODE[message.chat.id] = True
    FLOW_MODE[message.chat.id] = None
    CURRENT_FOCUS.pop(message.chat.id, None)

    # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    try:
        await message.answer_photo(
            FSInputFile("assets/illustrations/hello.png"),
            caption=("–ü—Ä–∏–≤–µ—Ç! –Ø **–ü–æ–º–Ω–∏** ‚Äî –¥—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥-–¥–Ω–µ–≤–Ω–∏–∫. "
                     "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —è —Ä—è–¥–æ–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –¥–∞–º –º–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.")
        )
    except Exception:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–º–Ω–∏ ‚Äî –¥—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥-–¥–Ω–µ–≤–Ω–∏–∫.")

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤ /tone (–º—è–≥–∫–∏–π üíõ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π ÔøΩÔøΩ, –∫–æ—Ä–æ—Ç–∫–∏–π ‚úÇÔ∏è, —á–µ—Å—Ç–Ω—ã–π üñ§).\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ üõ† –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è?",
        reply_markup=_main_kb()
    )


# ---------- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Å—Ç–∏–ª—è/–ø–æ–¥—Ö–æ–¥–∞ ----------
@router.message(Command("tone"))
async def tone_cmd(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—è–≥–∫–∏–π üíõ", callback_data="tone:soft"),
         InlineKeyboardButton(text="–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π üß∞", callback_data="tone:practical")],
        [InlineKeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–∏–π ‚úÇÔ∏è", callback_data="tone:concise"),
         InlineKeyboardButton(text="–ß–µ—Å—Ç–Ω—ã–π üñ§", callback_data="tone:honest")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("tone:"))
async def tone_pick(cb: CallbackQuery):
    tone = cb.data.split(":")[1]
    set_user_tone(cb.from_user.id, tone)
    await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –ü–æ–¥—Å—Ç—Ä–æ—é –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ —ç—Ç–æ—Ç —Å—Ç–∏–ª—å.")
    await cb.answer()

@router.message(Command("method"))
async def method_cmd(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–ü–¢", callback_data="method:cbt"),
         InlineKeyboardButton(text="ACT", callback_data="method:act")],
        [InlineKeyboardButton(text="–ì–µ—à—Ç–∞–ª—å—Ç", callback_data="method:gestalt"),
         InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π", callback_data="method:supportive")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥—Ö–æ–¥:", reply_markup=kb)

@router.callback_query(F.data.startswith("method:"))
async def method_pick(cb: CallbackQuery):
    method = cb.data.split(":")[1]
    set_user_method(cb.from_user.id, method)
    await cb.message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –ë—É–¥—É –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥.")
    await cb.answer()


# ---------- –ù–∞–≤–∏–≥–∞—Ü–∏—è ----------
@router.message(Command("diary"))
@router.message(F.text == "üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
async def enter_diary(message: Message):
    DIARY_MODE[message.chat.id] = True
    FLOW_MODE[message.chat.id] = None
    CURRENT_FOCUS.pop(message.chat.id, None)
    await message.answer(
        "–Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é üíõ –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –¥—É—à–µ. "
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.",
        reply_markup=_main_kb()
    )

@router.message(Command("tools"))
@router.message(F.text == "üõ† –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
async def tools_menu(message: Message):
    DIARY_MODE[message.chat.id] = False
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢—Ä–µ–≤–æ–≥–∞/—Å—Ç—Ä–µ—Å—Å", callback_data="triage:stress"),
         InlineKeyboardButton(text="–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", callback_data="triage:self")],
        [InlineKeyboardButton(text="–û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="triage:rel"),
         InlineKeyboardButton(text="–°–æ–Ω", callback_data="triage:sleep")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="triage:prod"),
         InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="triage:other")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂—É –ø—Ä–∞–∫—Ç–∏–∫—É:", reply_markup=kb)

@router.callback_query(F.data.startswith("triage:"))
async def triage_pick(cb: CallbackQuery):
    topic = cb.data.split(":")[1]
    topic_q = {
        "stress": "–°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏ –∏ —Å—Ç—Ä–µ—Å—Å-–∫–æ—É–ø–∏–Ω–≥",
        "self": "–°–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞ –∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞",
        "rel": "–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –≥—Ä–∞–Ω–∏—Ü—ã",
        "sleep": "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º",
        "prod": "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "other": "–°–∞–º–æ–ø–æ–º–æ—â—å –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
    }.get(topic, "–°–∞–º–æ–ø–æ–º–æ—â—å")

    chunks = await rag_search(topic_q, last_suggested_tag=LAST_SUGGESTED.get(cb.message.chat.id))
    ctx = "\n\n".join([c.get("text","") for c in (chunks or [])])[:1400]

    st = get_user_settings(cb.from_user.id)
    system = ASSISTANT_PROMPT.format(tone_desc=_tone_desc(st.tone), method_desc=_method_desc(st.method))
    reply = await _call_llm(system=system, user=f"–¢–µ–º–∞: {topic_q}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}")
    await cb.message.answer(reply, reply_markup=_main_kb())
    await cb.answer()


# ---------- –í—ã–±–æ—Ä ¬´–†–µ—Ñ–ª–µ–∫—Å–∏—è/–ú–∏–∫—Ä–æ—à–∞–≥/–ü–∞—É–∑–∞¬ª (–∫–Ω–æ–ø–∫–∏) ----------
@router.callback_query(F.data.startswith("flow:"))
async def flow_pick(cb: CallbackQuery):
    mode = cb.data.split(":")[1]  # reflect | microstep | pause
    chat_id = cb.message.chat.id
    FLOW_MODE[chat_id] = mode
    focus = CURRENT_FOCUS.get(chat_id, "").strip()

    st = get_user_settings(cb.from_user.id)
    tone = _tone_desc(st.tone)
    method = _method_desc(st.method)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç RAG –ø–æ —Ç–µ–º–µ
    chunks = await rag_search(focus or "—ç–º–æ—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–∞", last_suggested_tag=LAST_SUGGESTED.get(chat_id))
    ctx = "\n\n".join([c.get("text","") for c in (chunks or [])])[:1200]

    if mode == "reflect":
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—è "–æ —á—ë–º?"
        prompt = (
            f"–§–æ–∫—É—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: ¬´{focus or '—Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}¬ª.\n"
            "–ù–∞—á–Ω–∏ –∫–æ—Ä–æ—Ç–∫–æ: 1) —Å–æ–±—ã—Ç–∏–µ/–∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ (–ø–æ–º–æ–≥–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å), "
            "2) –º—ã—Å–ª—å, 3) —á—É–≤—Å—Ç–≤–æ (0‚Äì10). –ó–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ –º–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫—É –º—ã—Å–ª–∏ (2 —Ñ–∞–∫—Ç–∞ ¬´–∑–∞¬ª / 2 ¬´–ø—Ä–æ—Ç–∏–≤¬ª) "
            "–∏ –æ–¥–Ω—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É. –í –∫–æ–Ω—Ü–µ ‚Äî 1 –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
        )
    elif mode == "microstep":
        prompt = (
            f"–§–æ–∫—É—Å –º–∏–∫—Ä–æ—à–∞–≥–æ–≤: ¬´{focus or '—Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}¬ª.\n"
            "–ü—Ä–µ–¥–ª–æ–∂–∏ 2‚Äì3 –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–∞ (–Ω–∞ 5‚Äì10 –º–∏–Ω—É—Ç) –Ω–∞ –≤—ã–±–æ—Ä, "
            "—Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –ó–∞—Ç–µ–º —Å–ø—Ä–æ—Å–∏, –∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å."
        )
    else:  # pause
        prompt = (
            f"–§–æ–∫—É—Å –ø–∞—É–∑—ã: ¬´{focus or '—Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}¬ª.\n"
            "–î–∞–π –ø—Ä–æ—Å—Ç—É—é 2-–º–∏–Ω—É—Ç–Ω—É—é –ø–∞—É–∑—É: 1) –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥—ã—Ö–∞–Ω–∏—é (4 —Ü–∏–∫–ª–∞), "
            "2) –º—è–≥–∫–∏–π —Å–∫–∞–Ω —Ç–µ–ª–∞ (30‚Äì40 —Å–µ–∫), 3) –≤–µ—Ä–Ω–∏ —Ñ–æ–∫—É—Å –∫ —Ü–µ–Ω–Ω–æ—Å—Ç–∏/–Ω–∞–º–µ—Ä–µ–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏."
        )

    system = POMNI_MASTER_PROMPT.format(tone_desc=tone, method_desc=method)
    reply = await _call_llm(system=system, user=f"{prompt}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}")
    await cb.message.answer(reply, reply_markup=_main_kb())
    await cb.answer()


# ---------- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (—Å–≤–æ–±–æ–¥–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ----------
@router.message()
async def diary_or_general(message: Message):
    text = message.text or ""
    if is_crisis(text):
        await message.answer(CRISIS_REPLY)
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    DIARY_MODE.setdefault(chat_id, True)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî ¬´–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ¬´—Ñ–æ–∫—É—Å¬ª —Ç–µ–º—ã (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if text.strip():
        CURRENT_FOCUS[chat_id] = text.strip()

    if DIARY_MODE[chat_id]:
        # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        add_journal_entry(user_id=user_id, text=text)
        update_user_memory(user_id=user_id, new_text=text, adapter=LLM)
        summary = get_user_memory(user_id)

        # 2) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–Ω–∞/–ø–æ–¥—Ö–æ–¥–∞
        st = get_user_settings(user_id)
        tone_desc = _tone_desc(st.tone)
        method_desc = _method_desc(st.method)

        # 3) –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG ‚Äî –±–µ–∑ ¬´–¥—ã—Ö–∞–Ω–∏—è¬ª –≤ —á–∞—Ç–µ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ rag —Å–ª–æ–π)
        chunks = await rag_search(text, last_suggested_tag=LAST_SUGGESTED.get(chat_id))
        ctx = "\n\n".join([c.get("text","") for c in (chunks or [])])[:1400]

        # 4) –í—ã–±–æ—Ä –ø–æ—Ç–æ–∫–∞: –ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ –ø–æ —è–≤–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º
        choice = FLOW_MODE.get(chat_id) or _detect_text_choice(text)
        system = POMNI_MASTER_PROMPT.format(tone_desc=tone_desc, method_desc=method_desc)

        if choice == "reflect":
            focus = CURRENT_FOCUS.get(chat_id, text).strip()
            user = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –ø–æ —Ç–µ–º–µ: ¬´{focus}¬ª.\n"
                "–ü–æ–º–æ–≥–∏ –ø—Ä–æ–π—Ç–∏ —Å–≤–µ—Ä—Ö–∫–æ—Ä–æ—Ç–∫–∏–π ABC: 1) —Å–æ–±—ã—Ç–∏–µ –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, 2) –º—ã—Å–ª—å, 3) —á—É–≤—Å—Ç–≤–æ (0‚Äì10), "
                "4) 2 —Ñ–∞–∫—Ç–∞ –∑–∞/2 –ø—Ä–æ—Ç–∏–≤, 5) –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å, 6) –æ–¥–∏–Ω –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
                f"\n\n–ü–∞–º—è—Ç—å:\n{summary}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
            )
            reply = await _call_llm(system=system, user=user)
            await message.answer(reply, reply_markup=_main_kb())
            FLOW_MODE[chat_id] = None
            try:
                log_event(str(user_id), "diary_message", "")
            except Exception as e:
                print("[bot] log_event error:", e)
            return

        if choice == "microstep":
            focus = CURRENT_FOCUS.get(chat_id, text).strip()
            user = (
                f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–∏–∫—Ä–æ—à–∞–≥ –ø–æ —Ç–µ–º–µ: ¬´{focus}¬ª.\n"
                "–ü—Ä–µ–¥–ª–æ–∂–∏ 2‚Äì3 –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ (5‚Äì10 –º–∏–Ω—É—Ç) –Ω–∞ –≤—ã–±–æ—Ä. –°–ø—Ä–æ—Å–∏, –∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å."
                f"\n\n–ü–∞–º—è—Ç—å:\n{summary}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
            )
            reply = await _call_llm(system=system, user=user)
            await message.answer(reply, reply_markup=_main_kb())
            FLOW_MODE[chat_id] = None
            try:
                log_event(str(user_id), "diary_message", "")
            except Exception as e:
                print("[bot] log_event error:", e)
            return

        if choice == "pause":
            focus = CURRENT_FOCUS.get(chat_id, text).strip()
            user = (
                f"–ü–æ–ø—Ä–æ—Å–∏–ª –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É –ø–æ —Ç–µ–º–µ: ¬´{focus}¬ª.\n"
                "–î–∞–π 2-–º–∏–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–¥—ã—Ö–∞–Ω–∏–µ/—Å–∫–∞–Ω —Ç–µ–ª–∞), –∑–∞—Ç–µ–º –æ–¥–∏–Ω –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ —Ü–µ–Ω–Ω–æ—Å—Ç–∏/–Ω–∞–º–µ—Ä–µ–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
                f"\n\n–ü–∞–º—è—Ç—å:\n{summary}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
            )
            reply = await _call_llm(system=system, user=user)
            await message.answer(reply, reply_markup=_main_kb())
            FLOW_MODE[chat_id] = None
            try:
                log_event(str(user_id), "diary_message", "")
            except Exception as e:
                print("[bot] log_event error:", e)
            return

        # 5) –û–±—ã—á–Ω—ã–π ¬´friend-first¬ª: —ç–º–ø–∞—Ç–∏—è + 1 —É—Ç–æ—á–Ω–µ–Ω–∏–µ + –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ ¬´—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É¬ª)
        ask_or_assist = ASSISTANT_PROMPT if is_help_intent(text) else POMNI_MASTER_PROMPT
        system = ask_or_assist.format(tone_desc=tone_desc, method_desc=method_desc)
        user = (
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–∏–∞–ª–æ–≥ –≤ —Ç—ë–ø–ª–æ–º —Å—Ç–∏–ª–µ, 1 –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑. "
            "–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –≤—ã–±—Ä–∞—Ç—å: –†–µ—Ñ–ª–µ–∫—Å–∏—è / –ú–∏–∫—Ä–æ—à–∞–≥ / –ü–∞—É–∑–∞ (–Ω–æ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–π).\n\n"
            f"–ü–∞–º—è—Ç—å:\n{summary}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}"
        )
        reply = await _call_llm(system=system, user=user)
        await message.answer(reply, reply_markup=_flow_kb())
        try:
            log_event(str(user_id), "diary_message", "")
        except Exception as e:
            print("[bot] log_event error:", e)
        return

    # ----- –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–Ω–µ–≤–Ω–∏–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ RAG -----
    chunks = await rag_search(text, last_suggested_tag=LAST_SUGGESTED.get(chat_id))
    ctx = "\n\n".join([c.get("text","") for c in (chunks or [])])[:1400]
    system = ASSISTANT_PROMPT.format(tone_desc="—Ç—ë–ø–ª—ã–π", method_desc="–ö–ü–¢")
    reply = await _call_llm(system=system, user=text + "\n\n" + ctx)
    await message.answer(reply, reply_markup=_main_kb())


# ====== –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (/privacy) ======
try:
    from .memory import MemoryManager  # type: ignore
    _mem = MemoryManager()
except Exception:
    _mem = None

@router.message(Command("privacy"))
async def cmd_privacy(message: Message, command: CommandObject):
    global _mem
    try:
        from .memory import MemoryManager  # type: ignore
        _mem = MemoryManager()
    except Exception:
        _mem = None

    if _mem is None:
        await message.answer("–ü–∞–º—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    tg_id = str(message.from_user.id)
    arg = (command.args or "").strip().lower()

    if not arg:
        mode = _mem.get_privacy(tg_id)
        text = (
            f"–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: *{mode}*\n"
            "–í–∞—Ä–∏–∞–Ω—Ç—ã: `ask` (—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å), `none` (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å), `all` (—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å—ë).\n"
            "–ü—Ä–∏–º–µ—Ä: `/privacy ask`"
        )
        await message.answer(text, parse_mode="Markdown")
        return

    if arg not in {"ask","none","all","insights"}:
        await message.answer("–í—ã–±–µ—Ä–∏: ask | none | all")
        return

    _mem.set_privacy(tg_id, arg)
    await message.answer(f"–û–∫, —Ä–µ–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: *{arg}*", parse_mode="Markdown")

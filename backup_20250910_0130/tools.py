# app/tools.py
import asyncio
import time
from typing import Dict, Optional
from aiogram.types import Message

# ====== –†–ï–§–†–ï–ô–ú–ò–ù–ì (—Ç–µ–∫—Å—Ç—ã —à–∞–≥–æ–≤) ======
REFRAMING_STEPS = [
    ("thought", "–®–∞–≥ 1 –∏–∑ 4 ‚Äî *–ú—ã—Å–ª—å*.\n\n–ß—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—à—å –æ —Å–∏—Ç—É–∞—Ü–∏–∏?\n–ù–∞–ø–∏—à–∏ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."),
    ("emotion", "–®–∞–≥ 2 –∏–∑ 4 ‚Äî *–≠–º–æ—Ü–∏—è*.\n\n–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å? (–Ω–∞–ø—Ä., —Ç—Ä–µ–≤–æ–≥–∞/–∑–ª–æ—Å—Ç—å/–≥—Ä—É—Å—Ç—å)\n–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –ø–æ —à–∫–∞–ª–µ 1‚Äì10?"),
    ("behavior", "–®–∞–≥ 3 –∏–∑ 4 ‚Äî *–î–µ–π—Å—Ç–≤–∏–µ*.\n\n–ß—Ç–æ —Ç—ã –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ—à—å (–∏–ª–∏ —Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å), –∫–æ–≥–¥–∞ —Ç–∞–∫ –¥—É–º–∞–µ—à—å/—á—É–≤—Å—Ç–≤—É–µ—à—å?"),
    ("alternative", "–®–∞–≥ 4 –∏–∑ 4 ‚Äî *–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞*.\n\n–ö–∞–∫–∞—è –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º—ã—Å–ª—å –º–æ–≥–ª–∞ –±—ã –ø–æ–º–æ—á—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –∏–Ω–∞—á–µ?\n–ò–¥–µ—è: ¬´—è –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º, –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –ø–æ —à–∞–≥—É¬ª."),
]

# ====== –î–´–•–ê–ù–ò–ï ======
BREATHING_SCRIPT = [
    "–í–¥–æ—Ö —á–µ—Ä–µ–∑ –Ω–æ—Å ‚Äî 4‚Ä¶",
    "–ó–∞–¥–µ—Ä–∂–∫–∞ ‚Äî 2‚Ä¶",
    "–í—ã–¥–æ—Ö —á–µ—Ä–µ–∑ —Ä–æ—Ç ‚Äî 6‚Ä¶",
]

BODY_SCAN_TEXT = (
    "üßò Body Scan (3‚Äì5 –º–∏–Ω)\n\n"
    "1) –°—è–¥—å/–ª—è–≥ —É–¥–æ–±–Ω–æ, –∑–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞.\n"
    "2) –ü–µ—Ä–µ–≤–æ–¥–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—Ç—É–ø–Ω–∏ ‚Üí –≥–æ–ª–µ–Ω–∏ ‚Üí –∫–æ–ª–µ–Ω–∏ ‚Üí –±—ë–¥—Ä–∞ ‚Üí –∂–∏–≤–æ—Ç/–≥—Ä—É–¥—å ‚Üí –ø–ª–µ—á–∏ ‚Üí —à–µ—è ‚Üí –ª–∏—Ü–æ.\n"
    "3) –í –∫–∞–∂–¥–æ–π –∑–æ–Ω–µ –æ—Ç–º–µ—Ç—å: —Ç–µ–ø–ª–æ/—Ö–æ–ª–æ–¥, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ/—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–ª—ã–≤–∞–Ω–∏–µ.\n"
    "4) –ï—Å–ª–∏ —É–º —É—Ö–æ–¥–∏—Ç ‚Äî –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏—Å—å –∫ —Ç–µ–ª—É –∏ –¥—ã—Ö–∞–Ω–∏—é.\n"
    "5) –ó–∞–≤–µ—Ä—à–∏ –≥–ª—É–±–æ–∫–∏–º –≤–¥–æ—Ö–æ–º/–≤—ã–¥–æ—Ö–æ–º –∏ –º—è–≥–∫–æ –æ—Ç–∫—Ä–æ–π –≥–ª–∞–∑–∞.\n\n"
    "–ú–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å–∞–π—Ç –∫–Ω–æ–ø–∫–æ–π ¬´üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å–∞–π—Ç¬ª."
)

# ====== –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á: —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —É–º–µ—Ç—å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å ======
_running_tasks: Dict[str, asyncio.Task] = {}       # user_id -> Task
_stop_flags: Dict[str, asyncio.Event] = {}         # user_id -> stop-event
_last_click_ts: Dict[str, float] = {}              # user_id -> last cb ts (debounce)

DEBOUNCE_SEC = 1.2

def debounce_ok(user_id: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª-–∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º."""
    now = time.monotonic()
    last = _last_click_ts.get(user_id, 0.0)
    if now - last < DEBOUNCE_SEC:
        return False
    _last_click_ts[user_id] = now
    return True

def has_running_task(user_id: str) -> bool:
    t = _running_tasks.get(user_id)
    return t is not None and not t.done()

def stop_user_task(user_id: str):
    # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –∏ –∂–¥—ë–º, –ø–æ–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã–π–¥–µ—Ç
    ev = _stop_flags.get(user_id)
    if ev:
        ev.set()

async def wait_task_finish(user_id: str, timeout: float = 1.0):
    t = _running_tasks.get(user_id)
    if t and not t.done():
        try:
            await asyncio.wait_for(t, timeout=timeout)
        except asyncio.TimeoutError:
            t.cancel()

def _prepare_task(user_id: str):
    # –°–±—Ä–æ—Å–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª–µ–¥—ã
    old = _running_tasks.get(user_id)
    if old and not old.done():
        old.cancel()
    ev = asyncio.Event()
    _stop_flags[user_id] = ev
    return ev

# ====== –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ (60 —Å–µ–∫), —É–ø—Ä–∞–≤–ª—è–µ–º–∞—è —Ñ–ª–∞–≥–æ–º ======
async def _breathing_loop(message: Message, stop_event: asyncio.Event):
    msg = await message.answer("ü´Å –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä‚Ä¶")
    # 4 —Ü–∏–∫–ª–∞ ~12‚Äì13 —Å–µ–∫ = ~50 —Å–µ–∫; –¥–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –±—Ä–∏–¥–∂ –¥–ª—è ~60 —Å–µ–∫
    for i in range(1, 5):
        if stop_event.is_set():
            try:
                await msg.edit_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            except Exception:
                pass
            return

        try:
            await msg.edit_text(f"ü´Å –¶–∏–∫–ª {i}/4\n\n{BREATHING_SCRIPT[0]}")
        except Exception:
            pass
        # –í–¥–æ—Ö (4—Å)
        for _ in range(4):
            if stop_event.is_set():
                try: await msg.edit_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                except Exception: pass
                return
            await asyncio.sleep(1)

        try:
            await msg.edit_text(f"ü´Å –¶–∏–∫–ª {i}/4\n\n{BREATHING_SCRIPT[1]}")
        except Exception:
            pass
        for _ in range(2):
            if stop_event.is_set():
                try: await msg.edit_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                except Exception: pass
                return
            await asyncio.sleep(1)

        try:
            await msg.edit_text(f"ü´Å –¶–∏–∫–ª {i}/4\n\n{BREATHING_SCRIPT[2]}")
        except Exception:
            pass
        for _ in range(6):
            if stop_event.is_set():
                try: await msg.edit_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                except Exception: pass
                return
            await asyncio.sleep(1)

    # –î–æ–±–∏–≤–∫–∞ –¥–æ ~60 —Å–µ–∫
    for _ in range(4):
        if stop_event.is_set():
            try: await msg.edit_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            except Exception: pass
            return
        await asyncio.sleep(1)

    try:
        await msg.edit_text("–ì–æ—Ç–æ–≤–æ. –ö–∞–∫ –æ—â—É—â–µ–Ω–∏—è? üôå\n–ú–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—Å–ª—å/–æ—â—É—â–µ–Ω–∏–µ –∫–∞–∫ –∏–Ω—Å–∞–π—Ç (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).")
    except Exception:
        await message.answer("–ì–æ—Ç–æ–≤–æ. –ö–∞–∫ –æ—â—É—â–µ–Ω–∏—è? üôå")

def start_breathing_task(message: Message, user_id: str) -> asyncio.Task:
    ev = _prepare_task(user_id)
    t = asyncio.create_task(_breathing_loop(message, ev))
    _running_tasks[user_id] = t
    return t
